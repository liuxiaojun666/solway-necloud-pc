ajaxData(
    {
        stClassLIst: {
            name: 'GETstClassLIst',
            data: {}
        },
        pvwpStationOverview: {
            name: 'GETpvwpStationOverview',
            data: {}
        },
        home_pv_company_rad_month_stationlist: {
            name: 'GEThome_pv_company_rad_month_stationlist',
            data: {},
            later: true
        },
        home_pv_company_real_hours_month_stationlist: {
            name: 'GEThome_pv_company_real_hours_month_stationlist',
            data: {},
            later: true
        },
        home_wp_company_ws_avg_month_stationlist: {
            name: 'GEThome_wp_company_ws_avg_month_stationlist',
            data: {},
            later: true
        },
        home_wp_company_real_hours_month_stationlist: {
            name: 'GEThome_wp_company_real_hours_month_stationlist',
            data: {},
            later: true
        },
        // 切换电站
        changeStation: {
            name: 'GETUserAuthHandleChangeDataType',
            data: {},
            later: true
        },
    }, {
        __serviceName__: 'mainResourcesService',
    }
)('mainResourcesCtrl', ['$scope', 'mainResourcesService', 'actionRecord', '$interval', '$state'], ($scope, myAjaxData, historicalRecord, $interval, $state) => {
    $('.themeResources.ng-clock').removeClass('ng-clock');
    let od;
    // 电站类型列表
    $scope.stClassLIst.subscribe(res => {
        $scope.stClassLIst.res.stClass01 = res.data.some(v => v.id === '01');
        $scope.stClassLIst.res.stClass02 = res.data.some(v => v.id === '02');
    });
    $scope.stClassLIst.subscribe(res => {
        const date = new Date().Format('yyyy-MM-dd').substr(0, 7);
        [
            'home_pv_company_rad_month_stationlist',
            'home_pv_company_real_hours_month_stationlist',
            'home_wp_company_ws_avg_month_stationlist',
            'home_wp_company_real_hours_month_stationlist',
        ].forEach(element => $scope[element].getData({
            queryCode: [element],
            queryType: 1,
            date
        }));
    });

    $scope.goThisStation = async ({stid, stClass, router, pageData}) => {
        const falsify = historicalRecord.falsify(router, pageData, false);
        if (falsify && (falsify.redirect === 'failure')) return;
        await $scope.changeStation.getData({
            dataType: 0,
            id: stid,
            isGroup: "0",
            stClass
        });
        $state.go(router);
    };

    $scope.home_pv_company_rad_month_stationlist.subscribe(res => {
        if (!res.body.data[0]) return;
        $scope.home_pv_company_rad_month_stationlist.res.body.data = res.body.data.sort((a, b) => b.rad_chk - a.rad_chk);
        $scope.home_pv_company_rad_month_stationlist.maxNum = $scope.home_pv_company_rad_month_stationlist.res.body.data[0].rad_chk
    });

    $scope.home_pv_company_real_hours_month_stationlist.subscribe(res => {
        if (!res.body.data[0]) return;
        $scope.home_pv_company_real_hours_month_stationlist.res.body.data = res.body.data.sort((a, b) => b.real_hours - a.real_hours);
        $scope.home_pv_company_real_hours_month_stationlist.maxNum = $scope.home_pv_company_real_hours_month_stationlist.res.body.data[0].real_hours
    });

    $scope.home_wp_company_ws_avg_month_stationlist.subscribe(res => {
        if (!res.body.data[0]) return;
        $scope.home_wp_company_ws_avg_month_stationlist.res.body.data = res.body.data.sort((a, b) => b.ws_avg - a.ws_avg);
        $scope.home_wp_company_ws_avg_month_stationlist.maxNum = $scope.home_wp_company_ws_avg_month_stationlist.res.body.data[0].ws_avg
    });

    $scope.home_wp_company_real_hours_month_stationlist.subscribe(res => {
        if (!res.body.data[0]) return;
        $scope.home_wp_company_real_hours_month_stationlist.res.body.data = res.body.data.sort((a, b) => b.real_hours - a.real_hours);
        $scope.home_wp_company_real_hours_month_stationlist.maxNum = $scope.home_wp_company_real_hours_month_stationlist.res.body.data[0].real_hours
    });

    $scope.pvwpStationOverview.subscribe(async res => {
        await myAjaxData.timeout(0);
        od = new Odometer({ el: document.getElementById('odometer'), value: 100000 });
        od && od.update('1' + ('00000000' + (+res.body.ov.co2).toFixed()).substr(-6));
        hideNum0();
        setTimeout(hideNum0, 2500);
    });

    function hideNum0() {
        let has = false;
        let styleText = '';
        $('#odometer .odometer-value').each(function (index) {
            const $this = $(this);
            if (!has && $this.text() === '0') {
                styleText += `#odometer .odometer-digit:nth-child(${index + 1}) .odometer-value{color: transparent;}`;
            } else {
                styleText += `#odometer .odometer-digit:nth-child(${index + 1}) .odometer-value{color: #067b40;}`;
                has = true
            }
        });
        $('#odometerStyle').html(styleText);
    }
});