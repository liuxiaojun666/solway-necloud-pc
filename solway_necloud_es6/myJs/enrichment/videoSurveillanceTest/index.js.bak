ajaxData(
    {
        selectVideos: {
            name: 'GETselectVideos',
            data: {}
        },
        videoToken: {
            name: 'GETvideoToken',
            data: {},
            later: true,
            saveParam: false
        }
    }, {

    }
)('videoSurveillanceCtrl', ['$scope', 'myAjaxData', 'actionRecord', '$interval', 'toaster', '$ocLazyLoad'], ($scope, myAjaxData, historicalRecord, $interval, toaster, $ocLazyLoad) => {
    historicalRecord.init();// 历史记录 初始化
    $scope.beforeLoading = true; // 页面loading
    $scope.moduleName = '视频监控';//当前页面名称；
    $scope.EnableFlash = navigator.plugins['Shockwave Flash'];
    videojs.options.flash.swf = '/vendor/videojs/video-js-5.19.2/video-js-fixed.swf';
    videojs.options.techOrder = ['flash'];
    const maxVideoView = $scope.maxVideoView = 12;
    historyInitCallback();
    const createImg = createCanvas();
    $ocLazyLoad.load(['vendor/videojs/videojs.hotkeys.min.js']);
    let wsReOpen = true;
    let ws = openWs();

    function openWs() {
        let _ws = new WebSocket('ws://192.168.10.164:50225/video');
        _ws.onopen = function () {
            toaster.pop('success', '', 'ws连接成功');
            $scope.$apply();
        };
        _ws.onmessage = function (evt) {
            toaster.pop('error', '', evt.data);
            $scope.$apply();
        };
        _ws.onclose = function () {
            $scope.$apply();
            if (wsReOpen) ws = openWs();
        };
        return _ws;
    }

    


    const settings = {
        check: {
            enable: true,
        },
        view: {
            showLine: false,
            showIcon: true,
            fontCss: { color: 'rgba(255,255,255,.8)' },
            dblClickExpand: false,
            nameIsHTML: false,
        },
        data: {
            simpleData: {
                enable: true,
                idKey: "id",
                pIdKey: "pid",
                rootPId: null
            },
            key: {
                name: "name"
            }
        },
        callback: {
            onClick(e, treeId, treeNode) {
                $.fn.zTree.getZTreeObj(treeId).expandNode(treeNode);
                $(".curSelectedNode").removeClass("curSelectedNode");
            },
            onCheck(event, treeId, treeNode) {
                const ztree = $.fn.zTree.getZTreeObj(treeId);
                push_video(treeNode);
                function push_video(_treeNode) {
                    if (_treeNode.children) {
                        return _treeNode.children.forEach(v => {
                            push_video(v);
                        });
                    }

                    const { id, name, destUrl, stid, eqid } = _treeNode;
                    const stationName = _treeNode.getParentNode().name;
                    if ($scope.checked_videos[id] && !treeNode.checked) {
                        const id_index = $scope.checked_videos.findIndex(v => id === v.id);
                        $scope.checked_videos[id_index].video && $scope.checked_videos[id_index].video.dispose();
                        $scope.checked_videos[id_index].req_data = null;
                        $scope.checked_videos[id_index].destUrl = '';
                        $scope.checked_videos[id_index].token = null;
                        $scope.checked_videos.splice(id_index, 1);
                        $scope.checked_videos.push({ id: Math.random() });
                        $scope.checked_videos[id] = null;
                        $scope.$apply();
                    } else if (!$scope.checked_videos[id] && treeNode.checked) {
                        const index = $scope.checked_videos.findIndex(v => !v.destUrl);
                        if (index === -1) {
                            _treeNode.checked = false;
                            ztree.updateNode(_treeNode);
                            toaster.pop('error', '', '最多同时查看视频' + maxVideoView + '个!');
                            return $scope.$apply();
                        }
                        $scope.checked_videos[id] = true;
                        $scope.checked_videos[index] = { id, name, destUrl, stid: +stid, eqid: +eqid, stationName };
                        $scope.checked_videos[index].req_data = {
                            stid: +stid, eqid: +eqid
                        };
                        $scope.$apply();
                    }
                }
            }
        }
    };

    $scope.selectVideos.subscribe(res => {
        if (res.code !== 0) return;
        $ocLazyLoad.load([
            'vendor/jquery/ztree/jsCopy/jquery.ztree.core.js', //ztree
        ]).then(() => $ocLazyLoad.load([
            'vendor/jquery/ztree/jsCopy/jquery.ztree.exhide.js', //ztree
            'vendor/jquery/ztree/jsCopy/jquery.ztree.excheck.js', //ztree        
        ])).then(() => {
            res.body['01'] && $.fn.zTree.init($("#tree_pv"), settings, res.body['01']).expandAll(true);
            res.body['02'] && $.fn.zTree.init($("#tree_wp"), settings, res.body['02']).expandAll(true);
        });
    });


    // 当前页面行为记录初始化回调 获取行为记录
    async function historyInitCallback() {
        const historiData = historicalRecord.get();
        const { lineNum = 4, proportion = [2, 1] } = historiData;

        $scope.lineNum = lineNum;
        $scope.proportion = proportion;
        $scope.checked_videos = new Array(maxVideoView).fill('').map((v, i) => ({ id: Math.random() }));

        $scope.beforeLoading = false;
        await myAjaxData.timeout(0);
        $scope.$apply();
    };

    $scope.changeLineNum = num => {
        $scope.lineNum = num;
        historicalRecord.set({ lineNum: num });
    };

    $scope.changeProportion = proportion => {
        $scope.proportion = proportion;
        historicalRecord.set({ proportion });
    };

    $scope.getTokenAndPlay = async ({ stid, eqid, id, stationName, name, req_data, destUrl }, index) => {
        const res = await $scope.videoToken.getData({ stid, eqid });
        const token = $scope.checked_videos[index].token = res.body.token;
        $scope.checked_videos[index].rtmpSource = (destUrl + '/' + stid + '_' + eqid + '?stid=' + stid + '&eqid=' + eqid + '&token=' + encodeURIComponent(token));
        $scope.$apply();
        $scope.checked_videos[index].video = videojs(
            'video_' + id,
            {
                autoplay: true,
                poster: await createImg(stationName + '：' + name, null)
            },
            function () {
                this.hotkeys({
                    volumeStep: 0.1,
                    seekStep: 5,
                    enableVolumeScroll: false, //禁用鼠标滚轮调节问音量大小
                    enableModifiersForNumbers: false
                });
                this.on('play', function () {
                    ws.send(JSON.stringify({ ...req_data, token, cmd: "getvideo" }));
                    console.log('getvideo')
                    $scope.checked_videos[index].isPlay = true;
                    $('#video_' + id).append(`
                        <div data-token="${token}" data-stid="${stid}" data-eqid="${eqid}" class="hide-evn-production cloud_contrller">
                            <h5>云镜控制</h5>
                            <div class="steeringWheel">
                                <i class="top" title="持续向上"></i>
                                <i class="bottom" title="持续向下"></i>
                                <i class="left" title="持续向左"></i>
                                <i class="right" title="持续向右"></i>
                                <i class="stop" title="暂停">||</i>
                            </div>
                            <div class="joystick">
                                <div>
                                    <i class="iconfont pull-left zoom-in" title="放大"> + </i>
                                    <span>变倍</span>
                                    <i class="iconfont pull-right zoom-out" title="缩小"> - </i>
                                </div>
                            </div>
                        </div>
                    `).find('.cloud_contrller').on('click', wsSend);
                    $scope.$apply();
                });
                this.on('pause', function () {
                    $scope.checked_videos[index].isPlay = false;
                    $('#video_' + id).find('.cloud_contrller').off('click', wsSend).remove();
                    $scope.$apply();
                });
            }
        );
    };

    // websocked 云镜控制
    function wsSend(event) {
        const {token, eqid, stid} = event.currentTarget.dataset
        if (event.target.className.includes('stop')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "stop" }));
            console.log('ws: send: ' + "stop")
            return
        }else if (event.target.className.includes('top')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "up" }));
            console.log('ws: send: ' + "up")
            return
        } else if (event.target.className.includes('bottom')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "down" }));
            console.log('ws: send: ' + "down")
            return
        } else if (event.target.className.includes('zoom-in')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "zoom+" }));
            console.log('ws: send: ' + "zoom+")
            return
        } else if (event.target.className.includes('zoom-out')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "zoom-" }));
            console.log('ws: send: ' + "zoom-")
            return
        } else if (event.target.className.includes('left')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "left" }));
            console.log('ws: send: ' + "left")
            return
        } else if (event.target.className.includes('right')) {
            ws.send(JSON.stringify({ eqid: +eqid, stid: +stid, token, cmd: "right" }));
            console.log('ws: send: ' + "right")
            return
        }
    }

    const timer = $interval(() => {
        $scope.checked_videos.forEach((v, i) => {
            if (!v.req_data) return;
            if (!v.isPlay) return;
            ws.send(JSON.stringify({ ...v.req_data, token: v.token, cmd: "getvideo" }));
            console.log('ws: send: ' + "getvideo" + JSON.stringify(v.req_data));
        });
    }, 30 * 1000);

    const timer2 = $interval(() => {
        $scope.checked_videos.forEach(async(v, i) => {
            if (!v.req_data) return;
            if (!v.isPlay) return;
            $scope.videoToken.getData({
                stid: v.stid,
                eqid: v.eqid
            }).then(res => {
                $scope.checked_videos[i].token = res.body.token;
                $('#video_' + v.id).find('.cloud_contrller').attr('data-token', res.body.token);
            });
        });
    }, 60 * 4 * 1000);

    function createCanvas() {
        const c = document.createElement('canvas');
        c.setAttribute('width', 450);
        c.setAttribute('height', 30);
        const ctx = c.getContext("2d");
        ctx.font = "18px Arial";
        ctx.fillStyle = "#fff";

        return async function createImg(name, url) {
            ctx.clearRect(0, 0, 600, 300);
            url && ctx.drawImage(await loadImg(url), 0, 0);
            ctx.fillText(name, 10, 20);
            return c.toDataURL("image/png");
        };
    }

    function loadImg(url) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = url;
            img.onload = () => resolve(img);
            img.onerror = () => reject(new Error('图片加载失败'));
        });
    }

    $scope.$on('$destroy', () => {
        $scope.checked_videos.forEach(v => v.video && v.video.dispose());
        $.fn.zTree.destroy();
        $interval.cancel(timer);
        $interval.cancel(timer2);
        ws.close();
        wsReOpen = false;
    });




});