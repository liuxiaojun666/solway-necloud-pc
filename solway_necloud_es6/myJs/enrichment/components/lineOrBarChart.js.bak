app.directive('commonChartLineOrBar', ['myAjaxData', '$timeout', (myAjaxData, $timeout) => ({
    restrict: 'E',
    scope: {
        width: '=',
        height: '=',
        ynames: '=',
        linenames: '=',
        xname: '=',
        xdata: '=',
        ydatas: '=',
        yMin: '=',
        yMax: '=',
        colors: '=',
        types: '=',
        backgroundColor: '=',
        fontColor: '=',
        axisColor: '=',
        barWidth: '=',
        splitLine: '=',
        datazoom: '=',
        linezoom: '=',
        symbolSize: '=',
        splitNumber: '=',
        imagesymboloptions: '=',
        stack: '=',
        itemClick: '=',
        interval: '=', 
        tooltipFormatter: '=', // 自定义 tooltip
        lineWidth: '=', // 线宽
        toFixed: '=', // 保留小数位数  精度
        areaFill: '=', // 填充， 线性渐变
        markLine: '=', // 标记线
        legend: '=',
        grid: '=',
    },
    link($scope, $element) {
        let myChart;
        $timeout(() => {
            $element.css('display', 'block')
            setWidthHeight();
            myChart = echarts.init($element[0]);
            $scope.$watchGroup(['xdata', 'ydatas', 'imagesymboloptions', 'colors'], (newValue, oldValue) => {
                if (!newValue) return;
                drawing();
            });
            if ($scope.width === '100%' || $scope.height === '100%') {
                window.addEventListener('resize', resizeFunc);
            }
            $scope.$watchGroup(['height', 'width'], async (newValue, oldValue) => {
                if (!newValue) return;
                await resizeFunc();
            });
            regestEvent();
        }, 0);

        const drawing = () => {
            const { 
                stack = [[''], []], 
                width, 
                toFixed = 1,
                interval = void 0, 
                lineWidth = 1, 
                tooltipFormatter = (params, ticket, callback) => {
                    if (imagesymboloptions && imagesymboloptions.show) params.pop();
                    return params[0].name + '<br/>' + params.map(v => v.seriesName + ':    ' + v.value + '<br/>').join('');
                }, 
                backgroundColor, 
                imagesymboloptions, 
                symbolSize, 
                splitNumber, 
                splitLine, 
                barWidth = 20, 
                axisColor, 
                fontColor, 
                linenames = [], 
                ynames = [], 
                xname = '', 
                xdata = [], 
                ydatas = [[[]]], 
                yMin = [],
                yMax = [],
                types = [], 
                colors = [], 
                datazoom,
                linezoom,
                areaFill, 
                markLine,
                legend = {},
                grid = {
                    top: '60',
                    left: '20',
                    right: '20',
                    bottom: '0',
                    containLabel: true
                }
            } = $scope;
            const option = {
                backgroundColor,
                tooltip: {
                    trigger: 'axis', //触发类型。[ default: 'item' ] :数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用;'axis'坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用
                    axisPointer: {
                        lineStyle: {
                            color: axisColor
                        }
                    },
                    formatter: tooltipFormatter
                },
                legend: {
                    icon: 'rect',
                    itemWidth: 20,
                    itemHeight: 4,
                    itemGap: 30, //图例每项之间的间隔。横向布局时为水平间隔，纵向布局时为纵向间隔。[ default: 10 ] 
                    data: linenames.reduce((a, b) => a.concat(b), []),
                    right: 200,
                    left: 200,
                    top: 30,
                    textStyle: {
                        fontSize: 12,
                        color: fontColor
                    },
                    ...legend,
                },
                grid,
                xAxis: [{
                    type: 'category',
                    // boundaryGap: false, //坐标轴两边留白策略，类目轴和非类目轴的设置和表现不一样
                    axisLine: {
                        lineStyle: {
                            color: axisColor //坐标轴线线的颜色。
                        }
                    },
                    axisLabel: {
                        textStyle: {
                            color: fontColor
                        }
                    },
                    axisTick: {
                        inside: true
                    },
                    data: xdata,
                    name: xname,
                    nameTextStyle: {
                        color: fontColor
                    }
                }],
                yAxis: ynames.map((name, i) => ({
                    type: 'value',
                    name,
                    nameTextStyle: {
                        color: fontColor
                    },
                    splitNumber,
                    interval,
                    min: yMin[i],
                    max: yMax[i],
                    axisTick: {
                        show: false //是否显示坐标轴刻度
                    },
                    axisLine: {
                        lineStyle: {
                            color: axisColor //坐标轴线线的颜色
                        }
                    },
                    axisLabel: {
                        margin: 5, //刻度标签与轴线之间的距离
                        // inside: true,
                        textStyle: {
                            color: fontColor,
                            fontSize: 12 //文字的字体大小
                        }
                    },
                    splitLine: {
                        show: splitLine,
                        lineStyle: {
                            color: axisColor, //分隔线颜色设置
                            type: 'dashed'
                        }
                    }
                })),
                dataZoom: datazoom && (((width - 100) / ydatas[0][0].length / (types[0].concat(types[1]).filter(v => (v === 'bar' || linezoom)).length)) < (barWidth + 10)) && [{
                    type: 'slider',
                    xAxisIndex: 0,
                    filterMode: 'empty',
                    end: (width - 100) / ydatas[0][0].length * 2
                    // handleSize: $scope.width
                }],
                series: ydatas.map((v, i) => (v.map((data, xi) => ({
                    name: linenames[i][xi],
                    type: types[i][xi],
                    barWidth: barWidth,
                    stack: stack[i][xi] || (i + '' + xi),
                    yAxisIndex: i,
                    smooth: true,
                    symbol: 'circle',
                    showSymbol: symbolSize ? true : false,
                    symbolSize: symbolSize,
                    data: data.map((xxv, xxi) => {
                        if (!Number.isNaN(xxv + '' - 0)) return (+xxv).toFixed(toFixed) - 0;
                        else return xxv === null ? '-' : xxv;
                    }),
                    itemStyle: {
                        normal: {
                            lineStyle: {
                                width: lineWidth
                            },
                            color: (types[i][xi] === 'bar') && (colors[i][xi].includes('rgb')) ? {
                                type: 'linear',
                                x: 0,
                                y: 0,
                                x2: 0,
                                y2: 1,
                                colorStops: [{
                                    offset: 0, color: colors[i][xi] // 0% 处的颜色
                                }, {
                                    offset: 1, color: 'rgba' + colors[i][xi].slice(3, -1) + ',.1' + ')' // 100% 处的颜色
                                }],
                                globalCoord: true
                            } : colors[i][xi]
                        }
                    },
                    areaStyle: (areaFill && areaFill[i][xi]) && {
                        normal: {
                            color: {
                                type: 'linear',
                                x: 0,
                                y: 0,
                                x2: 0,
                                y2: 1,
                                colorStops: areaFill[i][xi],
                                globalCoord: false // 缺省为 false
                            }
                        }
                    },
                    markLine: markLine && markLine[i][xi]
                })))).reduce((a, b) => a.concat(b), []).concat(imagesymboloptions && imagesymboloptions.show &&  {
                    type: 'pictorialBar',
                    yAxisIndex: imagesymboloptions.yAxisIndex,
                    symbolPosition: 'end',
                    symbolSize: imagesymboloptions.symbolSize,
                    symbolOffset: imagesymboloptions.symbolOffset,
                    data: (imagesymboloptions.data || ydatas[imagesymboloptions.ydatasIndex[0]][imagesymboloptions.ydatasIndex[1]]).map((v, i) => ({
                        value: imagesymboloptions.images[i] && v,
                        symbol: imagesymboloptions.images[i],
                    }))
                })
            };
            myChart.setOption(option, true);
        };

        // 设置宽高
        const setWidthHeight = () => $element.width($scope.width).height($scope.height);

        // 宽高改变  重新画
        const resizeFunc = async () => {
            await myAjaxData.timeout(0);
            setWidthHeight();
            myChart.resize();
            drawing();
        };
        function regestEvent() {
            myChart.on('click', (params) => {
                $scope.itemClick && $scope.itemClick(params);
            });
        }
        $scope.$on('$destroy', () => {
            myChart && echarts.dispose(myChart);
            myChart = null;
            window.removeEventListener('resize', resizeFunc);
        });
    }
})]);