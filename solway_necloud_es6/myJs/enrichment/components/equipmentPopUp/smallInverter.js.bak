ajaxData(
    {
        inverterCount: {
            name: 'GETinverterCount',
            data: {},
            later: true
        },
        inverterHours: {
            name: 'GETinverterHours',
            data: {},
            later: true
        },
        singleRealDataBInverter: {
            name: 'GETsingleRealDataBInverter',
            data: {},
            later: true,
            sameTimeOnce: true,
            onlyLatest: true
        },
        newHistoryData: {
            name: 'GETnewHistoryData',
            data: {},
            later: true,
            onlyLatest: true,
            cache: true
        },
        faultAlarmList: {
            name: 'GETfaultAlarmList',
            data: {},
            later: true
        }
    },
    {
        __serviceName__: 'smallInverterService',
        initChart: () => ({
            chart1: echarts.init(document.getElementById('inverterChart1')),
            chart2: echarts.init(document.getElementById('inverterChart2')),
            chart3: echarts.init(document.getElementById('inverterChart3')),
        }),
        getAVWMaxValueData: (instkw, currentV) => {
            var reList = [];
            var reMap1 = {};
            var reMap2 = {};
            var reMap3 = {};
            reMap1["A1"] = (250 / 600);
            reMap1["A2"] = (450 / 600);
            reMap1["A3"] = 600;
            reMap2["A1"] = 0.1;
            reMap2["A3"] = Math.ceil(instkw * 1.1);
            if ((reMap2["A3"] % 10) > 0) reMap2["A3"] = reMap2["A3"] + (10 - reMap2["A3"] % 10)
            reMap2["A2"] = (instkw / reMap2["A3"]);
            var ACPmax;
            if (currentV && currentV > 300) ACPmax = Math.ceil(reMap2["A3"] * 1000 / 380);
            else ACPmax = Math.ceil(reMap2["A3"] * 1000 / 220);
            if ((ACPmax % 10) > 0) ACPmax = ACPmax + (10 - ACPmax % 10);
            reMap3["A1"] = 0.1;
            reMap3["A2"] = 0.9;
            reMap3["A3"] = ACPmax;
            reList.push(reMap1);
            reList.push(reMap3);
            reList.push(reMap2);
            return reList;
        },
        getOption: (ucp, value, unit, name, displayName) => ({
            animation: false,
            tooltip: {
                formatter: "{a}  : {c}" + unit
            },
            toolbox: {
                show: false,
                feature: {
                    mark: { show: true },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            series: [
                {
                    name,
                    type: 'gauge',
                    startAngle: 180,
                    radius: 120,
                    center: ['50%', '60%'],
                    endAngle: 0,
                    max: ucp["A3"],
                    splitNumber: 10,       // 分割段数，默认为5
                    axisLine: {            // 坐标轴线
                        lineStyle: {       // 属性lineStyle控制线条样式
                            color: [[ucp["A1"], '#5CDD66'], [ucp["A2"], '#6CE1FE'], [1, '#FE5415']],
                            width: 8
                        }
                    },
                    axisTick: {            // 坐标轴小标记
                        splitNumber: 10,   // 每份split细分多少段
                        length: 12,        // 属性length控制线长
                        lineStyle: {       // 属性lineStyle控制线条样式
                            color: 'auto'
                        }
                    },
                    axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
                        textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                            color: 'auto'
                        }
                    },
                    splitLine: {           // 分隔线
                        show: true,        // 默认显示，属性show控制显示与否
                        length: 20,         // 属性length控制线长
                        lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
                            color: 'auto'
                        }
                    },
                    pointer: {
                        width: 5
                    },
                    title: {
                        show: true,
                        offsetCenter: [0, '-40%'],       // x, y，单位px
                        textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                            fontWeight: 'bolder',
                            color: '#fff'
                        }
                    },
                    detail: {
                        formatter: function (value) {
                            if (value) {
                                return value.toFixed(1);
                            } else {
                                return value;
                            }
                        },
                        textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
                            color: 'auto',
                            fontWeight: 'bolder',
                            fontSize: 20
                        },
                        offsetCenter: [0, '15%'],
                        height: -30
                    },
                    data: [{ value, name: displayName }]
                }
            ]
        })
    }
)('smallInverterCtrl', ['$scope', 'smallInverterService', 'equipmentPopUpService', '$interval'], function ($scope, currentService, eqService, $interval) {
    $('.smallInverter.ng-clock').removeClass('ng-clock');
    $scope.tabIndex = 0; //初始化 tab 标签页   0：实时数据  1：历史数据   2：故障信息
    $scope.pstationid = eqService.config.eqObj.pstationid;
    $scope.serialnumber = eqService.config.eqObj.deviceSerialNnumber;
    $scope.historyDataNullPlaceholder = '<img style="position:absolute;left:500px;top:70px;" src="theme/images/enrichment/noData.png" alt="没有加载到数据插画" />';
    $scope.eqHistoryDataStartDate = new Date(Date.now() - 1000 * 60 * 60 * 24);
    $scope.eqHistoryDataEndDate = new Date;
    let charts;

    // 逆变器小时数信息获取
    $scope.inverterHours.beforGetData = () => {
        if ($scope.inverterHours.res) return;
        $scope.inverterHours.getData({ id: eqService.config.eqObj.deviceId });
    };
    
    // 逆变器基本信息获取
    $scope.inverterCount.getData({
        pageIndex: 0,
        param: eqService.config.eqObj.deviceId
    });

    // 实时数据获取
    $scope.singleRealDataBInverter.getData({
        id: eqService.config.eqObj.deviceId,
        serialnumber: eqService.config.eqObj.deviceSerialNnumber,
        pstationid: eqService.config.eqObj.pstationid
    });

    // 实时数据 处理
    $scope.singleRealDataBInverter.subscribe(res => {
        const { getOption, getAVWMaxValueData } = currentService.config;
        const {acu, acc, acp, acc_kw} = res.data;
        const ucp = getAVWMaxValueData(acc_kw, acu);
        const { chart1, chart2, chart3 } = charts || currentService.config.initChart();
        chart1.setOption(getOption(ucp[0], acu, 'V', '电压', 'AC电压(V)'));
        chart2.setOption(getOption(ucp[1], acc, 'A', '电流', 'AC电流(A)'));
        chart3.setOption(getOption(ucp[2], acp, 'kW', '功率', 'AC功率(kW)'));
    });

    // 状态刷新
    const timer = $interval(() => {
        if ($scope.tabIndex !== 0) return;
        if ($scope.rtmSingleStationComm.res.comm === 1) return;
        $scope.singleRealDataBInverter.getData({});
    }, 5 * 1000);

    // 历史数据 列表 接口请求
    $scope.newHistoryData.beforGetData = async () => {
        await currentService.timeout(0);
        $scope.$apply();
        const {eqHistoryDataEndDate, eqHistoryDataStartDate} = $scope;
        const {pstationid, deviceSerialNnumber, deviceId} = eqService.config.eqObj;
        $scope.newHistoryData.getData({
            pageIndex: 1,
            pageSize: 10,
            devicetype: 2,
            begindate: eqHistoryDataStartDate.showDate,
            enddate: eqHistoryDataEndDate.showDate,
            stationid: pstationid,
            serialnumber: deviceSerialNnumber,
            id: deviceId
        });
    };

    // 历史数据 列表 接口 返回 处理
    $scope.newHistoryData.subscribe(async res => {
        $scope.column = [
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '180px',
                align: 'center',
                sort: true,
                fixed: 'left',
                render(text) {
                    return `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>`
                }
            }, {
                dataIndex: 'dcu',
                title: 'DC电压(V)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'dcc',
                title: 'DC电流(A)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'dcp',
                title: 'DC功率(kW)',
                width: '90px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'acu',
                title: 'AC电压(V)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'acc',
                title: 'AC电流(A)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'acp',
                title: 'AC功率(kW)',
                width: '90px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 't',
                title: '温度(℃)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'ef',
                title: '效率(%)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${(text * 100).toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'f',
                title: '频率(Hz)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'pf',
                title: '功率因数',
                width: '90px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'dw',
                title: '日发电量(度)',
                width: '120px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'tw',
                title: '总发电量(度)',
                width: '120px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            },

        ].concat(new Array(20).fill('c').map((v, i) => ({
            dataIndex: v + (i + 1),
            title: `<span>${i + 1}</span>`,
            width: '80px',
            align: 'right',
            render(text) {
                if (typeof text !== 'number') return '-';
                return `<span>${text.toFixed(2)}</span>`;
            }
        })));
        await currentService.timeout(0);
        $scope.$apply();
    });

    // 故障 列表 接口请求
    $scope.faultAlarmList.beforGetData = () => {
        $scope.faultAlarmList.getData({
            pageIndex: 0,
            pageSize: 10,
            deviceId: eqService.config.eqObj.deviceId,
            deviceType: 2
        });
    };

    // 故障列表 返回 处理
    $scope.faultAlarmList.subscribe(res => {
        $scope.column2 = [
            {
                dataIndex: 'sStartTime',
                title: '发生时间',
                width: '180px',
                align: 'center',
                sort: true,
                render(text) {
                    return text && `<text>${new Date(text).Format('yyyy-MM-dd hh:mm')}</text>`
                }
            },
            {
                dataIndex: 'sEndTime',
                title: '结束时间',
                width: '180px',
                align: 'center',
                sort: true,
                render(text) {
                    return text && `<text>${new Date(text).Format('yyyy-MM-dd hh:mm')}</text>`
                }
            },
            {
                dataIndex: 'faultlevelStr',
                title: '故障级别',
                width: '100px',
                align: 'center',
                sort: true,
            },
            {
                dataIndex: 'eventDesc',
                title: '故障描述',
                width: '200px',
                align: 'left',
                sort: true,
            },
            {
                dataIndex: 'sEndTime',
                title: '结果',
                width: '200px',
                align: 'left',
                render(text) {
                    return text ? '关闭' : '报告'
                }
            },
            {
                dataIndex: 'handstatusStr',
                title: '人工处理状态',
                width: '200px',
                align: 'left',
                sort: true,
            },
        ];
    });

    // 销毁事件
    $scope.$on('includePageDesdroy', () => {
        $scope.inverterCount.res = null;
        $scope.inverterHours.res = null;
        $scope.singleRealDataBInverter.res = null;
        $scope.newHistoryData.res = null;
        $scope.faultAlarmList.res = null;
        if (charts) {
            echarts.dispose(charts.chart1);
            echarts.dispose(charts.chart2);
            echarts.dispose(charts.chart3);
        }
        $interval.cancel(timer);
    });

});