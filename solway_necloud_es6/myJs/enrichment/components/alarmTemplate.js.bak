app.directive('alarmTemplate', ['$ocLazyLoad', '$http', '$state', '$timeout','$rootScope','toaster','$interval', ($ocLazyLoad, $http, $state, $timeout,$rootScope,toaster,$interval) => ({
    restrict: 'E',
    transclude: !0,
    replace: !0,
    scope: {

    },
    templateUrl: 'tpl/enrichment/components/alarmTemplate.html' + window.stamp,
    link($scope, $element) {  
        // 本地存储，语音、铃声等 按钮的启用状态
        const getCheckboxStatus = () =>{
            if ($solway.getStore().alarmCheckboxStored.hasRecorded) {
                $scope.alarmCheckboxStored = $solway.getStore().alarmCheckboxStored
            }else {
                $scope.alarmCheckboxStored = {'hasRecorded':true,'absent':true,'voice':true,'bell':true}
                $solway.setStore('alarmCheckboxStored',$scope.alarmCheckboxStored ); 
            }
        }

        getCheckboxStatus()
        
        $ocLazyLoad.load([
            window.baseUrl + "/theme/js/dist/components/confirm.js" + window.stamp,
            window.baseUrl + "/theme/css/enrichment/blocks/alarmTemplate.css" + window.stamp,
        ]).then(()=>{
            $scope.maxUpdateTime = 0;
            $scope.ifFirstTime = true;
            $scope.initColumns();
            $scope.pendding = false;
            $timeout(()=>{
                $scope.initData();
            },0)
        })

        $scope.$on('broadcastSwitchStation',(e,v)=>{
            $scope.maxUpdateTime = 0;
            $scope.ifFirstTime = true;
            $scope.initColumns();
            $solway.setStore('alarm', {'voiceTime':0}); 
            $scope.pendding = false;
            $scope.datalist = [];

            $scope.initData();
        })

        //报警状态,初始化参数
        $scope.currentStatus = 'normal'; //abnormal,normal

        var newUtterance = new SpeechSynthesisUtterance();
        newUtterance.lang = 'zh-cn';

        let testSpeek = e =>{
            if (e.ctrlKey && $scope.ifVoiced) { 
                newUtterance.text = '2018年09月8日6点6分28秒 金峰财富HL0118告警';
                window.speechSynthesis.speak(newUtterance);
            }
        }
        //测试
        document.addEventListener('dblclick',(e) => testSpeek(e),false);

        const judgeIfAlarm = () =>{
            if(!$scope.alarmListPageShow){
                $scope.alarmListPageShow = false;
                $scope.ifTwinkle = $scope.total_sure_no?true:false;
            }
        }

        //下拉或者收缩
        $scope.toggleAlarmList = () =>{
            $scope.alarmListPageShow = !$scope.alarmListPageShow;
            if ($scope.alarmListPageShow) {
                $scope.ifTwinkle = false;
                $(".alarm-list").slideDown();
            } else {
                $scope.ifTwinkle = $scope.total_sure_no?true:false;
                $scope.voiceContent = '';
                $(".alarm-list").slideUp();
            }
        }

        //设置列表高度
        const calculateListHeight = () =>{
            $scope.winHeight = $(window).height();
            $(".alarm-list").height($scope.winHeight-68);
        }
    
        calculateListHeight();
        window.addEventListener('resize', calculateListHeight);

        //控制是否可以语音播放
        $scope.changeInputVoice = e =>{
            $solway.setStore('alarmCheckboxStored', {
                ...$solway.getStore().alarmCheckboxStored,
                voice: e.target.checked
            })
            getCheckboxStatus()
        }

        //控制是否可以铃声播报
        $scope.changeInputBell = e => {
            $solway.setStore('alarmCheckboxStored', {
                ...$solway.getStore().alarmCheckboxStored,
                bell: e.target.checked
            })
            getCheckboxStatus()
        }

        //控制是否显示已消缺
        $scope.changeInputAbsent = e =>{
            $solway.setStore('alarmCheckboxStored', {
                ...$solway.getStore().alarmCheckboxStored,
                absent: e.target.checked
            })
            getCheckboxStatus()
            $scope.maxUpdateTime = 0;
            $scope.ifFirstTime = true;
            $scope.datalist = [];
            $scope.initData();
        }

        //批量标记为已确认
        $scope.toConfirm = () =>{
            const checkedIds = [];
            $("input[name='alarmCheckedName']:checked").map((index,v)=>{
                checkedIds.push(v.dataset.ids)
            })
            if(checkedIds.length){
                $solway.confirm({ message: '确定标记所选定消息为已确认？'}, () => {
                    $http({
                        method: "GET",
                        url: window.interface['GETrunAlarmConfirmBatch'],
                        params: {
                            ids:checkedIds.join(',')
                        }
                    }).success(function (res) {
                        if(res.code == 0){
                            toaster.pop('success', '', res.msg);
                            $scope.maxUpdateTime = 0;
                            $scope.ifFirstTime = true;
                            $scope.initData();
                        }else{
                            toaster.pop('error', '', res.msg);
                        }
                    });
                });
            }else{
                toaster.pop('info', '', '请选择要确认的消息');
            }
        }
        
        $scope.initData = (flag) =>{
            if($scope.pendding) return;
            $scope.datalist = $scope.datalist || [];
            $scope.pendding = true;

            if(flag) {
                $scope.maxUpdateTime = 0;
                $scope.ifFirstTime = true;
                $scope.datalist = [];
            }

            let checkedCondition = [];
     
            $("input[name='conditionType']:checked").map((index,v)=>{
                checkedCondition.push(v.dataset.status)
                if($rootScope.stationCurrentClass == '02' && v.dataset.status == '1') checkedCondition.push('13')
            })

            if(!checkedCondition.length){
                $scope.datalist = [];
                $scope.pendding = false;
                return false;
            }
            var voiceTime = $solway.getStore().alarm.voiceTime?$solway.getStore().alarm.voiceTime:0;

            $http({
                method: "GET",
                url: window.interface['GETrunAlarmList'],
                params: {
                    maxUpdateTime:$scope.maxUpdateTime,
                    voiceTime:voiceTime,
                    eventTypes:checkedCondition.join(','),
                    notShowFinish:$scope.alarmCheckboxStored.absent ? 1 : 0
                }
            }).success(function (res) {
                $scope.pendding = false;
                if(res.code == 0){
                    const alarmList = res.body.alarmList;
                    const alarmInfo = res.body.alarmTotalInfo;
                    $scope.total = alarmInfo.rsTotal;//总数
                    $scope.unCloseTotal = alarmInfo.unCloseTotal;//未关闭
                    $scope.total_sure_no = alarmInfo.sureNoTotal;//未确认
                    $scope.total_sure_yes = alarmInfo.sureOkTotal;//已确认
                    $scope.maxUpdateTime = alarmInfo.maxUpdateTime;

                    $solway.setStore('alarm', {'voiceTime':alarmInfo.voiceTime}); 

                    if($.trim(alarmInfo.voiceContent) && !$scope.ifFirstTime){ // 首次进入页面，或者切换电站后，不用报警，第二次开始报警
                        if($scope.alarmCheckboxStored.bell){
                            $("#alarmVoice")[0].play();
                        }
                        if($scope.alarmCheckboxStored.voice){
                            $timeout(()=>{
                                newUtterance.text = alarmInfo.voiceContent;
                                window.speechSynthesis.speak(newUtterance);
                            },3000)
                        }
                    }
                    $scope.ifFirstTime = false;

                    if($scope.unCloseTotal){
                        $scope.currentStatus = 'abnormal';
                    }else{
                        $scope.currentStatus = 'normal';
                    }
                    if(alarmList.length) $scope.datalist = alarmList;
                    judgeIfAlarm();
                }else{
                    toaster.pop('error', '', '请求报警列表失败');
                }
            });

        }   
 
        $scope.initColumns = () =>{
            $scope.column = [
                {
                    title: '<label class="i-checks m-b-none"><input type="checkbox"><i style="background:transparent;"></i></label>',
                    dataIndex: '',
                    width: '60px',
                    align: 'center',
                    checkboxName: 'alarmCheckedName',
                    render(text, record, index) {
                        return '<label class="i-checks m-b-none"><input data-ids="' + record.id + '" name="alarmCheckedName" type="checkbox" /><i style="background:transparent;"></i></label>';
                    }
                },
                {
                    title: '电站名称',
                    dataIndex: 'pstationname',
                    width: '180px',
                },
                {
                    title: '设备名称',
                    dataIndex: 'devicename',
                    width: '180px',
                },
                {
                    title: '发生时间',
                    dataIndex: 'sStartTime',
                    width: '135px',
                    align: 'center',
                    render:function(text, item, index){
                        return text ? new Date(text).Format('yyyy-MM-dd hh:mm') : '-';
                    }
                },
                {
                    title: '消缺时间',
                    dataIndex: 'sEndTime',
                    width: '135px',
                    align: 'center',
                    render:function(text, item, index){
                        return text ? new Date(text).Format('yyyy-MM-dd hh:mm') : '-';
                    }
                },
                {
                    title: '故障类型',
                    dataIndex: 'faultclassStr',
                    width: '100px',
                    render(text, item, index) {
                        return '<span class="'+(item.eventType==1?'device-fault':(item.eventType==2?'device-alarm':(item.eventType==-9?'device-interrupt':'device-normal')))+'">'+text+'</span>';
                    }
                },
                {
                    title: '事件描述',
                    dataIndex: 'eventDesc',
                },
                {
                    title: '确认人',
                    dataIndex: 'sureUserRealName',
                    width: '100px',
                    align: 'center'
                },
                {
                    title: '确认时间',
                    dataIndex: 'sureTime',
                    width: '135px',
                    align: 'center',
                    render:function(text, item, index){
                        return text ? new Date(text).Format('yyyy-MM-dd hh:mm') : '-';
                    }
                },
                {
                    title: '状态',
                    dataIndex: 'sureStatus',
                    width: '100px'
                }
            ];
        }

        const interval = $interval(()=>{
            $scope.initData();
        },60000);

        $scope.$on('$destroy', () => {
            document.removeEventListener('dblclick', testSpeek)
            window.removeEventListener('resize', calculateListHeight);
            $interval.cancel(interval);
            $scope.voiceContent = '';
        });
    }
})])
