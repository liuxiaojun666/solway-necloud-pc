ajaxData({
    AddbaseDictionary: {
        name: 'AddbaseDictionary',
        data: {},
        later: true
    }
}, {})('analysisObjectCtrl', ['$scope', 'myAjaxData', 'actionRecord', '$timeout', 'toaster'], ($scope, myAjaxData, historicalRecord, $timeout, toaster) => {

    //保存
    $scope.save = () => {
        if (!$solway.formValidation($scope.formData, '.newStationTpl', toaster)) return;//校验非空

        let formData = {
            id: $scope.id,
            dictType: $scope.formData.dictType,
            dictName: $scope.formData.dictName,
            dictCode: $scope.formData.dictCode,
            dictEnName: $scope.formData.dictEnName,
            description: $scope.formData.description,
            dictValue: $scope.formData.dictValue
        }

        $scope.AddbaseDictionary.getData(formData).then(res => {
            if (res.key == 0) {
                toaster.pop('success', '', '保存成功');
                $scope.$emit('addCallback');
            } else {
                toaster.pop('error', '', '保存失败');
            }
        })
    }

    //获取父级发送的横轴指标 选择的option
    $scope.$on('analysisObjectNum', (item, index) => {
        $scope.selectIndex = index;
        $scope.radioIndex = index;
        treeData();
    })

    //单选框选中-> 更改select的值
    $scope.radioToSelect = () => {
        var radioIndex = document.querySelectorAll('[name=aObject]'):: [].filter(item => item.checked).map(item => item.dataset.index);
        $scope.$emit('radioIndexNum', { 'radioIndex': radioIndex, 'type': 'analysisObject' });
        $scope.radioIndex = radioIndex[0];
        treeData();
    }

    //tree数据的获取
    function treeData() {
        if ($scope.radioIndex == 2) {
            $scope.zNodes = [
                { id: 1, pId: 0, name: "父节点222" },
                { id: 11, pId: 1, name: "父节点222 - 折叠" },
                { id: 111, pId: 11, name: "子节点1" },
                { id: 113, pId: 11, name: "子节点1" },
                { id: 114, pId: 11, name: "子节点1" },
                { id: 12, pId: 1, name: "父节点12222 - 折叠" },
                { id: 121, pId: 12, name: "子节点1" },
                { id: 122, pId: 12, name: "子节点1" },
                { id: 124, pId: 12, name: "子节点1" },
            ];
        } else if ($scope.radioIndex == 1) {
            $scope.zNodes = [
                { id: 1, pId: 0, name: "父节点1" },
                { id: 11, pId: 1, name: "父节点11 - 折叠" },
                { id: 111, pId: 11, name: "叶子节点111" },
                { id: 112, pId: 11, name: "叶子节点112" },
                { id: 113, pId: 11, name: "叶子节点113" },
                { id: 114, pId: 11, name: "叶子节点114" },
                { id: 12, pId: 1, name: "父节点12 - 折叠" },
                { id: 121, pId: 12, name: "叶子节点121" },
                { id: 122, pId: 12, name: "叶子节点122" },
                { id: 123, pId: 12, name: "叶子节点123" },
                { id: 124, pId: 12, name: "叶子节点124" },
                { id: 13, pId: 1, name: "父节点13 - 没有子节点" }
            ];

        }
        $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
    }

    //选择设备
    $scope.equipChoice = (id) => {
        $scope.equipChoiceId = id;
    }

    //------------------------------------------------ztree 树形控件
    //ztree插件配置
    $scope.setting = {
        check: {
            enable: true
        },
        view: {
            showLine: false,
            showIcon: true,
            fontCss: getFontCss,
            dblClickExpand: false,
            nameIsHTML: false,
        },
        data: {
            simpleData: {
                enable: true,
                idKey: "id",
                pIdKey: "pId",
                rootPId: 0
            },
            key: {
                name: "name"
            }
        },
        callback: {
            onClick: onNodeClick,
            onCheck: checkChangeFn
        }
    };

    $scope.objectDevice = [];
    $scope.objectPower = [];
    $scope.objectArea = [];
    $scope.objectGroup = [];

    const key = {
        1: 'objectDevice',
        2: 'objectPower',
        3: 'objectArea',
        4: 'objectGroup'
    }

    //初始化树
    $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
    var zTree = $.fn.zTree.getZTreeObj("tree");

    //单击父节点展开 子节点
    function onNodeClick(e, treeId, treeNode) {
        zTree.expandNode(treeNode);
        $(".curSelectedNode").removeClass("curSelectedNode");
    }

    //点击多选框 ->右侧穿梭
    function checkChangeFn(event, treeId, treeNode) {
        var checkedNode = zTree.getCheckedNodes(true);
        $scope[key[$scope.radioIndex]] = [];
        checkedNode.map(item => {
            if (!item.children) {
                $scope[key[$scope.radioIndex]].push(item);
            }
        })
    }

    //右侧删除小按钮
    $scope.delRight = (id, index) => {
        zTree.checkNode(zTree.getNodeByParam("id", id), false, true);
        $scope[key[$scope.radioIndex]].splice(index, 1);
    }

    //全部删除
    $scope.delRightAll = () => {
        if ($scope[key[$scope.radioIndex]].length == 0) {
            toaster.pop('error', '', '请至少选择一条');
        } else {
            $solway.confirm({ message: '确定全部删除吗？' }, () => {
                $scope[key[$scope.radioIndex]].map((item) => {
                    zTree.checkNode(zTree.getNodeByParam("id", item.id), false, true);
                })
                $scope[key[$scope.radioIndex]] = [];
                $scope.$apply();
            });
        }
    }

    //搜索功能
    // fuzzySearch('tree', '#key', false, true);

 
    //节点变颜色
    var nodeList = zTree.getNodesByParamFuzzy("name", "叶子节点", null);
    updateNodes(true);

    function updateNodes(highlight) {
        var zTree = $.fn.zTree.getZTreeObj("tree");
        for (var i = 0, l = nodeList.length; i < l; i++) {
            nodeList[i].highlight = highlight;
            zTree.updateNode(nodeList[i]);
        }
    }
    //节点样式方法
    function getFontCss(treeId, treeNode) {
        return treeNode.highlight ? { color: "red" } : { color: '#fff' }
    }






    //------------------------------------------------自己写的 树形控件
    $scope.allArr = [
        {
            "id": 0, "value": "集团", 'state': false, 'open': false, children: [
                {
                    "id": 1, "value": "华北集团", 'state': false, 'open': true, children: [
                        { "id": 11, "value": "A电站", 'state': false },
                        { "id": 12, "value": "B电站", 'state': false },
                        { "id": 13, "value": "C电站", 'state': false }
                    ]
                }, {
                    "id": 2, "value": "华南集团", 'state': false, 'open': true, children: [
                        { "id": 21, "value": "D电站", 'state': false },
                        { "id": 22, "value": "E电站", 'state': false },
                        { "id": 23, "value": "F电站", 'state': false }
                    ]
                }
            ]
        },

    ];
    $scope.checkeds = [];
    $scope.allCheck = false;

    //监听ids数组长度，当长度小于总长度，改变全选按钮的checked值
    //计算最里边子级的长度
    $scope.idsLength = 0;
    var render = (data) => {
        data.forEach((item) => {
            if (item.children) {
                render(item.children);
            } else {
                $scope.idsLength++;
            }
        });
    }
    render($scope.allArr);
    //监听
    var AllWatch = $scope.$watch('checkeds', (newValue, oldValue) => {
        if (newValue.length == $scope.idsLength) {
            $scope.allCheck = true;
        } else {
            $scope.allCheck = false;
        }
    }, true)



    //左侧多选按钮-> 右侧 穿梭
    $scope.shuttle = (arr) => {
        //ng-model 的写法
        arr.children.filter(item => item.state).map((item, index) => {
            if ($scope.checkeds.indexOf(item) == '-1') {
                $scope.checkeds.push(item);
            }
        })
        $scope.checkeds = $scope.checkeds.filter(item => item.state);
        //判断子级是否被全部选中
        if (arr.children.filter(item => item.state).length == arr.children.length) {
            arr.state = true;
        } else {
            arr.state = false;
        }
    }

    //全选按钮
    $scope.shuttleAll = (e) => {
        //ng-model、递归 的写法
        var render = (data, flag) => {
            data.forEach((item, index) => {
                item.state = flag;
                if (item.children) {
                    render(item.children, flag);
                } else {
                    if (flag == true) {
                        if ($scope.checkeds.indexOf(item) == '-1') {
                            $scope.checkeds.push(item);
                        }
                    } else {
                        $scope.checkeds = [];
                    }
                }
            });
        }
        if (e.target.checked) {
            render($scope.allArr, true);
        } else {
            render($scope.allArr, false);
        }
    }

    //删除数组中的指定元素
    const removeByValue = (arr, val) => {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == val) {
                arr.splice(i, 1);
                break;
            }
        }
    }

    //二级全选按钮
    $scope.shuttleSecond = (e, arr) => {
        var render = (data, flag) => {
            data.forEach((item, index) => {
                item.state = flag;
                if (item.children) {
                    render(item.children, flag);
                } else {
                    if (flag == true) {
                        if ($scope.checkeds.indexOf(item) == '-1') {
                            $scope.checkeds.push(item);
                        }
                    } else {
                        removeByValue($scope.checkeds, item);
                    }
                }
            });
        }
        if (e.target.checked) {
            render(arr, true);
        } else {
            render(arr, false);
        }
    }

    //右侧删除小按钮
    // $scope.delRight = (id, index) => {
    //     //ng-model写法
    //     var render = (data) => {
    //         data.forEach((item) => {
    //             if (item.id == id) {
    //                 item.state = false;
    //             }
    //             if (item.children) {
    //                 render(item.children);
    //             }
    //         });
    //     }
    //     render($scope.allArr);
    //     $scope.checkeds.splice(index, 1);
    // }

    //全部删除
    // $scope.delRightAll = () => {
    //     if ($scope.checkeds.length == 0) {
    //         toaster.pop('error', '', '请至少选择一条');
    //     } else {
    //         $solway.confirm({ message: '确定全部删除吗？' }, () => {
    //             //ng-model写法
    //             var render = (data, flag) => {
    //                 data.forEach((item, index) => {
    //                     item.state = flag;
    //                     if (item.children) {
    //                         render(item.children, flag);
    //                     } else {
    //                         flag == true ? $scope.checkeds[index] = item : $scope.checkeds = [];
    //                     }
    //                 });
    //             }
    //             render($scope.allArr, false);
    //             $scope.$apply();
    //         });
    //     }
    // }


    //树形控件下拉
    $scope.toggle = (data) => {
        if (data.children && data.children.length > 0) {
            data.open = !data.open;
        }
    }


    //取消
    $scope.cancel = () => {
        $scope.$emit('cancelCallback');
        AllWatch();
    }

    //确定
    $scope.confirm = () => {
        $scope.$emit('addCallback');
        AllWatch();
    }
});