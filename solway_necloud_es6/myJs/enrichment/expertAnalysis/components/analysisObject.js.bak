ajaxData({
    AddbaseDictionary: {
        name: 'AddbaseDictionary',
        data: {},
        later: true
    },
    //分析对象 - 设备列表
    queryStTreeWithDevices: {
        name: 'GETqueryStTreeWithDevices',
        data: {},
        later: true
    },
    //分析对象 - 电站列表、区域（部门）列表、集团列表
    queryTreeWithSt: {
        name: 'GETqueryTreeWithSt',
        data: {},
        later: true
    }
}, {
        __serviceName__: 'analysisObjectService'
    })('analysisObjectCtrl', ['$scope', 'analysisObjectService', 'actionRecord', '$timeout', 'toaster', '$ocLazyLoad', 'myAjaxData'], ($scope, _myAjaxData, historicalRecord, $timeout, toaster, $ocLazyLoad, parentmyAjaxData) => {

        //初始化树
        let zTree;

        //保存
        $scope.save = () => {
            if (!$solway.formValidation($scope.formData, '.newStationTpl', toaster)) return;//校验非空

            let formData = {
                id: $scope.id,
                dictType: $scope.formData.dictType,
                dictName: $scope.formData.dictName,
                dictCode: $scope.formData.dictCode,
                dictEnName: $scope.formData.dictEnName,
                description: $scope.formData.description,
                dictValue: $scope.formData.dictValue
            }

            $scope.AddbaseDictionary.getData(formData).then(res => {
                if (res.key == 0) {
                    toaster.pop('success', '', '保存成功');
                    $scope.$emit('addCallback');
                } else {
                    toaster.pop('error', '', '保存失败');
                }
            })
        }

        //获取父级发送的数据
        $scope.$on('analysObDataNew', (item, index) => {
            if (index.analysObDataNew) {
                $scope.analysObDataNew = index.analysObDataNew;
                $scope.analysObDataNewDevice = index.analysObDataNewDevice;
                //默认获取第一项的数据
                // $scope.radioToSelect($scope.analysObDataNew[0], 0);
                $scope.radioDevice();
                $scope.equipChoice($scope.analysObDataNewDevice[0], 0);
            }
        })

        //获取父级发送的横轴指标 选择的option
        // $scope.$on('analysisObjectNum', (item, index) => {
        //     $scope.selectIndex = index;
        //     $scope.radioIndex = index;
        //     treeData();
        // })

        //处理点击设备radio
        $scope.radioDevice = () => {
            $scope.analysisObjectK = 99;
            $scope.zNodes = [];
            $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
            $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': 99, 'value': '设备' });
        }
        //处理点击机型radio
        $scope.radioType = () => {
            $scope.analysisObjectK = 100;
            $scope.zNodes = [];
            $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
            $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': 100, 'value': '机型' });
        }

        //点击单个设备
        $scope.equipChoice = (item, index) => {
            parentmyAjaxData.config.dmsType = item.k;
            treeData(item.k);
            $scope.equipChoiceIndex = index;
            $scope.$emit('deviceTimeLat', item.ll);
        }

        //单选框选中-> 更改父级的值
        $scope.radioIndex = 0;
        $scope.radioToSelect = (item, index) => {
            $scope.analysisObjectK = item.k;
            parentmyAjaxData.config.dmsType = item.k;
            $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': item.k, 'value': item.v });
            $scope.radioIndex = index;
            treeData(item.k);
        }

        //tree数据的获取
        function treeData(k) {
            // 调 集团 电站 区域接口
            const st = {
                1: 3,
                2: 2,
                3: 1
            }
            // 调设备的接口
            const devices = {
                401: 1,
                402: 2,
                403: 3,
                404: 4,
                405: 5,
                417: 17,
                418: 18
            }
            if (k == 1 || k == 2 || k == 3) {
                $scope.queryTreeWithSt.getData({
                    busiType: st[k]
                })

                $scope.queryTreeWithSt.subscribe(res => {
                    $scope.zNodes = res.body;
                    $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                });
            } else if (k.substr(0, 1) == "4") {
                $scope.queryStTreeWithDevices.getData({
                    deviceType: devices[k]
                })

                $scope.queryStTreeWithDevices.subscribe(res => {
                    $scope.zNodes = res.body;
                    $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                });
            }
        }

        //------------------------------------------------ztree 树形控件
        //ztree插件配置
        $scope.setting = {
            check: {
                enable: true
            },
            view: {
                showLine: false,
                showIcon: true,
                fontCss: getFontCss,
                dblClickExpand: false,
                nameIsHTML: false,
            },
            data: {
                simpleData: {
                    enable: true,
                    idKey: "id",
                    pIdKey: "pid",
                    rootPId: 0
                },
                key: {
                    name: "name"
                }
            },
            callback: {
                onClick: onNodeClick,
                onCheck: checkChangeFn
            }
        };

        $scope.objectDevice = [];
        $scope.objectPower = [];
        $scope.objectArea = [];
        $scope.objectGroup = [];

        const key = {
            0: 'objectDevice',
            1: 'objectPower',
            2: 'objectArea',
            3: 'objectGroup'
        }

        //单击父节点展开 子节点
        function onNodeClick(e, treeId, treeNode) {
            zTree.expandNode(treeNode);
            $(".curSelectedNode").removeClass("curSelectedNode");
        }

        //独立添加
        $scope.oneAdd = () => {
            $scope[key[$scope.radioIndex]] = $scope.millleArr;
        }
        //成组添加
        $scope.groupAdd = () => {
            $scope[key[$scope.radioIndex]] = $scope.millleArr;
        }

        //点击多选框 ->右侧穿梭
        function checkChangeFn(event, treeId, treeNode) {
            var checkedNode = zTree.getCheckedNodes(true);
            // $scope[key[$scope.radioIndex]] = [];
            $scope.millleArr = [];
            checkedNode.map(item => {
                if (!item.children) {
                    // $scope[key[$scope.radioIndex]].push(item);
                    $scope.millleArr.push(item);
                }
            })
        }

        //右侧删除小按钮
        $scope.delRight = (id, index) => {
            zTree.checkNode(zTree.getNodeByParam("id", id), false, true);
            $scope[key[$scope.radioIndex]].splice(index, 1);
        }

        //全部删除
        $scope.delRightAll = () => {
            if ($scope[key[$scope.radioIndex]].length == 0) {
                toaster.pop('error', '', '请至少选择一条');
            } else {
                $solway.confirm({ message: '确定全部删除吗？' }, () => {
                    $scope[key[$scope.radioIndex]].map((item) => {
                        zTree.checkNode(zTree.getNodeByParam("id", item.id), false, true);
                    })
                    $scope[key[$scope.radioIndex]] = [];
                    $scope.$apply();
                });
            }
        }

        //按需加载ztree文件
        $ocLazyLoad.load([
            'vendor/jquery/ztree/js/jquery.ztree.core.js', //ztree
        ]).then(() => $ocLazyLoad.load([
            'vendor/jquery/ztree/js/jquery.ztree.exhide.js', //ztree
            'vendor/jquery/ztree/js/jquery.ztree.excheck.js', //ztree        
        ])).then(() => $ocLazyLoad.load([
            'vendor/jquery/ztree/js/fuzzysearch.js', //ztree
        ])).then(() => {
            $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
            zTree = $.fn.zTree.getZTreeObj("tree");
            //搜索功能
            fuzzySearch('tree', '#key', false, true);
        })

        //节点样式方法
        function getFontCss(treeId, treeNode) {
            return treeNode.highlight ? { color: "red" } : { color: '#fff' }
        }


        //取消
        $scope.cancel = () => {
            $scope.$emit('cancelCallback');
        }

        //确定
        $scope.confirm = () => {
            $scope.$emit('addCallback');
        }
    });