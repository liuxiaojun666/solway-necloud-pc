ajaxData({
    //分析对象 - 设备列表
    queryStTreeWithDevices: {
        name: 'GETqueryStTreeWithDevices',
        data: {},
        later: true
    },
    //分析对象 - 电站列表、区域（部门）列表、集团列表
    queryTreeWithSt: {
        name: 'GETqueryTreeWithSt',
        data: {},
        later: true
    },
    //分析对象 - 机型列表
    queryStTreeWithProducts: {
        name: 'GETqueryStTreeWithProducts',
        data: {},
        later: true
    },
    //分析对象 - 故障类型列表
    queryStTreeWithFaultTypes: {
        name: 'GETqueryStTreeWithFaultTypes',
        data: {},
        later: true
    },
    //分析对象 - 多级联动 - 电站
    queryCascaderWithSt: {
        name: 'GETqueryCascaderWithSt',
        data: {},
        later: true
    },
    //分析对象 - 多级联动 - 型号
    queryCascaderWithProducts: {
        name: 'GETqueryCascaderWithProducts',
        data: {},
        later: true
    },
    //分析对象 - 多级联动 - 设备
    queryCascaderWithDevices: {
        name: 'GETqueryCascaderWithDevices',
        data: {},
        later: true
    },
}, {
        __serviceName__: 'analysisObjectService'
    })('analysisObjectCtrl', ['$scope', 'analysisObjectService', 'actionRecord', '$timeout', 'toaster', '$ocLazyLoad', 'myAjaxData'], ($scope, _myAjaxData, historicalRecord, $timeout, toaster, $ocLazyLoad, parentmyAjaxData) => {

        //初始化树
        let zTree;

        //------------------------------------------------ztree 树形控件
        //ztree插件配置
        $scope.setting = {
            check: {
                enable: true,
                nocheckInherit: false
            },
            view: {
                showLine: false,
                showIcon: true,
                fontCss: getFontCss,
                dblClickExpand: false,
                nameIsHTML: false,
            },
            data: {
                simpleData: {
                    enable: true,
                    idKey: "id",
                    pIdKey: "pid",
                    rootPId: 0
                },
                key: {
                    name: "name"
                }
            },
            callback: {
                onClick: onNodeClick,
                onCheck: checkChangeFn
            }
        };

        //清空数据
        function clearData() {
            $scope.objectDevice = [];
            $scope.objectPower = [];
            $scope.objectArea = [];
            $scope.objectGroup = [];
            $scope.objectType = [];
            $scope.objectFault = [];
            $scope.objectDevice[0] = [];
            $scope.objectDevice[1] = [];
            parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = [];
            parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = [];
            parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = [];
            parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = [];
        }
 
        //切换分析类型 -> 清空
        $scope.$on('clearAlsObj',()=>{
            for (var i = 0; i < 4; i++) {
                $scope['groupResult1' + i] = []    //电站
                $scope['groupResult5' + i] = []    //区域
                $scope['groupResult3' + i] = []    //集团
                $scope['groupResult101' + i] = []  //机型
                $scope['groupResult102' + i] = []  //故障类型
                $scope['groupResultDevice' + i] = [] //设备
            }
            parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = [];
            parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = [];
            parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = [];
            parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = [];
        })

        //获取父级发送的数据
        $scope.$on('analysObDataNew', (e, data) => {
            if (data.analysObDataNewDevice) {
                $scope.analysObDataNew = data.analysObDataNew;
                var arr = [];
                $scope.analysObDataNew.map((item) => {
                    if (item.k == 3) {
                        arr[0] = item;
                    } else if (item.k == 5) {
                        arr[1] = item;
                    } else if (item.k == 1) {
                        arr[2] = item;
                    } else if (item.k == 101) {
                        arr[3] = item;
                    }
                })
                $scope.analysObDataNew = arr;
                $scope.analysObDataNewDevice = data.analysObDataNewDevice;
                // $scope.analysObDataNewDevice.forEach((item, i) => {
                //     $scope.object[i] = [];
                // })
                if (!parentmyAjaxData.config.tableDataTrue[$scope.checkChart]) {
                    //图表没有数据
                    // data.analysObDataNewDevice.forEach((item, i) => {
                    //     $scope.objectDevice[i] = [];
                    // })
                    $scope.radioDevice();
                    clearData();
                    $scope.$emit('noChecked', 'analysisObj');
                } else if (parentmyAjaxData.config.tableDataTrue[$scope.checkChart] && (parentmyAjaxData.config.anlsType == parentmyAjaxData.config.tableData[$scope.checkChart].analysisType)) {
                    //选中有数据的图表，切换分析指标，再次默认选中设备 
                    // $scope.radioDevice();
                    clearData();
                    $scope.$emit('noChecked', 'analysisObj');
                }
            }
        })

        //获取历史数据
        $scope.$on('haveData', (event, v) => {
            if (!v) {
                $scope.objectDevice = [];
                $scope.objectPower = [];
                $scope.objectArea = [];
                $scope.objectGroup = [];
                $scope.objectType = [];
                $scope.objectFault = [];
                $scope.objectDevice[0] = [];
                $scope.objectDevice[1] = [];

                $scope.$emit('noChecked', 'analysisObj');
                return;
            }

            $scope.$emit('addCallback', 'analysisObj');
            $scope.analysisObjectK = parentmyAjaxData.config.tableData[parentmyAjaxData.config.checkChart].alsObj.alsObjk;
            $scope[key[$scope.analysisObjectK]] = parentmyAjaxData.config.tableData[parentmyAjaxData.config.checkChart].alsObj.checkData;

            if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5 || $scope.analysisObjectK == 101) {
                $scope.radioToSelect(parentmyAjaxData.config.tableData[parentmyAjaxData.config.checkChart].alsObj.radioItem, true);
            } else if ($scope.analysisObjectK == 99) {
                $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': 99, 'value': '设备', 'isHistory': true });
                $scope.equipChoice(parentmyAjaxData.config.tableData[parentmyAjaxData.config.checkChart].alsObj.equipCItem, parentmyAjaxData.config.tableData[parentmyAjaxData.config.checkChart].alsObj.equipCIndex, true);
                $scope.equipChoiceIndex = parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].equipChoiceIndex;
            }
            // else if ($scope.analysisObjectK == 101) {
            //     $scope.radioType(parentmyAjaxData.config.tableData[parentmyAjaxData.config.checkChart].alsObj.equipCItem.k, true);
            // }
            else if ($scope.analysisObjectK == 102) {
                $scope.radioFault(true);
            }
        })

        //点击单个设备
        $scope.equipChoice = (item, index, isHistory) => {
            //默认获取第一项的数据
            var item = item ? item : $scope.analysObDataNewDevice[0];
            var index = index ? index : 0;
            $scope.equipChoiceItem = item;
            parentmyAjaxData.config.dmsType = item.k;
            $scope.deviceK = item.k;
            treeData(item.k);
            $scope.equipChoiceIndex = index;
            $scope.$emit('deviceTimeLat', { 'll': item.ll, 'isHistory': isHistory });
            parentmyAjaxData.config.alsRlist = $scope.objectDevice[$scope.equipChoiceIndex].length;
        }

        //处理点击设备radio
        $scope.radioDevice = () => {
            $scope.analysisObjectK = 99;
            $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': 99, 'value': '设备' });
            $scope.equipChoice($scope.equipChoiceItem, $scope.equipChoiceIndex);
        }

        //多级联动函数组
        $scope.multiLevel = {
            'area': null,
            'powerStation': '',
            'machineType': '',
            'device': ''
        }

        var deviceMap = {
            401: 1,
            402: 2,
            403: 3,
            404: 4,
            405: 5,
            417: 17,
            418: 18
        }

        //多级联动 - 区域
        function selectArea() {
            $scope.queryTreeWithSt.getData({
                busiType: 2
            })
            $scope.queryTreeWithSt.subscribe(res => {
                $scope.selectArea = res.body;
                $scope.multiLevel.area = JSON.stringify($scope.selectArea[0]);
            });
        }
        //多级联动 - 电站
        function selectPowerStation() {
            $scope.multiLevel.powerStation = '';
            if (!$scope.multiLevel.area || !JSON.parse($scope.multiLevel.area).busiId) {
                $scope.selectPowerStation = [];
                return
            }
            $scope.queryCascaderWithSt.getData({
                busiType: JSON.parse($scope.multiLevel.area).busiType,
                pid: JSON.parse($scope.multiLevel.area).busiId
            })

            $scope.queryCascaderWithSt.subscribe(res => {
                $scope.selectPowerStation = res.body;
            });
        }
        //多级联动 - 机型
        function selectMachineType() {
            $scope.multiLevel.machineType = '';
            if (!$scope.multiLevel.powerStation) {
                $scope.selectMachineType = [];
                return
            }
            $scope.queryCascaderWithProducts.getData({
                stid: JSON.parse($scope.multiLevel.powerStation).busiId,
                // deviceType: deviceMap[$scope.deviceK]
                deviceType: 2
            })

            $scope.queryCascaderWithProducts.subscribe(res => {
                $scope.selectMachineType = res.body;
            });
        }
        //多级联动 - 设备
        function selectDevice() {
            $scope.multiLevel.device = '';
            if (!$scope.multiLevel.machineType || !$scope.multiLevel.powerStation) {
                $scope.selectDevice = [];
                return
            }
            $scope.queryCascaderWithDevices.getData({
                stid: JSON.parse($scope.multiLevel.powerStation).busiId,
                // deviceType: deviceMap[$scope.deviceK],
                deviceType: 2,
                productId: $scope.multiLevel.machineType
            })

            $scope.queryCascaderWithDevices.subscribe(res => {
                $scope.selectDevice = res.body;
            });
        }

        //多级联动 - 获取选中的下拉框数据
        $scope.selectChange = (k) => {
            if (k == 0) {
                selectPowerStation();
                selectMachineType();
                selectDevice();
                $scope.zNodes.forEach((item) => {
                    // 电站、机型和设备 被隐藏的恢复
                    if (!$scope.multiLevel.powerStation) {
                        if (item.busiType == 1) {
                            item.isHidden = false;
                        }
                    }
                    if (!$scope.multiLevel.machineType) {
                        if (item.busiType == 6) {
                            item.isHidden = false;
                        }
                    }
                    if (!$scope.multiLevel.device) {
                        if (item.busiType == 5) {
                            item.isHidden = false;
                        }
                    }
                    // 选择完区域后 隐藏其他区域
                    if (!JSON.parse($scope.multiLevel.area).busiId) {
                        item.isHidden = false;
                    } else {
                        // 根据busiType隐藏 层级
                        if ((item.busiType == 3 && 3 == JSON.parse($scope.multiLevel.area).busiType && item.name != '全部') || ((item.busiType == 1 || item.busiType == 2) && JSON.parse($scope.multiLevel.area).busiType == 2)) {
                            item.isHidden = !item.forbidden ? true : false;
                        }

                        // 找到有 选中区域的层级 并且隐藏同一级别的其他区域
                        if (JSON.parse($scope.multiLevel.area).name == item.name) {
                            $scope.zNodes.forEach(son => {
                                if (item.pid == son.pid) {
                                    son.isHidden = true;
                                }
                            })
                        }
                        // 打开选中区域 的子级（选中区域的子级有可能被隐藏）
                        if (JSON.parse($scope.multiLevel.area).busiId == item.busiId) {
                            item.isHidden = false;
                            $scope.zNodes.forEach(function (son) {
                                if (son.pid == item.id) {
                                    son.isHidden = false;
                                    son.forbidden = true;
                                }
                            })
                        }

                        // if ((item.busiType == 3 && 3 == JSON.parse($scope.multiLevel.area).busiType && item.name != '全部') || ((item.busiType == 1 || item.busiType == 2) && 2 == JSON.parse($scope.multiLevel.area).busiType)) {
                        //     item.isHidden = !item.forbidden ? true : false;
                        // }
                        // if (item.name == JSON.parse($scope.multiLevel.area).name) {
                        //     item.isHidden = false;
                        //     $scope.zNodes.forEach(function (son) {
                        //         if (son.pid == item.id) {
                        //             son.isHidden = false;
                        //             son.forbidden = true;
                        //         }
                        //     })
                        // }
                    }
                })
                $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                $scope[key[$scope.analysisObjectK]].map((item) => {
                    item.map((son) => {
                        zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                    })
                })

            } else if (k == 1) {
                selectMachineType();
                selectDevice();
                $scope.zNodes.forEach((item) => {
                    // 机型和设备 被隐藏的恢复
                    if (!$scope.multiLevel.machineType) {
                        if (item.busiType == 6) {
                            item.isHidden = false;
                        }
                    }
                    if (!$scope.multiLevel.device) {
                        if (item.busiType == 5) {
                            item.isHidden = false;
                        }
                    }

                    if (!$scope.multiLevel.powerStation) {
                        if (item.busiType == 1) {
                            item.isHidden = false;
                        }
                    } else {
                        if (item.busiType == JSON.parse($scope.multiLevel.powerStation).busiType) {
                            item.isHidden = true;
                        }
                        if (item.busiId == JSON.parse($scope.multiLevel.powerStation).busiId) {
                            item.isHidden = false;
                        }
                    }
                })
                $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                $scope[key[$scope.analysisObjectK]].map((item) => {
                    item.map((son) => {
                        zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                    })
                })
            } else if (k == 2) {
                selectDevice();
                $scope.zNodes.map((item) => {
                    // 设备 被隐藏的恢复
                    if (!$scope.multiLevel.device) {
                        if (item.busiType == 5) {
                            item.isHidden = false;
                        }
                    }
                    if (!$scope.multiLevel.machineType) {
                        if (item.busiType == 6) {
                            item.isHidden = false;
                        }
                    } else {
                        if (item.busiType == 6) {
                            item.isHidden = true;
                        }
                        if (item.busiId == $scope.multiLevel.machineType) {
                            item.isHidden = false;
                        }
                    }
                })
                $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                $scope[key[$scope.analysisObjectK]].map((item) => {
                    item.map((son) => {
                        zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                    })
                })
            } else if (k == 3) {
                $scope.zNodes.map((item) => {
                    if (!$scope.multiLevel.device) {
                        if (item.busiType == 5) {
                            item.isHidden = false;
                        }
                    } else {
                        if (item.busiType == 5) {
                            item.isHidden = true;
                        }
                        if (item.busiId == $scope.multiLevel.device) {
                            item.isHidden = false;
                        }
                    }
                })
                $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                $scope[key[$scope.analysisObjectK]].map((item) => {
                    item.map((son) => {
                        zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                    })
                })
            }
        }

        //处理点击机型radio
        // $scope.radioType = (k, isHistory) => {
        //     $scope.analysisObjectK = 100;
        //     parentmyAjaxData.config.dmsType = 101;
        //     $scope.zNodes = [];
        //     var devicek = k ? k : $scope.deviceK;
        //     treeData(devicek);
        //     $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': 100, 'value': '机型', 'isHistory': isHistory });
        //     selectArea();
        //     $scope.selectPowerStation = [];
        //     $scope.selectMachineType = [];
        //     $scope.selectDevice = [];
        //     $scope.multiLevel = {
        //         'area': null,
        //         'powerStation': '',
        //         'machineType': '',
        //         'device': ''
        //     }
        // }

        //处理点击故障类型radio
        $scope.radioFault = (isHistory) => {
            $scope.analysisObjectK = 102;
            parentmyAjaxData.config.dmsType = 102;
            $scope.zNodes = [];
            treeData('102');
            $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': 102, 'value': '故障类型', 'isHistory': isHistory });
            selectArea();
            $scope.selectPowerStation = [];
            $scope.selectMachineType = [];
            $scope.selectDevice = [];
            $scope.multiLevel = {
                'area': null,
                'powerStation': '',
                'machineType': '',
                'device': ''
            }
        }

        //单选框选中-> 更改父级的值
        $scope.radioToSelect = (item, isHistory) => {
            parentmyAjaxData.config.dmsType = $scope.analysisObjectK = item.k;
            parentmyAjaxData.config.alsRlist = $scope[key[$scope.analysisObjectK]].length;
            $scope.radioItem = item
            $scope.$emit('radioToFather', { 'type': 'analysisObject', 'k': item.k, 'value': item.v, 'isHistory': isHistory });
            if (item.k.substr(0, 1) !=4) {
                treeData(item.k);
            }
            if (item.k == 101) {
                selectArea();
                $scope.selectPowerStation = [];
                $scope.selectMachineType = [];
                $scope.selectDevice = [];
                $scope.multiLevel = {
                    'area': null,
                    'powerStation': '',
                    'machineType': '',
                    'device': ''
                }
            }
        }

        //tree数据的获取
        function treeData(k) {
            // 调 集团 电站 区域接口
            const st = {
                1: 3,
                5: 2,
                3: 1
            }
            // 调设备的接口
            const devices = {
                401: 1,
                402: 2,
                403: 3,
                404: 4,
                405: 5,
                417: 17,
                418: 18
            }
            if (k == 1 || k == 3 || k == 5) {
                $scope.loading = true;
                $scope.zNodes = []
                $.fn.zTree.init($("#tree"), $scope.setting, []);
                $scope.queryTreeWithSt.getData({
                    busiType: st[k]
                }).then(res => {
                    $scope.zNodes = res.body;
                    $scope.loading = false;
                    $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);

                    $scope[key[$scope.analysisObjectK]].map((item) => {
                        item.map((son) => {
                            zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                        })
                    })
                })
            } else if (k.substr(0, 1) == "4" && $scope.analysisObjectK == 99) {
                $scope.loading = true;
                if ($scope.zNodes && $scope.zNodes.length > 0) {
                    $.fn.zTree.init($("#tree"), $scope.setting, []);
                }
                $scope.queryStTreeWithDevices.getData({
                    deviceType: devices[k]
                }).then(res => {
                    $scope.zNodes = res.body;
                    $scope.loading = false;
                    setTimeout(() => {
                        $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                        if ($scope.objectDevice[$scope.equipChoiceIndex].length > 0) {
                            $scope.objectDevice[$scope.equipChoiceIndex].map((item) => {
                                item.map((son) => {
                                    zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                                })
                            })
                        }
                    }, 600)
                })

            } else if (k == 101) {
                $scope.loading = true;
                $.fn.zTree.init($("#tree"), $scope.setting, []);
                $scope.queryStTreeWithProducts.getData({
                    // deviceType: devices[k]
                    deviceType: 2
                }).then(res => {
                    var treeObj = $.fn.zTree.getZTreeObj("tree");
                    treeObj.refresh();
                    $scope.zNodes = res.body;
                    $scope.loading = false;
                    $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
                    $scope[key[$scope.analysisObjectK]].map((item) => {
                        item.map((son) => {
                            zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                        })
                    })
                })
            } else if (k == 102) {
                $scope.loading = true;
                $.fn.zTree.init($("#tree"), $scope.setting, []);
                $scope.queryStTreeWithFaultTypes.getData({
                    type: '01'
                }).then(res => {
                    $scope.zNodes = res.body;
                    $scope.loading = false;
                    $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);

                    $scope[key[$scope.analysisObjectK]].map((item) => {
                        item.map((son) => {
                            zTree.checkNode(zTree.getNodeByParam("id", son.id), true, true);
                        })
                    })
                })
            }
        }

        $scope.objectDevice = [];
        $scope.objectPower = [];
        $scope.objectArea = [];
        $scope.objectGroup = [];
        $scope.objectType = [];
        $scope.objectFault = [];
        $scope.objectDevice[0] = [];
        $scope.objectDevice[1] = [];

        const key = {
            102: 'objectFault',  //故障类型
            101: 'objectType',  //机型
            99: 'objectDevice', //设备
            3: 'objectPower', //电站
            5: 'objectArea', //区域 (部门)
            1: 'objectGroup' //集团 (公司)
        }
        //映射 取busiType  busiType：1 电站、2 区域、3 集团、5 设备
        const keyToType = {
            102: 5,
            101: 5,
            99: 5,
            3: 1,
            5: 2,
            1: 3
        }

        //独立添加
        for (var i = 0; i < 4; i++) {
            $scope['oneRItem1' + i] = {}    //电站
            $scope['oneRItem5' + i] = {}    //区域
            $scope['oneRItem3' + i] = {}    //集团
            $scope['oneRItem101' + i] = []  //机型
            $scope['oneRItem102' + i] = []  //故障类型
            $scope['oneRItemDevice' + i] = {} //设备
            $scope['checkedNode' + i] = []
        }
        $scope.oneAdd = () => {
            checkChangeFn();
            if ($scope['checkedNode' + parentmyAjaxData.config.checkChart].length == 0) {
                toaster.pop('error', '', '所选数据不能为空');
                return;
            }
            //根据busiType 筛选
            // var newMiddle = JSON.parse(JSON.stringify($scope.middleArr));

            var FTmiddleArr = $scope.middleArr.filter((item) => {
                return keyToType[$scope.analysisObjectK] == item.busiType;
            })

            if (FTmiddleArr.length == 0) {
                return
            }

            FTmiddleArr.map((item) => {
                item.isgroup = false;
            })

            //把过滤后的 数据放到 对应的数组中
            if ($scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) {
                //机型/故障类型  获取根节点
                var typeArr = [];
                function rootNode(item) {
                    var parentNode = item.getParentNode();
                    if (parentNode.level != 0) {
                        rootNode(parentNode);
                    } else {
                        if (typeArr.indexOf(parentNode) == -1) {
                            parentNode.devices = [];
                            parentNode.devices.push($scope.deviceItem);
                            parentNode.isgroup = false;
                            typeArr.push(parentNode);
                        } else {
                            typeArr[typeArr.indexOf(parentNode)].devices.push($scope.deviceItem);
                        }
                    }
                }

                FTmiddleArr.map((item) => {
                    $scope.deviceItem = item;
                    rootNode(item);
                })

                typeArr.map((item) => {
                    var arr = [];
                    arr.push(item);
                    $scope[key[$scope.analysisObjectK]].push(arr);
                })
            } else {
                FTmiddleArr.map((item) => {
                    var arr = [];
                    arr.push(item);
                    if ($scope.analysisObjectK == 99) {
                        $scope.objectDevice[$scope.equipChoiceIndex].push(arr);
                    } else {
                        $scope[key[$scope.analysisObjectK]].push(arr);
                    }
                })
            }

            //剔除 成组添加的数据
            var oneArr = [];
            var groupArr = [];
            if ($scope.analysisObjectK == 99) {
                $scope.objectDevice[$scope.equipChoiceIndex].map((item) => {
                    if (item.length == 1) {
                        oneArr.push(item);
                    } else {
                        groupArr.push(item);
                    }
                });
            } else {
                $scope[key[$scope.analysisObjectK]].map((item) => {
                    if (item.length == 1) {
                        oneArr.push(item);
                    } else {
                        groupArr.push(item);
                    }
                })
            }

            //---------------------独立添加的 数组去重
            if ($scope.analysisObjectK == 99) {
                var arrfilter = [oneArr[0]];
                for (var i = 1; i < oneArr.length; i++) {
                    var flag = true;
                    for (var j = 0; j < arrfilter.length; j++) {
                        if (oneArr[i][0].stids + oneArr[i][0].busiId == arrfilter[j][0].stids + arrfilter[j][0].busiId) {
                            flag = false;
                            break
                        }
                    }
                    if (flag) {
                        arrfilter.push(oneArr[i]);
                    }
                }
            } else {
                var arrfilter = [oneArr[0]];
                for (var i = 1; i < oneArr.length; i++) {
                    var flag = true;
                    for (var j = 0; j < arrfilter.length; j++) {
                        if (oneArr[i][0].busiId == arrfilter[j][0].busiId) {
                            flag = false;
                            break
                        }
                    }
                    if (flag) {
                        arrfilter.push(oneArr[i]);
                    }
                }
            }

            //去重后的数据 重新塞入
            if ($scope.analysisObjectK == 99) {
                $scope.objectDevice[$scope.equipChoiceIndex] = [...arrfilter, ...groupArr];
            } else {
                $scope[key[$scope.analysisObjectK]] = [...arrfilter, ...groupArr];
            }
            //组装接口需要的数据
            if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5) {
                //组装接口需要的数据 (电站|区域(部门)|集团)
                $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart] = {
                    "isGroup": 0,
                    "ids": []
                }
                FTmiddleArr.map((item) => {
                    $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].ids.push(item.busiId);
                })
            } else if ($scope.analysisObjectK == 99) {
                //组装接口需要的数据 (设备)
                $scope['oneRItemDevice' + parentmyAjaxData.config.checkChart] = {
                    "isGroup": 0,
                    "st_eqids": []
                }
                FTmiddleArr.map((item) => {
                    $scope['oneRItemDevice' + parentmyAjaxData.config.checkChart].st_eqids.push(`${item.stids}-${item.busiId}`);
                })
            } else if ($scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) {
                //组装接口需要的数据 (机型、故障类型)
                $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart] = [];
                typeArr.map((item) => {
                    var oneRItem = {
                        "id": 0,
                        "st_eqids": []
                    }
                    oneRItem.id = item.busiId;
                    item['devices'].map((son) => {
                        oneRItem.st_eqids.push(`${son.stids}-${son.busiId}`);
                    })
                    $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].push(oneRItem);
                })
            }
        }

        //成组添加
        $scope.groupNameMaps = {}
        for (var i = 0; i < 4; i++) {
            $scope['groupResult1' + i] = []    //电站
            $scope['groupResult5' + i] = []    //区域
            $scope['groupResult3' + i] = []    //集团
            $scope['groupResult101' + i] = []  //机型
            $scope['groupResult102' + i] = []  //故障类型
            $scope['groupResultDevice' + i] = [] //设备
            // for (var j = 1; j < 4; j++) {
            //     $scope['groupNum1' + i + j] = 0 //组合名
            //     $scope['groupNum5' + i + j] = 0
            //     $scope['groupNum3' + i + j] = 0
            //     $scope['groupNum101' + i + j] = 0
            //     $scope['groupNum102' + i + j] = 0
            //     $scope['groupNum990' + i + j] = 0
            //     $scope['groupNum991' + i + j] = 0
            // }
        }
        $scope.groupAdd = () => {
            checkChangeFn();
            if ($scope['checkedNode' + parentmyAjaxData.config.checkChart].length == 0) {
                toaster.pop('error', '', '所选数据不能为空');
                return;
            }
            // var newMiddle = JSON.parse(JSON.stringify($scope.middleArr));

            var FTmiddleArr = $scope.middleArr.filter((item) => {
                return keyToType[$scope.analysisObjectK] == item.busiType;
            })

            if (FTmiddleArr.length == 0) {
                return
            }

            if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5) {
                var groupName = '组合' + ($scope[key[$scope.analysisObjectK]].length + 1)
                //组装接口需要的数据 (电站|区域(部门)|集团)
                var groupItem = {
                    "isGroup": 1,
                    'groupName': 'gp' + parseInt(Math.random() * 10000000),
                    "ids": []
                }
                $scope.groupNameMaps[groupItem.groupName] = parentmyAjaxData.config.groupNameMaps[groupItem.groupName] = groupName
                var newArr = JSON.parse(JSON.stringify(FTmiddleArr))
                newArr.forEach((item) => {
                    item.isgroup = true
                    item.groupName = groupItem.groupName
                    groupItem.ids.push(item.busiId)
                })
                $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].push(groupItem)
                $scope[key[$scope.analysisObjectK]].push(newArr)
            } else if ($scope.analysisObjectK == 99) {
                //组装接口需要的数据 (设备)
                var groupItem = {
                    "isGroup": 1,
                    'groupName': 'gp' + parseInt(Math.random() * 10000000),
                    "st_eqids": []
                }

                var newArr = JSON.parse(JSON.stringify(FTmiddleArr));
                newArr.map((item) => {
                    item.isgroup = true;
                    item.groupName = groupItem.groupName;
                    groupItem.st_eqids.push(`${item.stids}-${item.busiId}`);
                })
                $scope['groupResultDevice' + parentmyAjaxData.config.checkChart].push(groupItem)
                $scope.objectDevice[$scope.equipChoiceIndex].push(newArr)
            } else if ($scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) {
                //机型/故障类型  获取根节点
                var typeArr = [];
                function rootNode(item) {
                    var parentNode = item.getParentNode();
                    if (parentNode.level != 0) {
                        rootNode(parentNode);
                    } else {
                        if (typeArr.indexOf(parentNode) == -1) {
                            parentNode.devices = [];
                            parentNode.devices.push($scope.deviceItem);
                            parentNode.isgroup = true;
                            typeArr.push(parentNode);
                        } else {
                            typeArr[typeArr.indexOf(parentNode)].devices.push($scope.deviceItem);
                        }
                    }
                }

                FTmiddleArr.map((item) => {
                    $scope.deviceItem = item;
                    rootNode(item);
                })
                //组装接口需要的数据 (机型/故障类型)
                var groupItem = {
                    'groupName': 'gp' + parseInt(Math.random() * 10000000),
                    'cdts': [],
                }
                typeArr.map((item) => {
                    item.isgroup = true;
                    item.groupName = groupItem.groupName;
                })
                $scope[key[$scope.analysisObjectK]].push(typeArr);
                typeArr.map((item) => {
                    var cdtsItem = {
                        'id': 0,
                        "st_eqids": []
                    }
                    cdtsItem.id = item.busiId;
                    item['devices'].map((son) => {
                        cdtsItem.st_eqids.push(`${son.stids}-${son.busiId}`);
                    })
                    groupItem['cdts'].push(cdtsItem);
                })
                $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].push(groupItem);
            }
        }

        //右侧删除小按钮
        $scope.delRight = (item, index) => {
            if ($scope.loading) {
                toaster.pop('error', '', '稍等树结构加载完毕再行删除');
                return;
            }

            item.map((v) => {
                zTree.checkNode(zTree.getNodeByParam("id", v.id), false, true);
            })
            //根据index 删除 给接口传的数据 (电站|区域(部门)|集团)
            if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5) {
                //删除 页面显示的数据
                $scope[key[$scope.analysisObjectK]].splice(index, 1);
                item.map((v) => {
                    if (v.isgroup) {
                        $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].map((son, i) => {
                            if (son.groupName == v.groupName) {
                                $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].splice(i, 1);
                            }
                        })
                    } else {
                        var index = $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].ids.indexOf(v.busiId);
                        if (index != -1) {
                            $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].ids.splice(index, 1);
                        }
                    }
                })
                if ($scope[key[$scope.analysisObjectK]].length == 0) {
                    parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = [];
                    $scope.$emit('noChecked', 'analysisObj');
                }
                //删除 给接口传的数据 (设备)
            } else if ($scope.analysisObjectK == 99) {
                //删除 页面显示的数据
                $scope.objectDevice[$scope.equipChoiceIndex].splice(index, 1);
                item.map((v) => {
                    if (v.isgroup) {
                        $scope['groupResultDevice' + parentmyAjaxData.config.checkChart].map((son, i) => {
                            if (son.groupName == v.groupName) {
                                $scope['groupResultDevice' + parentmyAjaxData.config.checkChart].splice(i, 1);
                            }
                        })
                    } else {
                        var index = $scope['oneRItemDevice' + parentmyAjaxData.config.checkChart].st_eqids.indexOf(`${v.stids}-${v.busiId}`);
                        if (index != -1) {
                            $scope['oneRItemDevice' + parentmyAjaxData.config.checkChart].st_eqids.splice(index, 1);
                        }
                    }
                })
                if ($scope.objectDevice[$scope.equipChoiceIndex].length == 0) {
                    parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = [];
                    $scope.$emit('noChecked', 'analysisObj');
                }
                //删除 给接口传的数据 (机型/故障类型)
            } else if ($scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) {
                //删除 页面显示的数据
                $scope[key[$scope.analysisObjectK]].splice(index, 1);
                item.map((v) => {
                    if (v.isgroup) {
                        $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].map((son, i) => {
                            if (son.groupName == v.groupName) {
                                $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].splice(i, 1);
                            }
                        })
                    } else {
                        $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].map((son, i) => {
                            if (son.id == v.busiId) {
                                $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].splice(i, 1);
                            }
                        })
                    }
                })
                if ($scope[key[$scope.analysisObjectK]].length == 0) {
                    parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = [];
                    parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = [];
                    $scope.$emit('noChecked', 'analysisObj');
                }
            }
            // --$scope['groupNum' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart + parentmyAjaxData.config.anlsType]
        }

        //全部删除
        $scope.delRightAll = () => {
            if ($scope.loading) {
                toaster.pop('error', '', '稍等树结构加载完毕再行删除');
                return;
            }
            if (($scope.analysisObjectK == 99 && $scope.objectDevice[$scope.equipChoiceIndex].length == 0) || (($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5 || $scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) && $scope[key[$scope.analysisObjectK]].length == 0)) {
                toaster.pop('error', '', '请至少选择一条');
            } else {
                $solway.confirm({ message: '确定全部删除吗？' }, () => {
                    zTree.checkAllNodes(false);
                    zTree.cancelSelectedNode();
                    $scope['checkedNode' + parentmyAjaxData.config.checkChart] = [];
                    if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5 || $scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) {
                        $scope[key[$scope.analysisObjectK]] = [];
                        $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart] = $scope.analysisObjectK == 101 ? [] : {};
                        $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart] = [];
                        parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = [];
                        parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = [];
                        parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = [];
                    } else if ($scope.analysisObjectK == 99) {
                        $scope.objectDevice[$scope.equipChoiceIndex] = [];
                        $scope['oneRItemDevice' + parentmyAjaxData.config.checkChart] = {};
                        $scope['groupResultDevice' + parentmyAjaxData.config.checkChart] = [];
                        parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = [];
                    }
                    $scope.$emit('noChecked', 'analysisObj');
                    $scope.$apply();
                });
            }
            // $scope['groupNum' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart + parentmyAjaxData.config.anlsType] = 0
        }

        //按需加载ztree文件
        $ocLazyLoad.load([
            'vendor/jquery/ztree/jsCopy/jquery.ztree.core.js', //ztree
        ]).then(() => $ocLazyLoad.load([
            'vendor/jquery/ztree/jsCopy/jquery.ztree.exhide.js', //ztree
            'vendor/jquery/ztree/jsCopy/jquery.ztree.excheck.js', //ztree        
        ])).then(() => $ocLazyLoad.load([
            'vendor/jquery/ztree/jsCopy/fuzzysearch.js', //ztree
        ])).then(() => {
            $.fn.zTree.init($("#tree"), $scope.setting, $scope.zNodes);
            zTree = $.fn.zTree.getZTreeObj("tree");
            //搜索功能
            fuzzySearch('tree', '#key', false, true);
        })

        //单击父节点展开 子节点
        function onNodeClick(e, treeId, treeNode) {
            zTree.expandNode(treeNode);
            $(".curSelectedNode").removeClass("curSelectedNode");
        }

        //点击多选框 ->右侧穿梭
        function checkChangeFn(event, treeId, treeNode) {
            $scope['checkedNode' + parentmyAjaxData.config.checkChart] = zTree.getCheckedNodes(true);
            $scope.middleArr = [];
            $scope['checkedNode' + parentmyAjaxData.config.checkChart].map(item => {
                if (!item.children) {
                    $scope.middleArr.push(item);
                }
            })
        }

        //节点样式方法
        function getFontCss(treeId, treeNode) {
            return { color: '#fff' }
        }

        //获取到busiId 和 name 的映射(独立添加、成组添加)
        function busiIdToName() {
            var analyOjName = {};
            if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5 || $scope.analysisObjectK == 100 || $scope.analysisObjectK == 101) {
                $scope[key[$scope.analysisObjectK]].map(item => {
                    if (!item[0].isgroup) {
                        analyOjName[item[0].busiId] = item[0].name;
                    } else {
                        item.map((son, i) => {
                            if (i == 0) {
                                analyOjName[son.groupName] = '';
                            }
                            analyOjName[son.groupName] += son.name + '\xa0';
                        })
                    }
                })
            } else if ($scope.analysisObjectK == 99) {
                $scope.objectDevice[$scope.equipChoiceIndex].map(item => {
                    if (!item[0].isgroup) {
                        analyOjName[item[0].stids + '-' + item[0].busiId] = item[0].name;
                    } else {
                        item.map((son, i) => {
                            if (i == 0) {
                                analyOjName[son.groupName] = '';
                            }
                            analyOjName[son.groupName] += son.name + '\xa0';
                        })
                    }
                })
            }
            parentmyAjaxData.config.bIdToName[parentmyAjaxData.config.checkChart] = analyOjName
            debugger
        }

        //取消按钮
        $scope.cancel = () => {
            $scope.$emit('cancelCallback');
        }

        //确定按钮
        $scope.confirm = () => {
            if ($scope.analysisObjectK == 1 || $scope.analysisObjectK == 3 || $scope.analysisObjectK == 5) {
                if ($scope[key[$scope.analysisObjectK]].length == 0) {
                    toaster.pop('error', '', '所选数据不能为空');
                    return;
                } else if ((parentmyAjaxData.config.anlsType == 1 || parentmyAjaxData.config.anlsType == 2) && $scope[key[$scope.analysisObjectK]].length > 10) {
                    toaster.pop('error', '', '分析对象不能超过十个');
                    return;
                }
                parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = [];
                parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = [];
                parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = [];
                var Bs;
                Bs = Object.keys($scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart]).length == 0 ? [...$scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart]] : $scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart].length == 0 ? [$scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart]] : [...$scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart], $scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart]];
                parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = JSON.parse(JSON.stringify(Bs));
                parentmyAjaxData.config.alsRlist = $scope[key[$scope.analysisObjectK]].length;
                // debugger
            } else if ($scope.analysisObjectK == 99) {
                if ($scope.objectDevice[$scope.equipChoiceIndex].length == 0) {
                    toaster.pop('error', '', '所选数据不能为空');
                    return;
                } else if ((parentmyAjaxData.config.anlsType == 1 || parentmyAjaxData.config.anlsType == 2) && $scope.objectDevice[$scope.equipChoiceIndex].length > 10) {
                    toaster.pop('error', '', '分析对象不能超过十个');
                    return;
                }
                parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = [];
                parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = [];
                parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = [];
                var Ds;
                Ds = Object.keys($scope['oneRItemDevice' + parentmyAjaxData.config.checkChart]).length == 0 ? [...$scope['groupResultDevice' + parentmyAjaxData.config.checkChart]] : $scope['groupResultDevice' + parentmyAjaxData.config.checkChart].length == 0 ? [$scope['oneRItemDevice' + parentmyAjaxData.config.checkChart]] : [...$scope['groupResultDevice' + parentmyAjaxData.config.checkChart], $scope['oneRItemDevice' + parentmyAjaxData.config.checkChart]];
                parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = JSON.parse(JSON.stringify(Ds));
                parentmyAjaxData.config.alsRlist = $scope.objectDevice[$scope.equipChoiceIndex].length;
            } else if ($scope.analysisObjectK == 101 || $scope.analysisObjectK == 102) {
                if ($scope[key[$scope.analysisObjectK]].length == 0) {
                    toaster.pop('error', '', '所选数据不能为空');
                    return;
                } else if ((parentmyAjaxData.config.anlsType == 1 || parentmyAjaxData.config.anlsType == 2) && $scope[key[$scope.analysisObjectK]].length > 10) {
                    toaster.pop('error', '', '分析对象不能超过十个');
                    return;
                }
                parentmyAjaxData.config.dmsTypeAs[parentmyAjaxData.config.checkChart] = [];
                parentmyAjaxData.config.dmsTypeBs[parentmyAjaxData.config.checkChart] = [];
                parentmyAjaxData.config.dmsTypeCs[parentmyAjaxData.config.checkChart] = JSON.parse(JSON.stringify($scope['oneRItem' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart]));
                parentmyAjaxData.config.dmsTypeDs[parentmyAjaxData.config.checkChart] = JSON.parse(JSON.stringify($scope['groupResult' + $scope.analysisObjectK + parentmyAjaxData.config.checkChart]));
                parentmyAjaxData.config.alsRlist = $scope[key[$scope.analysisObjectK]].length;
            }
            //存储历史数据
            parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].dmsType = parentmyAjaxData.config.dmsType;
            parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].analysisObjectK = $scope.analysisObjectK;
            parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].equipChoiceItem = $scope.equipChoiceItem;
            parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].radioItem = $scope.radioItem;
            parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].equipChoiceIndex = $scope.equipChoiceIndex;

            parentmyAjaxData.config.analysObjData[parentmyAjaxData.config.checkChart].checkData = [...new Set($scope[key[$scope.analysisObjectK]])]

            busiIdToName();
            $scope.$emit('addCallback', 'analysisObj');
        }
    });