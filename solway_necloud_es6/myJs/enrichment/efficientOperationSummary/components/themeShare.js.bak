ajaxData({
    // 该角色 电站列表
    allSTListForPCBySession: {
        name: 'GETAllSTListForPCBySession',
        data: {}
    },
    // 消息列表
    taskList: {
        name: 'GETTaskList',
        data: {},
        later: true,
        onlyLatest: true
    },
    // 批量作废
    wxaTaskDoInvalids: {
        name: 'wxaTaskDoInvalids',
        data: {},
        later: true
    },
    // 发布任务
    opShareTimeTaskUpdateV2: {
        name: 'opShareTimeTaskUpdateV2',
        data: {},
        later: true
    }
}, {
    __serviceName__: 'themeShareService'
    })('themeShareCtrl', ['$scope', 'themeShareService', 'actionRecord', 'toaster'], ($scope, myAjaxData, historicalRecord, toaster) => {
        /// 初始化 scope
        $scope.initChildScope($scope, myAjaxData);

        // 主页面初始化完成 回调
        $scope.mainPageInitComplete = async () => {
            const {
                startDate = new Date(Date.now() - 1000 * 60 * 60 * 24 * 365),
                endDate = new Date,
                isHis = '',
                handStatus = {
                    '00': true,
                    '01': true,
                    '02': true,
                    '03': true,
                    '04': true,
                    '05': true,
                    '06': true,
                },
                searchKey = ''
            } = historicalRecord.get().themeShare || {};
            $scope.startDate = startDate;
            $scope.endDate = endDate;
            $scope.isHis = isHis;
            $scope.handStatus = handStatus;
            $scope.searchKey = searchKey;
            await myAjaxData.timeout(0);
            $('.ng-clock').removeClass('ng-clock');
            $scope.initComplete = true;
            getBaseMessageList();
            $scope.$apply();
        };

        // 查询 弹出 事件
        $scope.searchPopUp = (e) => {
            e.stopPropagation();
            $scope.searchActive = true;
            $scope.batchCloseActive = false;
            // $scope.messagePopUp = false;
        };

        // 发布任务 弹出 事件
        $scope.releaseTaskPopUp = () => {
            // if ($scope.messagePopUp) return;
            $scope.releaseTask = true;
            $scope.releaseTaskParame = {
                timerType: '0',
                ...($scope.releaseTaskParame || {}),
            };
        };

        // 查询
        $scope.search = () => {
            $scope.searchActive = false;
            $scope.closeMessagePopUp();
            const { startDate, endDate, searchKey, isHis, handStatus } = $scope;
            historicalRecord.set({
                themeShare: {
                    ...historicalRecord.get().themeShare || {},
                    startDate, endDate, searchKey, isHis, handStatus
                }
            });
            getBaseMessageList();
        };

        // 消息列表 接口 请求
        function getBaseMessageList() {
            const { startDate, endDate, searchKey, isHis, handStatus } = $scope;
            $scope.taskList.getData({
                distDateStartStr: startDate.showDate,
                distDateEndStr: endDate.showDate,
                ss: isHis || Object.keys(handStatus).filter(v => handStatus[v]).join(),
                keywords: searchKey || '',
                pageIndex: 0,
                pageSize: 20
            });
        }

        // 列表 接口 数据 回调
        $scope.taskList.getDataCallback = (success, res) => {
            if (!success) return;
            $scope.closeMessagePopUp();
        };

        // 批量 作废
        $scope.batchClose = async () => {
            const ids = document.querySelectorAll('[name=batchprocessing]'):: [].filter(v => v.checked).map(v => v.dataset.identifies);
            if (ids.length === 0) return toaster.pop('error', '', '请至少选择一条信息');
            if (confirm('确定作废选择消息？')) await $scope.wxaTaskDoInvalids.getData({ ids: ids.join(','), opType: 3 });
            if ($scope.wxaTaskDoInvalids.res.code === 0) {
                toaster.pop('success', '', '处理成功');
                $scope.taskList.getData({});
            }
            else toaster.pop('error', '', '处理失败');
            $scope.$apply();
        };

        // 点击行
        $scope.trClick = async (item, index, e) => {
            e.stopPropagation();
            $scope.searchActive = false;
            $scope.batchCloseActive = false;
            $scope.closeMessagePopUp();
            await myAjaxData.timeout(100);
            $scope.messagePopUp = true;
            $scope.$broadcast("chatPanelObj", { ...item, isHis: [0, 0, 1][$scope.isHis] });
            $('.my-table tbody tr').eq(index + 1).addClass('active').find('.unread').css('display', 'none');
            if (item.unread_num > 0) $scope.readBaseMessages.getData({ ids: item.mid });
            $scope.$apply();
        };

        // 关闭 聊天 消息 面板
        $scope.closeMessagePopUp = () => {
            $scope.messagePopUp = false;
            $('.my-table tbody tr').removeClass('active');
        };

        $("#fileaaa").on('change', () => {
            $.ajaxFileUpload({
                url: 'wxa/img.htm',
                secureuri: false,
                fileElementId: 'fileaaa',
                type: "POST",
                formName: "file",
                dataType: 'json',
                data: {
                    classify: 'task',
                },
                success: function (data) {
                    if (data && data.length >= 0) {
                        $scope.responseImgs.push(data[0]);
                        $scope.$apply()
                    }
                },
                error: function (data, status, e) {
                    promptObj('error', "", "上传失败");
                }
            })
        });

        // 页面 点击  影藏 弹出
        document.addEventListener('click', eventListen);
        function eventListen() {
            $scope.searchActive = false;
            $scope.batchCloseActive = false;
            // $scope.messagePopUp = false;
            $scope.$apply();
        }
        $scope.$on('$destroy', () => {
            document.removeEventListener('click', eventListen);
        });

        // 列表
        $scope.column = [
            {
                title: '<label class="i-checks m-b-none"><input type="checkbox"><i style="background:transparent;"></i></label>',
                dataIndex: '',
                width: '60px',
                align: 'center',
                checkboxName: 'batchprocessing',
                render(text, record, index) {
                    return '<label class="i-checks m-b-none"><input data-identifies="' + record.id + '" name="batchprocessing" type="checkbox" /><i style="background:transparent;"></i></label>';
                }
            },
            {
                title: '电站名称',
                dataIndex: 'stationName',
                width: '25%',
            },
            {
                title: '发布时间',
                dataIndex: 'distDate',
                align: 'center',
                // sort: true,
                width: '15%',
                render(text) {
                    return `<span>${new Date(text).Format('yyyy-MM-dd hh:mm')}</span>`
                }
            },
            {
                title: '发布人',
                dataIndex: 'distManName',
                // sort: true,
            },
            {
                title: '处理人',
                dataIndex: 'handleManName',
                // sort: true,
            },
            {
                title: '内容',
                dataIndex: 'taskContent',
                // sort: true,
                width: '30%',
            },
            {
                title: '状态',
                dataIndex: 'publishStatus',
                // sort: true,
                render(text) {
                    return `<span>
                    ${
                        {
                            '00': "未发布",
                            '01': "已发布",
                            '02': "处理中",
                            '03': "处理未完成",
                            '04': "审核中",
                            '05': "审核通过",
                            '06': "审核未通过",
                            '07': "已完成",
                            '99': "已作废"
                        }[text]
                    }
                    </span>`;
                }
            },
        ];
});