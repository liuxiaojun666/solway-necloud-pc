ajaxData(
    {
        stClassLIst: {
            name: 'GETstClassLIst',
            data: {}
        },
        runTimeMonitor: {
            name: 'GETrunTimeMonitor',
            data: {},
            onlyLatest: true,
            sameTimeOnce: true
        },
        companyDayTodayTime: {
            name: 'GETrunAcpTimeListPvwp',
            data: {
                queryType: 1,
                dateType: 3,
                date: new Date().Format('yyyy-MM-dd'),
                dataType: 2,
                stime: 0
            },
            onlyLatest: true,
            sameTimeOnce: true,
        },
        pvwpStationOverview: {
            name: 'GETpvwpStationOverview',
            data: {},
            onlyLatest: true,
            sameTimeOnce: true,
        },
        powerStationStatusDataNew2: {
            name: 'GETpowerStationStatusDataNew2',
            data: {},
            onlyLatest: true
        },
    }, {
        __serviceName__: 'mainMonitoringService',
        companyDayTodayTimeLineData: { xdata: [], line1: [], line2: [] },
        companyDayTodayTimeLineDataWp: { xdata: [], line1: [], line2: [] },
        jiangsuJson:[{
            "cityid": 811,
            "city_name": "南京"
        }, {
            "cityid": 823,
            "city_name": "无锡"
        }, {
            "cityid": 832,
            "city_name": "徐州"
        }, {
            "cityid": 843,
            "city_name": "常州"
        }, {
            "cityid": 851,
            "city_name": "苏州"
        }, {
            "cityid": 861,
            "city_name": "南通"
        }, {
            "cityid": 870,
            "city_name": "连云港"
        }, {
            "cityid": 877,
            "city_name": "淮安"
        }, {
            "cityid": 886,
            "city_name": "盐城"
        }, {
            "cityid": 896,
            "city_name": "扬州"
        }, {
            "cityid": 903,
            "city_name": "镇江"
        }, {
            "cityid": 910,
            "city_name": "泰州"
        }, {
            "cityid": 917,
            "city_name": "宿迁"
        }, {
            "cityid": 1399,
            "city_name": "烟台"
        }]
    }
)('mainMonitoringCtrl', ['$scope', 'mainMonitoringService', 'actionRecord', '$interval', '$ocLazyLoad'], ($scope, myAjaxData, historicalRecord, $interval, $ocLazyLoad) => {
    myAjaxData.config.companyDayTodayTimeLineData = { xdata: [], line1: [], line2: [] };
    myAjaxData.config.companyDayTodayTimeLineDataWp = { xdata: [], line1: [], line2: [] };
    
    $('.themeMonitoring.ng-clock').removeClass('ng-clock');
    // 滚动数字
    const od = new Odometer({ el: document.getElementById('odometer'), value: 10000000 });
    const od1 = new Odometer({ el: document.getElementById('odometer1'), value: 10000000 });
    

    const getAverageHours = data =>{
        let monthHours = data.m_h_pv[0]
        let currentDate = new Date().getDate()
        $scope.averageHour = (monthHours / currentDate).toFixed(1)
    }
    $scope.pvwpStationOverview.subscribe(res => {
        od.update(res.body.ov.real_kwh_chk ? (10000000 + (+res.body.ov.real_kwh_chk.toFixed()) + '') : '10000000');
        od1.update(res.body.ov.elecCharge ? (10000000 + (+res.body.ov.elecCharge.toFixed()) + '') : '10000000');
        hideNum0();
        setTimeout(hideNum0, 2500);
        getAverageHours(res.body.uv)
    });

    function hideNum0() {
        let has = false;
        let styleText = '';
        $('#odometer .odometer-value').each(function (index) {
            const $this = $(this);
            if (!has && $this.text() === '0') {
                styleText += `#odometer .odometer-digit:nth-child(${index + 1}) .odometer-value{color: transparent;}`;
            } else {
                styleText += `#odometer .odometer-digit:nth-child(${index + 1}) .odometer-value{color: #61FF4F;}`;
                has = true
            }
        });
        let has1 = false;
        $('#odometer1 .odometer-value').each(function (index) {
            const $this = $(this);
            if (!has1 && $this.text() === '0') {
                styleText += `#odometer1 .odometer-digit:nth-child(${index + 1}) .odometer-value{color: transparent;}`;
            } else {
                styleText += `#odometer1 .odometer-digit:nth-child(${index + 1}) .odometer-value{color: #61FF4F;}`;
                has1 = true
            }
        });
        $('#odometerStyle').html(styleText);
    }

    // 电站类型列表
    $scope.stClassLIst.subscribe(res => {
        $scope.stClassLIst.res.stClass01 = res.body.some(v => v.id === '01');
        $scope.stClassLIst.res.stClass02 = res.body.some(v => v.id === '02');
    });

    // 1、基本信息 装机容量
    $scope.jiangsuList = myAjaxData.config.jiangsuJson
    $scope.distributeCityNum = [];
    $scope.powerStationStatusDataNew2.subscribe(res => {
        $scope.jiangsuList.map(outV => {
            outV.stationNum = 0
            $scope.stationNum = res.data[1].sum
            res.data[1].data.map(insideV => {
                if(outV.cityid == insideV.cityId){
                    outV.stationNum = outV.stationNum ? outV.stationNum +1 : 1
                    if(!$scope.distributeCityNum.includes(insideV.cityId)) $scope.distributeCityNum.push(insideV.cityId)
                }
            })
        })
        $scope.jiangsuList.sort(function(a,b){
            return a.stationNum < b.stationNum ?1:-1
        });
    });
    
    // 2、功率曲线
    $scope.companyDayTodayTime.subscribe(res => {
        if (!($scope.stClassLIst.res.stClass01 && !$scope.stClassLIst.res.stClass02)) return;
        const { companyDayTodayTimeLineData } = myAjaxData.config;
        const { xdata, line1, line2 } = companyDayTodayTimeLineData;
        const length = xdata.length;
        $scope.xdata = companyDayTodayTimeLineData.xdata = xdata.slice(0, length - 1).concat(res.body.chart_pv.echarts_xaTime);
        $scope.ydatas = [[
            companyDayTodayTimeLineData.line1 = line1.slice(0, length - 1).concat(res.body.chart_pv.echarts_p),
            companyDayTodayTimeLineData.line2 = line2.slice(0, length - 1).concat(res.body.chart_pv.echarts_shd_p)
        ]];
        myAjaxData.config.companyDayTodayTimeLineData = companyDayTodayTimeLineData;
    });
    $scope.companyDayTodayTime.subscribe(res => {
        if (!(!$scope.stClassLIst.res.stClass01 && $scope.stClassLIst.res.stClass02)) return;
        const { companyDayTodayTimeLineDataWp } = myAjaxData.config;
        const { xdata, line1, line2 } = companyDayTodayTimeLineDataWp;
        const length = xdata.length;
        $scope.xdata = companyDayTodayTimeLineDataWp.xdata = xdata.slice(0, length - 1).concat(res.body.chart_wp.echarts_xaxisTime);
        $scope.ydatas = [[
            companyDayTodayTimeLineDataWp.line1 = line1.slice(0, length - 1).concat(res.body.chart_wp.echarts_power),
            companyDayTodayTimeLineDataWp.line2 = line2.slice(0, length - 1).concat(res.body.chart_wp.echarts_predictPower)
        ]];
        myAjaxData.config.companyDayTodayTimeLineDataWp = companyDayTodayTimeLineDataWp;
    });
    $scope.companyDayTodayTime.subscribe(res => {
        if (!($scope.stClassLIst.res.stClass01 && $scope.stClassLIst.res.stClass02)) return;
        const { companyDayTodayTimeLineData } = myAjaxData.config;
        const { companyDayTodayTimeLineDataWp } = myAjaxData.config;
        const { line1: pline1, line2: pline2 } = companyDayTodayTimeLineData;
        const { xdata, line1: wline1, line2: wline2 } = companyDayTodayTimeLineDataWp;
        $scope.xdata = companyDayTodayTimeLineDataWp.xdata = xdata.slice(0, -1).concat(res.body.chart_wp.echarts_xaxisTime);
        let arrLength = res.body.chart_wp.echarts_power_o.length - res.body.chart_pv.echarts_p.length;
        if (companyDayTodayTimeLineData.line1.length) {
            arrLength = 0;
        }
        $scope.ydatas = [[
            companyDayTodayTimeLineData.line1 = new Array(arrLength).fill('-').concat(pline1.slice(0, -1).concat(res.body.chart_pv.echarts_p)),
            companyDayTodayTimeLineData.line2 = new Array(arrLength).fill('-').concat(pline2.slice(0, -1).concat(res.body.chart_pv.echarts_shd_p))
        ],[
            companyDayTodayTimeLineDataWp.line1 = wline1.slice(0, -1).concat(res.body.chart_wp.echarts_power_o),
            companyDayTodayTimeLineDataWp.line2 = wline2.slice(0, -1).concat(res.body.chart_wp.echarts_predictPower_o)
        ]];
        myAjaxData.config.companyDayTodayTimeLineDataWp = companyDayTodayTimeLineDataWp;
    });

    // 监听窗口改变，重绘图标
    window.addEventListener('resize', chartResize);
    function chartResize() {
       
    }

    // 定时刷新数据
    const timer = $interval(() => {
        $scope.pvwpStationOverview.getData();

        if ($scope.companyDayTodayTime.res) {
            let variable;
            if ($scope.stClassLIst.res.stClass01 && !$scope.stClassLIst.res.stClass02) {
                variable = $scope.companyDayTodayTime.res.body.chart_pv.echarts_xaTime;
            } else if (!$scope.stClassLIst.res.stClass01 && $scope.stClassLIst.res.stClass02) {
                variable = $scope.companyDayTodayTime.res.body.chart_wp.echarts_xaxisTime;
            } else if ($scope.stClassLIst.res.stClass01 && $scope.stClassLIst.res.stClass02) {
                variable = $scope.companyDayTodayTime.res.body.chart_wp.echarts_xaxisTime;
            }
            if (variable) $scope.companyDayTodayTime.getData({ stime: variable[variable.length - 1].split(':').join('') });
        }

    }, 5000);

    // 实例销毁 清除定时器 清除事件绑定
    $scope.$on('$destroy', () => {
        $interval.cancel(timer);
        window.removeEventListener('resize', chartResize);
    });
});