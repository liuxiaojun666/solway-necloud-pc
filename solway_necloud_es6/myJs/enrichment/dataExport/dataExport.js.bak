ajaxData({
    // 该角色 电站列表
    allSTListForPCBySession: {
        name: 'GETAllSTListForPCBySession',
        data: {}
    },
    // 级别
    bigDataExportLevel: {
        name: 'GETbigDataExportLevel',
        data: {
            dictType: 'BIGDATA_EXPORT_LEVEL'
        }
    },
    // 类型
    bigDataExportType: {
        name: 'GETbigDataExportType',
        data: {
            dictType: 'BIGDATA_EXPORT_TYPE'
        }
    },
    // 列名
    bigDataExportSelectByCondition: {
        name: 'GETbigDataExportSelectByCondition',
        data: {},
        later: true
    },
    // 设备名
    selectDevicesByStation: {
        name: 'GETselectDevicesByStation',
        data: {},
        later: true
    },
    // 添加任务
    bigdataExportUpdate: {
        name: 'bigdataExportUpdate',
        data: {},
        later: true
    },
    // 任务 列表
    bigdataExportPage: {
        name: 'GETbigdataExportPage',
        data: {},
        later: true
    },

}, {})('dataExportCtrl', ['$scope', 'myAjaxData', 'actionRecord', '$interval', 'toaster'], ($scope, myAjaxData, historicalRecord, $interval, toaster) => {
    historicalRecord.init();// 历史记录 初始化
    $scope.beforeLoading = true; // 页面loading
    $scope.moduleName = '数据导出';//当前页面名称；
    $scope.endDate = new Date((+new Date) - 1000 * 60 * 60 * 24); // 日历可选 的截止日期
    historyInitCallback();

    // 当前页面行为记录初始化回调 获取行为记录
    async function historyInitCallback() {
        const historiData = historicalRecord.get();
        const {
            startDate = new Date(Date.now() - 1000 * 60 * 60 * 24),
            endDate = new Date(Date.now() - 1000 * 60 * 60 * 24),
        } = historiData;
        $scope.startDate = startDate;
        $scope.endDate = endDate;
        $scope.formData = {};
        $scope.queryData = {
            qcLevel: '',
            qcStid: '',
            qcType: ''
        };
        $scope.beforeLoading = false;
        await myAjaxData.timeout(0);
        $scope.$apply();
    };

    // 限制日分钟级导出日期范围
    $scope.dateUpdate1 = async () => {
        await myAjaxData.timeout(0);
        if (!window.moment) return;
        $scope.rangeEndDate = $scope.formData.qcLevel == 1 ? moment($scope.startDate).add(30, 'd')._d : new Date(Date.now() - 1000 * 60 * 60 * 24);;
        if ($scope.rangeEndDate && $scope.rangeEndDate.getTime() > (Date.now() - 1000 * 60 * 60 * 24)) $scope.rangeEndDate = new Date(Date.now() - 1000 * 60 * 60 * 24);
        $scope.$apply();
    };
    $scope.dateUpdate2 = async () => {
        await myAjaxData.timeout(0);
        if (!window.moment) return;
        $scope.rangeStartDate = $scope.formData.qcLevel == 1 ? moment($scope.endDate).add(-30, 'd')._d : null;
        $scope.$apply();
    };

    // 级别 接口 处理
    $scope.bigDataExportLevel.subscribe(res => {
        $scope.formData.qcLevel = res[1] && res[1].dictValue;
        $scope.bigdataExportUpdate.beforeGetdata();
    });

    // 类型 接口 处理
    $scope.bigDataExportType.subscribe(res => {
        $scope.formData.qcType = res[2] && res[2].dictValue;
        $scope.bigdataExportUpdate.beforeGetdata();
    });

    // 电站 接口 处理
    $scope.allSTListForPCBySession.subscribe(res => {
        $scope.formData.qcStid = res[0] && res[0].id;
        $scope.bigdataExportUpdate.beforeGetdata();
    });

    // 新增
    $scope.createTask = async () => {
        $scope.newForm = true;
        if ($scope.bigDataExportSelectByCondition.res) return;
        await myAjaxData.timeout(200);
        $scope.bigDataExportSelectByCondition.beforeGetdata(); 
        $scope.selectDevicesByStation.beforeGetdata();
    };

    // 取列名
    $scope.bigDataExportSelectByCondition.beforeGetdata = () => {
        if (!$scope.bigDataExportLevel.res) return;
        if (!$scope.bigDataExportType.res) return;
        if (!$scope.allSTListForPCBySession.res) return;
        $scope.bigDataExportSelectByCondition.getData({
            level: $scope.formData.qcLevel,
            type: $scope.formData.qcType,
        });
    };

    // 列名 接口 处理
    $scope.bigDataExportSelectByCondition.subscribe(res => {
        $scope.formData.qcColumnidAll = false;
        $scope.formData.qcColumnidOnlyShowChecked = false;
        $scope.formData.qcColumnidKeyWords = '';
        $scope.formData.qcColumnid = [].concat(res.body).map(v => ({
            ...v,
            show: true,
            checked: false
        }));
    });

    // 取设备
    $scope.selectDevicesByStation.beforeGetdata = () => {
        if (!$scope.bigDataExportLevel.res) return;
        if (!$scope.bigDataExportType.res) return;
        if (!$scope.allSTListForPCBySession.res) return;
        if ($scope.formData.qcType == 0) return;
        $scope.selectDevicesByStation.getData({
            stid: $scope.formData.qcStid,
            deviceType: $scope.formData.qcType,
        });
    };

    // 设备 列表 接口 处理
    $scope.selectDevicesByStation.subscribe(res => {
        $scope.formData.qcEqidAll = true;
        $scope.formData.qcEqidOnlyShowChecked = false;
        $scope.formData.qcEqidKeyWords = '';
        $scope.formData.qcEqid = [].concat(res).map(v => ({
            ...v,
            show: true,
            checked: true
        }));
    });

    // 改变选中状态
    $scope.checkboxChange = (name, index, value) => {
        if (index === 'All') {
            $scope.formData[name] = $scope.formData[name].map(v => ({
                ...v,
                checked: value
            }));
            return $scope.checkboxFilter(name);
        }
        if (!value) return $scope.formData[name + 'All'] = value;
        return $scope.formData[name + 'All'] = !$scope.formData[name].some(v => v.checked === false);
    };

    // 选择框 条件过滤
    $scope.checkboxFilter = (name) => {
        const OnlyShowChecked = $scope.formData[name + 'OnlyShowChecked'];
        const keyWords = $scope.formData[name + 'KeyWords'].trim();
        if (OnlyShowChecked) {
            const arr = $scope.formData[name] = $scope.formData[name].map(v => ({
                ...v,
                show: v.checked
            }));
            if (keyWords) {
                return $scope.formData[name] = arr.map(v => ({
                    ...v,
                    show: (v.display || v.name).includes(keyWords) && v.show
                }));
            }
            return $scope.formData[name] = arr;
        } else {
            if (keyWords) {
                return $scope.formData[name] = $scope.formData[name].map(v => ({
                    ...v,
                    show: (v.display || v.name).includes(keyWords)
                }));
            }
            return $scope.formData[name] = $scope.formData[name].map(v => ({
                ...v,
                show: true
            }));
        }
    };

    // 创建 提交
    $scope.formDataSubmit = () => {
        const { qcColumnid, qcEqid, qcType, qcColumnidAll, qcEqidAll } = $scope.formData;
        if (qcColumnid.length === 0) return;
        if (qcType != 0 && qcEqid.length === 0) return;

        if ($scope.formData.qcLevel == 1) {
            if ($scope.endDate.getTime() - $scope.startDate.getTime() > 1000 * 60 * 60 * 24 * 31) {
                return toaster.pop('error', '', '导出数据量太大, 分钟级一次最多导出31天数据。');
            }
        }

        $scope.bigdataExportUpdate.getData({
            ...$scope.formData,
            qcColumnid: qcColumnidAll ? '' : qcColumnid.filter(v => v.checked).map(v => v.field).join(','),
            qcEqid: qcEqidAll ? '' : qcEqid.filter(v => v.checked).map(v => v.serialNumber).join(','),
            qcEqidAll: null,
            qcEqidOnlyShowChecked: null,
            qcEqidKeyWords: null,
            qcColumnidAll: null,
            qcColumnidOnlyShowChecked: null,
            qcColumnidKeyWords: null,
            qcStartTime: $scope.startDate.showDate,
            qcEndTime: $scope.endDate.showDate
        });
        $scope.newForm = false;
    };

    // 创建 完成后 刷新列表
    $scope.bigdataExportUpdate.subscribe(res => {
        $scope.queryData = {
            qcLevel: '',
            qcStid: '',
            qcType: ''
        };
        $scope.bigdataExportUpdate.beforeGetdata();
    });

    // 任务列表 接口请求 request
    $scope.bigdataExportUpdate.beforeGetdata = () => {
        if (!$scope.bigDataExportLevel.res) return;
        if (!$scope.bigDataExportType.res) return;
        if (!$scope.allSTListForPCBySession.res) return;
        $scope.column = [];
        $scope.bigdataExportPage.getData({
            ...$scope.queryData,
        });
    };

    // 任务列表 接口 处理 response
    $scope.bigdataExportPage.subscribe(res => {
        $scope.column = [
            {
                title: '级别',
                dataIndex: 'qcLevel',
                sort: 'true',
                render(text) {
                    return $scope.bigDataExportLevel.res.filter(v => text === v.dictValue)[0].dictName;
                }
            },
            {
                title: '电站',
                dataIndex: 'qcStid',
                sort: 'true',
                render(text) {
                    return text ? ($scope.allSTListForPCBySession.res.filter(v => text === v.id)[0] || {stationname: ''}).stationname : '';
                }
            },
            {
                title: '类型',
                dataIndex: 'qcType',
                sort: 'true',
                render(text) {
                    return $scope.bigDataExportType.res.filter(v => text == v.dictValue)[0].dictName;
                }
            },
            {
                title: '时间段',
                dataIndex: 'qcStartTime',
                align: 'center',
                render(text, item) {
                    return new Date(text).Format('yyyy-MM-dd') + '至' + new Date(item.qcEndTime).Format('yyyy-MM-dd');
                }
            },
            {
                title: '创建时间',
                dataIndex: 'createTime',
                align: 'center',
                sort: 'true',
                render(text) {
                    return text ? new Date(text).Format('yyyy-MM-dd hh:mm:ss') : '';
                }
            },
            {
                title: '过期时间',
                dataIndex: 'expiryTime',
                sort: 'true',
                align: 'center',
                render(text) {
                    return text ? new Date(text).Format('yyyy-MM-dd hh:mm:ss') : '';
                }
            },
            {
                title: '操作',
                dataIndex: 'busiStatus',
                render(text, item) {
                    if (text === '00') return '正在生成任务...';
                    if (text === '01') return `<a style="color: #1cb09a;" target="_blank" href="${item.url}">下载</a>`;
                    if (text === '03') return '导出失败';
                    if (text === '04') return '导出结果为空';
                    return '';
                }
            },
        ]
    });

    // 自动刷新任务列表
    const timer = $interval(() => {
        $scope.bigdataExportPage.getData();
    }, 60 * 1000);

    $scope.$on('$destroy', () => {
        $interval.cancel(timer);
    });


});