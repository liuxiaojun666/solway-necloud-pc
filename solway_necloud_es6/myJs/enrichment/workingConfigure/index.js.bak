ajaxData({
    getCurrentInfoNew: {
        name: 'GETgetCurrentInfoNew',
        data: {},
        later: true
    },
    aerographDetail:{
        name: 'GETaerographDetail',
        data: {},
        later: true
    },
    aerographList:{
        name: 'GETaerographList',
        data: {},
        later: true
    },
    aerographListAround:{
        name: 'GETaerographListAround',
        data: {},
        later: true
    },
    updateAerograph:{
        name: 'POSTupdateAerograph',
        data: {},
        later: true
    },
    interruptNoteDetail:{
        name: 'GETinterruptNoteDetail',
        data: {},
        later: true
    },
    interruptNoteSave:{
        name: 'POSTinterruptNoteSave',
        data: {},
        later: true
    },
    powerStationDetail:{
        name: 'GETpowerStationDetail',
        data: {},
        later: true
    },
    updateNoteSave:{
        name: 'POSTupdateNoteSave',
        data: {},
        later: true
    },
    initialPowerDetail:{
        name: 'GETinitialPowerDetail',
        data: {},
        later: true
    },
    initialPowerSave:{
        name: 'POSTinitialPowerSave',
        data: {},
        later: true
    }


}, {})('workingConfigureCtrl', ['$scope', 'myAjaxData', 'actionRecord','toaster'], ($scope, myAjaxData, historicalRecord,toaster) => {
    
    $scope.moduleName = '运行配置';

    $scope.initPageParams = async()=>{
        const stationInfo = await $scope.getCurrentInfoNew.getData({ currentView: '03', isGroup: 0 });
        $scope.pstationid = stationInfo.currentSTID;
        $scope.currentStationName = stationInfo.currentDataName;
        getAerographDetail();
        getInterruptDetailData();
        getNoteDetailData();
        getInitialPowerDetailData();

        //状态均未编辑
        $scope.aerographEdit = false;
        $scope.interruptEditDisabled = true;
        $scope.noteDisabled = true;
        $scope.initialPowerEditDisabled = true;
        
    }

    $scope.initPageParams();

    $('.workingConfigure').on('click','.menu-btn',function(){
        $(this).siblings().removeClass('active-btn');
        $(this).addClass('active-btn');
    });

    /****************************************  气象仪   *********************************************** */
    
    //气象仪 编辑
    $scope.aerographEditShow = () =>{
        $scope.aerographEdit = true;
        getAerographDetail();
    }

    //气象仪详情
    const getAerographDetail = () =>{
        $scope.aerographDetail.getData({
            pstationid:$scope.pstationid
        }).then(res=>{
            $scope.aerographData = res;
            $scope.aerographEditId = res.id;
            $scope.weatherdetail = res.weatherdetail;
            $scope.isld = res.isld;

            $scope.isborrow = res.isborrow;
            if($scope.isborrow == 1){ //是否引用
                $scope.borrowpstationid = res.borrowpstationid;
                $scope.aerographId = res.borrowdeviceid;
                getAeroGraphAroundData();
            }else{
                $scope.aerographSelfId = res.borrowdeviceid;
                getCurrentAerographList();
            }
            
        });
    }

    //当前电站的气象仪列表
    const getCurrentAerographList = ()=>{
        $scope.aerographList.getData({
            pstationid:$scope.pstationid,
			devicetype:5
        }).then(res=>{
            $scope.aerographListData = res;
        });
    }

    //radio 是否引用
    $scope.checkQuoteRadio = type =>{
        $scope.isborrow = type;
        if(type == 1){
            getAeroGraphAroundData();
        }else{
            getCurrentAerographList();
        }
    }

    //查看周边可引用的气象仪列表
    const getAeroGraphAroundData = () =>{
        $scope.aerographListAround.getData({
            'powerStationId':$scope.pstationid
        }).then(res=>{
            if(res && res.list){
                $scope.aroundData = res.list;
            }
        });
    }

    //radio 选择气象仪类型
    $scope.aerographTypeRadio = type =>{
        $scope.weatherdetail = type;
    }

    //radio 选择周边可引用气象仪
    $scope.aerographQuoteWhich = item =>{
        $scope.borrowpstationid = item.psId;
        $scope.aerographId = item.aerographId;
    }

    //保存气象仪配置信息
    $scope.saveAerograph = () =>{
        let formData = {
            isborrow: $scope.isborrow,
            weatherdetail: $scope.weatherdetail,
            pstationid: $scope.pstationid,
            id: $scope.aerographEditId,
            isld: $scope.isld
        }
        if($scope.isborrow == 1){
            formData['aroundid'] = 'on';
            if(!$scope.aerographId){
                toaster.pop('error','','请选择要引用的气象仪');
                return;
            }
            formData['borrowpstationid'] = $scope.borrowpstationid;
            formData['borrowdeviceid'] = $scope.aerographId;
        }else{
            formData['borrowpstationid'] = $scope.pstationid;
            formData['borrowdeviceid'] = $scope.aerographSelfId;
        }
        $scope.updateAerograph.getData(formData).then(res=>{
            if(res.type == 'success'){
                toaster.pop('success','','保存成功');
                $scope.aerographEdit = false;
                getAerographDetail();
            }else{
                toaster.pop('error', '','保存失败')
            }
        });
    }

    /****************************************  消息及日志   *********************************************** */

    //中断详情
    const getInterruptDetailData = () =>{
        let arr = $("input[name='interruptNoteCheckbox']");
        $scope.interruptNoteDetail.getData({pstationid:$scope.pstationid}).then(res=>{
            if (res.key == 0){
                const data = res.data;
                $scope.timeOffset = data.leadvalue;
                $scope.isrectip = data.isrectip;
                for(let i=0;i<arr.length;i++){
                    if($scope.isrectip.includes(arr[i].value)){
                        arr[i].checked = true;
                    }else{
                        arr[i].checked = false;
                    }
                }
            }
        });
    }
    //通讯中断消息  编辑
    $scope.interruptEditShow = () =>{
        $scope.interruptEditDisabled = false;
    }

    //取消
    $scope.interruptEditCancel = () =>{
        getInterruptDetailData();
        $scope.interruptEditDisabled = true;
    }

    //通讯中断消息  保存
    $scope.saveInterruptNote = () =>{
        let isrectip = [];
        $("input[name='interruptNoteCheckbox']").each(function(i){
            if($(this).prop('checked')){
                isrectip.push($(this).val())
            }
        });
        $scope.interruptNoteSave.getData({
            pstationid: $scope.pstationid,
			isrectip: isrectip.join(","),
			leadvalue: $scope.timeOffset
        }).then(res=>{
            if(res.key == 0){
                toaster.pop('success','','保存成功');
                $scope.interruptEditCancel();
            }else{
                toaster.pop('error', '','保存失败')
            }
        });
    }


    //消息详情
    const getNoteDetailData = () =>{
        $scope.powerStationDetail.getData({id:$scope.pstationid}).then(res=>{
			$("input[name='noteConfigure'][value='"+res.ismessage+"']").prop("checked", true);
        });
    }
    //消息配置
    $scope.noteEditShow = () =>{
        $scope.noteDisabled = false;
    }

    //消息配置 取消
    $scope.noteEditCancel = () =>{
        $scope.noteDisabled = true;
        getNoteDetailData();
    }

    //消息配置  保存
    $scope.saveNote = () =>{
        let ismessage = $("input[name='noteConfigure']:checked").val();
        $scope.updateNoteSave.getData({
            id:$scope.pstationid,
            ismessage:ismessage
        }).then(res=>{
            if(res == 1){
                toaster.pop('success','','保存成功');
                $scope.noteEditCancel();
            }else{
                toaster.pop('error', '','保存失败')
            }
        });
    }

    /****************************************  初始电量   *********************************************** */
    $scope.endDate = new Date('2099');
    $scope.expiryDate = new Date();

    //初始电量详情
    const getInitialPowerDetailData = () =>{
        $scope.initialPowerDetail.getData({pstationid:$scope.pstationid}).then(res=>{
            console.log(res)
            $scope.initialPowerData = res;
            $scope.expiryDate = new Date(res.expirydate);
        });
    }
    $scope.initialPowerEditShow = () =>{
        $scope.initialPowerEditDisabled = false;
    }

    //取消
    $scope.cancelInitialPower = () =>{
        $scope.initialPowerEditDisabled = true;
        getInitialPowerDetailData();
    }

    //保存
    $scope.saveInitialPower = () =>{
        $scope.initialPowerData['expirydate'] = new Date($scope.expiryDate).Format("yyyy-MM-dd");
        $scope.initialPowerSave.getData($scope.initialPowerData).then(res=>{
            if(res.type == 'success'){
                toaster.pop('success','','保存成功');
                $scope.cancelInitialPower();
            }else{
                toaster.pop('error', '','保存失败')
            }
        });
    }

});