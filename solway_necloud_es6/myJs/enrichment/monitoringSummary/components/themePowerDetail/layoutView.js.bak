ajaxData({
    getDeviceLayoutSvg: {
        name: 'GETDeviceLayoutSvg',
        data: {}
    },
    getVideoNames: {
        name: 'GETVideoNames',
        data: {},
        later: true,
    },
    getDeviceStatus: {
        name: 'GETDeviceStatus',
        data: {},
        later: true,
        onlyLatest: true,
        sameTimeOnce: true,
    },
    selectVideos: {
        name: 'GETPowerStationMonitorSelectVideos',
        data: {},
        onlyLatest: true
    },
}, {
        __serviceName__: 'themePowerLayoutViewService',
    })('themePowerLayoutViewCtrl', ['$scope', 'themePowerLayoutViewService', 'myAjaxData', '$http'], ($scope, myAjaxData, parentAjaxData, $http) => {
        // 监听电站切换
        $scope.$on("switchPowerCallback", (e, m) => {
            SvgUtils.Hlx.collectionFlag = true;
            SvgUtils.Hlx.bunchFlag = true;
            SvgUtils.NbqHlx.collectionFlag = true;
            SvgUtils.NbqHlx.bunchFlag = true;
            SvgUtils.Nbq.collectionFlag = true;
            SvgUtils.Xb.collectionFlag = true;
            $scope.drag && $scope.drag.destroy();
            $scope.getDeviceLayoutSvg.getData({})
        });

        // 渲染svg 绑定id与名称 并 注册拖拽缩放功能
        $scope.getDeviceLayoutSvg.subscribe(res => {
            const $svgView = $("#svgView").html(res.data)
            const $svg = $svgView.find('svg');
            res.allDevice.forEach(v => $svg.find("g[deviceid='" + v.serialNumber + "'][type!='videoImage']")
                .attr('title', v.name)
                .attr('id', v.id)
                .attr('data-toggle', 'tooltip')
                .attr('data-placement', 'right')
                .tooltip({ 'container': 'body' })
            );
            const viewWidth = $svgView.width();
            const svgWidth = $svg.width();
            $scope.drag = $solway.drag({ 
                ele: $svg[0], 
                translateX: (viewWidth - svgWidth) / 2,
                originX: '50%',
                originY: '0',
                scale: (svgWidth < viewWidth) ? 1 : (viewWidth / svgWidth),
                minScale: 0.1
            });
            $scope.$on('$destroy', () => $scope.drag.destroy());
        });

        // 获取 设备id   并获取设备状态
        $scope.getDeviceLayoutSvg.subscribe(res => {
            const ids = {
                "hlxs": document.querySelectorAll('#svgView g[type="HLX"]'):: [].map(v => v.attributes.deviceid.value).join(),
                "nbqs": document.querySelectorAll('#svgView g[type="NBQ"]'):: [].map(v => v.attributes.deviceid.value).join(),
                "nbqhlxs": document.querySelectorAll('#svgView g[type="NBQHLX"]'):: [].map(v => v.attributes.deviceid.value).join(),
                "xbs": document.querySelectorAll('#svgView g[type="XB"]'):: [].map(v => v.attributes.deviceid.value).join()
            };
            $scope.getDeviceStatus.getData(ids);
        });

        // 获取视频 name  并绑定name
        $scope.getDeviceLayoutSvg.subscribe(res => {
            const ids = document.querySelectorAll('#svgView g[type="videoImage"]'):: [].map(v => v.attributes.deviceid.value).join();
            ids && $scope.getVideoNames.getData({ ids })
            .then(res => res.data.forEach(v => $("#svgView g[type='videoImage'][deviceid='" + v.id + "']")
                .attr('title', v.pointName)
                .attr('data-toggle', 'tooltip')
                .attr('data-placement', 'right')
                .tooltip({ 'container': 'body' })
            ))
        });

        // 注册事件
        $scope.getDeviceLayoutSvg.subscribe(res => {
            $("#svgView").find("g rect.rectLayout").on('dblclick', function () {
                const $device = $(this).parents("g");
                const type = $device.attr("type");
                const deviceId = $device.attr("deviceId");
                const id = $device.attr("id");
                const stationId = parentAjaxData.currentStationData.currentSTID;
                switch (type) {
                    case "NBQHLX":
                        showHistoryData_byRTMDeviceLogId(stationId, id, deviceId, "2", "1");
                        break;
                    case "HLX":
                        showHistoryData_byRTMDeviceLogId(stationId, id, deviceId, "1");
                        break;
                    case "NBQ":
                        showHistoryData_byRTMDeviceLogId(stationId, id, deviceId, "2", "0");
                        break;
                    case "XB":
                        showHistoryData_byRTMDeviceLogId(stationId, id, deviceId, "3");
                        break;
                    case "videoImage":
                        videoHandle(id, deviceId);
                        break;
                }
            });
        });

        // 设备状态  刷新
        $scope.getDeviceStatus.subscribe(async res => {
            if (res.key !== 0) return;
            res.hlx && SvgUtils.Hlx.flushHlx(res.hlx, null);
            res.nbq && SvgUtils.Nbq.flushNbq(res.nbq, null);
            res.nbqhlx && SvgUtils.NbqHlx.flushNbqHlx(res.nbqhlx, null);
            res.xb && SvgUtils.Xb.flushXb(res.xb, null);
            if ($scope.isDestroy) return;
            await myAjaxData.timeout(10 * 1000);
            $scope.getDeviceStatus.getData({});
        });

        // 事件处理函数   弹出窗
        function showHistoryData_byRTMDeviceLogId (pstationid, deviceid, deviceSerialNnumber, deviceType, hasJB) {
            var res = { deviceSerialNnumber: deviceSerialNnumber, deviceId: deviceid, pstationid: pstationid, deviceTypeNow: deviceType, };
            $scope.deviceTypeNow = deviceType;
            $scope.inverterType = hasJB;
            if (deviceType == '3') {
                $('#taskList_historyData3').modal({ backdrop: 'static', keyboard: false });
                $scope.$broadcast("showDeviceDetail3broad", res);
            } else if (deviceType == '2') {
                $('#taskList_historyData2').modal({ backdrop: 'static', keyboard: false });
                $scope.$broadcast("showDeviceDetail2broad", res);
            } else if (deviceType == '1') {
                $('#taskList_historyData1').modal({ backdrop: 'static', keyboard: false });
                $scope.$broadcast("showDeviceDetail1broad", res);
            }
        };

        // 视频 处理  获取视频列表
        function videoHandle(id, deviceid) {
            $scope.videoing = true;
            $scope.videoContinue = true;
            $scope.selectVideos.getData({}).then(res => {
                $scope.currentvideo = res.videos.filter(v => v.id == deviceid)[0];
                addVideoHtml();
                getVideoPull(res);
                videoHandleManage();
            });
            $scope.$apply();
        }


        // 添加视频
        function addVideoHtml() {
            $('#videosContainer').html(
                `<a href="#" title="${$scope.currentvideo.monitorPointName}" style="
                            position:relative;
                            float:left;
                            display:block;
                            margin-left: ${($scope.winWidth - 800) / 2}px;
                            margin-top: 50px;
                            width: 700px;
                            height: 525px" 
                        id="player"></a>`
            );
        }

        // 刷新视频数据流
        function getVideoPull(res) {
            $http({
                method: "POST",
                url: res.VIDEO_URL,
                timeout: 4000,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                data: {
                    station_id: $scope.currentvideo.stId,
                    stream: [
                        {
                            name: $scope.currentvideo.monitorPointName,
                            source: $scope.currentvideo.monitorPointSource,
                            dest: $scope.currentvideo.monitorPointDest
                        }
                    ]
                },
            });
            if (!$scope.videoContinue) return;
            setTimeout(() => getVideoPull(res), 30 * 1000);
        }

        // 视频操作
        function videoHandleManage() {
            flowplayer("player", "vendor/flash/flowplayer/flowplayer-3.2.18.swf", {
                clip: {
                    url: $scope.currentvideo.monitorPointDest,
                    provider: 'rtmp',
                    live: true,
                    autoPlay: true,
                },
                plugins: {
                    rtmp: {
                        url: 'vendor/flash/flowplayer/flowplayer.rtmp-3.2.8.swf',
                        netConnectionUrl: $scope.currentvideo.monitorPointDest
                    },
                    controls: {
                        play: false, opacity: 0.5, scrubber: false, volume: false, mute: false, time: false,
                        tooltips: {
                            buttons: true,
                            fullscreen: '全屏',
                        }
                    }
                }
            });
        }


        $scope.$on('$destroy', () => {
            $scope.isDestroy = true;
            $scope.videoContinue = false;
        });
    });