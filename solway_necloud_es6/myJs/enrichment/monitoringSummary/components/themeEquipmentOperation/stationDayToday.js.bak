ajaxData(
    {
        equipmentCount: {
            name: 'GETequipmentDetailCompanyToday',
            data: {},
            later: true,
            onlyLatest: true,
        },
        // 矩阵视图
        getDeviceLayout: {
            name: 'GETdeviceLayoutV2',
            data: {},
            later: true,
            onlyLatest: true
        },
        rtmSingleStationComm: {
            name: 'GETRtmSingleStationComm',
            data: { },
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 电站 今日  时间  列表
        stationDayTodayTime: {
            name: 'GETPowerStationDayTodayTime',
            data: {},
            later: true,
            onlyLatest: true,
        },
        // 电站 今日  时间  图表
        stationDayTodayTime2: {
            name: 'GETPowerStationDayTodayTime2',
            data: {},
            later: true,
            onlyLatest: true,
        },
        // 电站 今日 发电能力
        query_station_day_dev_power_timelist_his: {
            name: 'GETquery_station_day_dev_power_timelist_his',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型
        getDeviceType: {
            name: 'GETgetDeviceType',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型 箱变 列表
        getRunRealDataBBoxChange: {
            name: 'GETDeviceStationGetRunRealDataBBoxChange',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型 逆变器 列表
        getRunRealDataBInverter: {
            name: 'GETDeviceStationGetRunRealDataBInverter',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型 汇流箱 列表
        getRunRealDataBJunction: {
            name: 'GETDeviceStationGetRunRealDataBJunction',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型 电表 列表
        getRunRealDataMeter: {
            name: 'GETRunRealDataMeter',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型 气象站 列表
        runRealDataWeather: {
            name: 'GETrunRealDataWeather',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 逆变器获取设备信息 用  serialnumber  获取 deviceId
        selectByConditionMap: {
            name: 'GETselectByConditionMap',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        //电站-今日-故障列表
        getStationFaultAlarmRtData: {
            name: 'GETgetStationFaultAlarmRtData',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 设备类型
        getDeviceType: {
            name: 'GETgetDeviceType',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备列表
        queryDeviceWithType: {
            name: 'GETqueryDeviceWithType',
            data: {},
            later: true
        },
        // 事件类型
        eventType: {
            name: 'GETBasedictionarySelectAll',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备日志 列表
        deviceRunList: {
            name: 'GETdeviceLogListRtmDay',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 日志id获取调整状态
        stateAdjustById: {
            name: 'GETstateAdjustById',
            data: {},
            later: true
        },
        // 设备日志 河流图
        deviceHisRiver: {
            name: 'GETdeviceRtmRiver',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备日志 趋势图
        deviceHisTrendChart: {
            name: 'GETdeviceRtmTrendChart',
            data: {},
            later: true,
            onlyLatest: true
        },
        checkStationSomeSvg: {
            name: 'GETcheckStationSomeSvg',
            data: {}
        }
    },
    {
        __serviceName__: 'themeEquipmentOperationStationDayTodayService'
    }
)('themeEquipmentOperationStationDayTodayCtrl', ['$scope', 'themeEquipmentOperationStationDayTodayService', 'actionRecord', '$interval', 'myAjaxData'], ($scope, myAjaxData, historicalRecord, $interval, myAjaxDataParent) => {
    // 初始化 scope
    $scope.initChildScope($scope, myAjaxData);


    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        let { 
            showShape, 
            currentDeviceType = '2', 
            tabIndex = 0, 
            checkboxStatus = [true, true, true, true, true, true],
            shadowFlag = false
        } = historicalRecord.get().themeEquipmentOperationStationDayToday || {};
        $scope.changeShowShape((tabIndex === 1 && $scope.currentClass === 'CompanyDayToday') ? 'list' : (showShape || 'chart'));
        const { dateType, dateTime } = historicalRecord.get();
        $scope.dateType = dateType;
        $scope.dateTime = dateTime;
        $scope.currentDeviceType = currentDeviceType;
        await $scope.dateUpdated();
        $scope.checkboxStatus = checkboxStatus;
        $scope.shadowFlag = shadowFlag;
        $scope.changeTab(tabIndex);
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await diffGetData();
        $scope.$apply();
    };

    // 切换电站 回调
    $scope.switchPowerCallback = () => {
        if ($scope.currentClass !== 'StationDayToday') return;
        $scope.checkStationSomeSvg.getData();
        $scope.getDeviceType.res = null;
        $scope.$broadcast("switchPowerCallback");
        setDataNull();
        $scope.queryDeviceWithType.res = null;
        diffGetData();
    };

    // 日期改变
    $scope.dateUpdated = async () => {
        if ($scope.currentClass !== 'StationDayToday') return;
        await myAjaxData.timeout(0);
        setDataNull();
        diffGetData();
    };

    // tab 切换
    $scope.changeTab = tabIndex => {
        if (tabIndex === $scope.tabIndex) return;
        $scope.tabIndex = tabIndex;
        if ($scope.showShape === 'chart2' && tabIndex !== 1) $scope.changeShowShape('chart');
        historicalRecord.set({
            themeEquipmentOperationStationDayToday: {
                ...historicalRecord.get().themeEquipmentOperationStationDayToday || {},
                tabIndex
            }
        });
        setDataNull();
        diffGetData();
    };

    // 切换显示形式  图表 or 列表
    $scope.changeShowShape = showShape => {
        if (showShape === $scope.showShape) return;
        $scope.showShape = showShape;
        historicalRecord.set({
            themeEquipmentOperationStationDayToday: {
                ...historicalRecord.get().themeEquipmentOperationStationDayToday || {},
                showShape
            }
        });
        if ($scope.tabIndex === 1 && $scope.showShape === 'chart') {
            $scope.getDeviceLayout.getData({ id: myAjaxDataParent.currentStationData.currentSTID });
            $scope.rtmSingleStationComm.getData({
                dateString: new Date().Format("yyyy-MM-dd"),
                stids: myAjaxDataParent.currentStationData.currentSTID
            });
        }
        setDataNull();
        diffGetData();
    };

    // 列表视图  切换 设备类型
    $scope.switchDeviceType = (type) => {
        historicalRecord.set({
            themeEquipmentOperationStationDayToday: {
                ...historicalRecord.get().themeEquipmentOperationStationDayToday || {},
                currentDeviceType: $scope.currentDeviceType = type || $scope.currentDeviceType
            }
        });
        if (type) $scope.column = [];
        $scope.diffDeviceTypeGetData();
    };

    // 复选框状态改变
    $scope.changeCheckboxStatus = (index, shadowFlag) => {
        if (shadowFlag) $scope.shadowFlag = false;
        if (index === 0) $scope.checkboxStatus.fill($scope.checkboxStatus[0]);
        else if (!$scope.checkboxStatus[index]) $scope.checkboxStatus[0] = false;
        else if ($scope.checkboxStatus.slice(1).every(v => v)) $scope.checkboxStatus[0] = true;
        historicalRecord.set({
            themeEquipmentOperationStationDayToday: {
                ...historicalRecord.get().themeEquipmentOperationStationDayToday || {},
                checkboxStatus: $scope.checkboxStatus
            }
        });
        $scope.diffDeviceTypeGetData();
    };

    // 逆变器 列表视图 点击 行
    $scope.showInformation = function (item, index) {
        $scope.$broadcast("equipmentPopUp", {
            stid: item.sid,
            eqid: item.did
        });
    };

    // 列表视图 接口请求
    $scope.diffDeviceTypeGetData = () => {
        const status = $scope.checkboxStatus.map((v, i) => v ? (
            '0' + (i > 2 ? i - 1 : i === 2 ? 7 : i)
        ) : v).filter(v => v !== false).join() + ($scope.shadowFlag ? ',05' : '');

        switch ($scope.currentDeviceType) {
            case '1':
                if ($scope.getRunRealDataBJunction.isLoding) return
                $scope.getRunRealDataBJunction.getData({
                    search: $scope.searchKey,
                    status,
                    pageIndex: $scope.searchKey === ($scope.getRunRealDataBJunction.reqData || {}).search ? ($scope.getRunRealDataBJunction.reqData || {}).pageIndex : 0
                });
                break;

            case '2':
                if ($scope.getRunRealDataBInverter.isLoding) return
                $scope.getRunRealDataBInverter.getData({
                    search: $scope.searchKey,
                    status,
                    pageIndex: $scope.searchKey === ($scope.getRunRealDataBInverter.reqData || {}).search ? ($scope.getRunRealDataBInverter.reqData || {}).pageIndex : 0
                });
                break;

            case '3':
                if ($scope.getRunRealDataBBoxChange.isLoding) return
                $scope.getRunRealDataBBoxChange.getData({
                    search: $scope.searchKey,
                    status,
                    pageIndex: $scope.searchKey === ($scope.getRunRealDataBBoxChange.reqData || {}).search ? ($scope.getRunRealDataBBoxChange.reqData || {}).pageIndex : 0
                });
                break;

            case '4':
                if ($scope.getRunRealDataMeter.isLoding) return
                $scope.getRunRealDataMeter.getData({
                    search: $scope.searchKey,
                    status,
                    pageIndex: $scope.searchKey === ($scope.getRunRealDataMeter.reqData || {}).search ? ($scope.getRunRealDataMeter.reqData || {}).pageIndex : 0
                });
                break;

            case '5':
                if ($scope.runRealDataWeather.isLoding) return
                $scope.runRealDataWeather.getData({
                    search: $scope.searchKey,
                    status: '00',
                    pageIndex: $scope.searchKey === ($scope.runRealDataWeather.reqData || {}).search ? ($scope.runRealDataWeather.reqData || {}).pageIndex : 0
                });
                break;

            default:
                break;
        }
    }
    // 判断 调用  对应 接口
    async function diffGetData() {
        if (!$scope.initComplete) return;
        await myAjaxData.timeout(0);
        const { currentClass, showShape, dateTime, tabIndex, dateType } = $scope;
        if (!currentClass.includes('DayToday')) $scope.column = [];
        if (tabIndex === 0 && showShape === 'chart') {
            $scope.stationDayTodayTime.res = null;
            $scope.stationDayTodayTime2.getData({
                queryType: 3,
                dateType: 3,
                date: dateTime.showDate,
                dataType: 2,
                stime: $scope.stationDayTodayTime2.res
                    ? $scope.stationDayTodayTime2.res.body.echarts_xaTime[$scope.stationDayTodayTime2.res.body.echarts_xaTime.length - 1].split(':').join('')
                    : 0,
            });
        } else if (tabIndex === 0 && showShape === 'list') {
            if ($scope.stationDayTodayTime.res) return;
            $scope.stationDayTodayTime.getData({
                queryType: 3,
                dateType: 3,
                date: dateTime.showDate,
                dataType: 1,
                stime: $scope.stationDayTodayTime.res
                    ? $scope.stationDayTodayTime.res.body.chartList[$scope.stationDayTodayTime.res.body.chartList.length - 1].xaTime.split(':').join('')
                    : 0,
            });
        } else if (tabIndex === 1 && showShape === 'list') {
            $scope.equipmentCount.getData({
                queryType: 3,
                dateType: 3,
                date: dateTime.showDate,
            });
            if ($scope.getDeviceType.res) {
                return $scope.switchDeviceType();
            };
            $scope.getDeviceType.getData({});
        } else if (tabIndex === 3) {
            $scope.query_station_day_dev_power_timelist_his.getData({
                queryCode: 'query_station_day_dev_power_timelist_his',
                queryType: 3,
                pgc: 0,
                date: dateTime.showDate
            });
        } else if (tabIndex === 4) {
            $scope.getStationFaultAlarmRtData.getData({
                // pageIndex: 0,
                // pageSize: 10
            });
        }
        else if (tabIndex === 5) {
            if (!$scope.eventType.res) {
                $scope.eventType.getData({ dictType: 'EVENT_TYPE' });
            }
            if (!$scope.getDeviceType.res) {
                const res = await $scope.getDeviceType.getData();
                $scope.deviceRunList.deviceType = ''; //res.data[0].devid;
            }
            if (!$scope.queryDeviceWithType.res) {
                if (showShape === 'list') {
                    $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType });
                } else if (showShape === 'chart2') {
                    $scope.deviceRunList.deviceType = $scope.deviceRunList.deviceType;
                    $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType || $scope.getDeviceType.res.data[0].devid });
                } else {
                    // if (myChart) {
                    //     echarts.dispose(myChart);
                    //     myChart = null;
                    // }
                    $scope.deviceRunList.deviceType = $scope.deviceRunList.deviceType;
                    $scope.deviceHisRiver.getData({
                        date: dateTime.showDate,
                        deviceType: $scope.deviceRunList.deviceType
                    });
                }
            } else {
                if (showShape === 'list') {
                    $scope.deviceRunList.getData({ date: dateTime.showDate, deviceType: $scope.deviceRunList.deviceType });
                } else if (showShape === 'chart') {
                    // if (myChart) {
                    //     echarts.dispose(myChart);
                    //     myChart = null;
                    // }
                    $scope.deviceHisRiver.getData({
                        date: dateTime.showDate,
                        deviceType: $scope.deviceRunList.deviceType
                    });
                } else if (showShape === 'chart2') {
                    if (!$scope.deviceRunList.deviceType) {
                        $scope.deviceRunList.deviceType = $scope.deviceRunList.deviceType;
                        $scope.queryDeviceWithType.getData({ type: $scope.getDeviceType.res.data[0].devid });
                    } else {
                        if (!$scope.deviceRunList.deviceId) {
                            $scope.deviceRunList.deviceId = $scope.queryDeviceWithType.res.body[0].serialNumber
                        }
                        $scope.deviceHisTrendChart.getData({
                            date: dateTime.showDate,
                            deviceType: $scope.deviceRunList.deviceType,
                            deviceId: $scope.deviceRunList.deviceId
                        });
                    }

                }
            }
        }

        $scope.$apply();
    };


    // 判断接线图，布局视图是否存在
    $scope.checkStationSomeSvg.subscribe(res => {
        if (!res.body.hasWiringDiagramSvg) {
            if ($scope.tabIndex === 2) $scope.changeTab(1);
            setTimeout(() => {
                $('#m-fdnl-hide').find('td').eq(2).hide();
            }, 200);
        } else {
            $('#m-fdnl-hide').find('td').eq(2).show();
        }

        if (!res.body.hasLayoutSvg) {
            if ($scope.tabIndex === 1 && $scope.showShape === 'chart2') $scope.changeShowShape('chart');
            setTimeout(() => {
                $('i.iconfont.icon-yuanxingbuju').hide();
            }, 200);
        } else {
            $('i.iconfont.icon-yuanxingbuju').show();
        }
    });

    // 电站 今日 设备 列表视图
    $scope.getDeviceType.getDataCallback = async (success, res) => {
        if (!success) return;
        if ($scope.tabIndex === 5) {
            // $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType || $scope.getDeviceType.res.data[0].devid });
            return
        };
        const { currentDeviceType } = $scope;
        const isChange = !res.data.some(v => v.devid === currentDeviceType);
        // $scope.getDeviceType.res.data = res.data.filter(v => (v.devid === '1' || v.devid === '2' || v.devid === '3' || v.devid === '4'));
        if (isChange) $scope.currentDeviceType = res.data[0].devid;
        await myAjaxData.timeout(0);
        $scope.$apply();
        $scope.switchDeviceType();
    };

    // 电站 今日 设备 列表视图 逆变器 列表
    $scope.getRunRealDataBInverter.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                dataIndex: 'statusDesc',
                title: '状态',
                width: '100px',
                sort: true,
                fixed: 'left',
                render(text, item, index) {
                    if (item.comm == '1') return '<span class="data-grey">通讯中断</span>';
                    else if (item.comm == '2') return `<span class="data-grey">${text || '初始化'}</span>`;
                    else if (item.comm == '0' && item.status == '1') return `<span class="data-red">${text}</span>`;
                    else if (item.comm == '0' && item.status == '2') return `<span class="data-yellow">${text}</span>`;
                    else return `<span>${text}</span>`;
                }
            },
            // {
            //     dataIndex: 'did',
            //     title: '编号',
            //     width: '60px',
            //     fixed: 'left',
            //     sort: true,
            // },
            {
                dataIndex: 'name',
                title: '名称',
                width: '120px',
                fixed: 'left',
                sort: true,
                render(text, item) {
                    return `<text style="padding:0 10px;color: #b2d8ff;${item.shadeFlag ? ' background:rgba(72,125,176,.8);' : ''}">${text}</text>`
                }
            },
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '150px',
                align: 'center',
                fixed: 'left',
                sort: true,
                render(text) {
                    return text ? `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>`: '';
                }
            }, 

        ].concat([
            {
                dataIndex: 'dcu',
                title: 'DC电压(V)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'dcc',
                title: 'DC电流(A)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'dcp',
                title: 'DC功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'acu',
                title: 'AC电压(V)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'acc',
                title: 'AC电流(A)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'acp',
                title: 'AC功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 't',
                title: '温度(℃)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'ef',
                title: '效率(%)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${(text * 100).toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'f',
                title: '频率(Hz)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'pf',
                title: '功率因数',
                width: '90px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'dw',
                title: '日发电量(度)',
                width: '120px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'tw',
                title: '总发电量(度)',
                width: '120px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
        ]).concat(new Array(32).fill('c').map((v, i) => ({
            dataIndex: v + (i + 1),
            title: `<span>${i + 1}</span>`,
            width: '50px',
            align: 'right',
            render(text, item, index) {
                return item.hasJB === '0' ? '' : `
                        <div style="background: ${item.shadowFlags && item.shadowFlags[i] ? 'rgba(72,125,176,.8)' : ''}">
                            <span class="${['handle3', 'data-red', 'data-yellow'][item.statuFlags && item.statuFlags[i]]}">${((item.statuFlags && item.statuFlags[i]) ? text.toFixed(2) : '-')}</span>
                        </div>
                        `
            }
        })));
    };
    // 电站 今日 设备 列表视图 箱变 列表
    $scope.getRunRealDataBBoxChange.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                dataIndex: 'statusDesc',
                title: '状态',
                width: '80px',
                sort: true,
                fixed: 'left',
                render(text, item, index) {
                    if (item.comm == '1') return '<span class="data-grey">通讯中断</span>';
                    else if (item.comm == '2') return `<span class="data-grey">${text || '初始化'}</span>`;
                    else if (item.comm == '0' && item.status == '1') return `<span class="data-red">${text}</span>`;
                    else if (item.comm == '0' && item.status == '2') return `<span class="data-yellow">${text}</span>`;
                    else return `<span>${text}</span>`;
                }
            },
            // {
            //     dataIndex: 'did',
            //     title: '编号',
            //     width: '60px',
            //     fixed: 'left',
            //     sort: true,
            // },
            {
                dataIndex: 'name',
                title: '名称',
                width: '120px',
                fixed: 'left',
                sort: true,
                render(text) {
                    return `<text style="color: #428bca;">${text}</text>`
                }
            },
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '140px',
                align: 'center',
                fixed: 'left',
                sort: true,
                render(text) {
                    return text ? `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>` : '';
                }
            }, {
                dataIndex: 'pa1',
                title: '绕组1A相有功功率(kW)',
                width: '150px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pb1',
                title: '绕组1B相有功功率(kW)',
                width: '150px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pc1',
                title: '绕组1C相有功功率(kW)',
                width: '150px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'qa1',
                title: '绕组1A相无功功率(kVar)',
                width: '160px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'qb1',
                title: '绕组1B相无功功率(kVar)',
                width: '160px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'qc1',
                title: '绕组1C相无功功率(kVar)',
                width: '160px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ca1',
                title: '绕组1A相电流(A)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'cb1',
                title: '绕组1B相电流(A)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'cc1',
                title: '绕组1C相电流(A)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ua1',
                title: '绕组1A相电压(V)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ub1',
                title: '绕组1B相电压(V)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'uc1',
                title: '绕组1C相电压(V)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'f1',
                title: '绕组1频率(Hz)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pf1',
                title: '绕组1功率因数',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'w1',
                title: '绕组1电量(kWh)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pa2',
                title: '绕组2A相有功功率(kW)',
                width: '150px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pb2',
                title: '绕组2B相有功功率(kW)',
                width: '150px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pc2',
                title: '绕组2C相有功功率(kW)',
                width: '150px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'qa2',
                title: '绕组2A相无功功率(kVar)',
                width: '160px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'qb2',
                title: '绕组2B相无功功率(kVar)',
                width: '160px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'qc2',
                title: '绕组2C相无功功率(kVar)',
                width: '160px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ca2',
                title: '绕组2A相电流(A)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'cb2',
                title: '绕组2B相电流(A)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'cc2',
                title: '绕组2C相电流(A)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ua2',
                title: '绕组2A相电压(V)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ub2',
                title: '绕组2B相电压(V)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'uc2',
                title: '绕组2C相电压(V)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'f2',
                title: '绕组2频率(Hz)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'pf2',
                title: '绕组2功率因数',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'w2',
                title: '绕组2电量(kWh)',
                width: '120px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'ta',
                title: 'A相温度(℃)',
                width: '80px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'tb',
                title: 'B相温度(℃)',
                width: '80px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 'tc',
                title: 'C相温度(℃)',
                width: '80px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }, {
                dataIndex: 't',
                title: '温度(℃)',
                width: '80px',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // },
                align: 'right'
            }
        ];
    };
    // 电站 今日 设备 列表视图 汇流箱 列表
    $scope.getRunRealDataBJunction.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                dataIndex: 'statusDesc',
                title: '状态',
                width: '80px',
                sort: true,
                fixed: 'left',
                render(text, item, index) {
                    if (item.comm == '1') return '<span class="data-grey">通讯中断</span>';
                    else if (item.comm == '2') return `<span class="data-grey">${text || '初始化'}</span>`;
                    else if (item.comm == '0' && item.status == '1') return `<span class="data-red">${text}</span>`;
                    else if (item.comm == '0' && item.status == '2') return `<span class="data-yellow">${text}</span>`;
                    else return `<span>${text}</span>`;
                }
            },
            // {
            //     dataIndex: 'did',
            //     title: '编号',
            //     width: '50px',
            //     fixed: 'left',
            //     sort: true,
            // },
            {
                dataIndex: 'name',
                title: '名称',
                width: '80px',
                fixed: 'left',
                sort: true,
                render(text, item) {
                    return `<text style="color: #428bca;${item.shadeFlag ? ' background:rgba(72,125,176,.8);' : ''}">${text}</text>`
                }
            },
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '100px',
                align: 'center',
                fixed: 'left',
                sort: true,
                render(text) {
                    return text ? `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>` : '';
                }
            }
        ].concat(new Array(32).fill('c').map((v, i) => ({
            dataIndex: v + (i + 1),
            title: `<span>${i + 1}</span>`,
            width: '40px',
            align: 'right',
            render(text, item, index) {
                return item.hasJB === '0' ? '' : `
                        <div style="background: ${item.shadowFlags && item.shadowFlags[i] ? 'rgba(72,125,176,.8)' : ''}">
                            <span class="${['handle3', 'data-red', 'data-yellow'][item.statuFlags && item.statuFlags[i]]}">${((item.statuFlags && item.statuFlags[i]) ? text.toFixed(2) : '-')}</span>
                        </div>
                        `
            }
        }))).concat([
            {
                dataIndex: 'k',
                title: '开关',
                width: '60px',
                align: 'center',
                // fixed: 'left',
                sort: true,
                render(text) {
                    return `
                        <span>${['无效', '无效', '闭合', '开启'][text]}</span>
                    `
                }
            },
            {
                dataIndex: 'arrester',
                title: '防雷器',
                width: '60px',
                align: 'center',
                // fixed: 'left',
                sort: true,
                render(text) {
                    return `
                        <span>${['无效', '无效', '正常', '异常'][text]}</span>
                    `
                }
            },
            {
                dataIndex: 'u',
                title: '电压(V)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'c',
                title: '电流(A)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'p',
                title: '功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 't',
                title: '温度(℃)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'ef',
                title: '效率(%)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return text && `<span>${(text * 100).toFixed(2)}</span>`
                }
            }
        ]);
    };
    // 电站 今日 设备 列表视图 电表 列表
    $scope.getRunRealDataMeter.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                dataIndex: 'statusDesc',
                title: '状态',
                width: '80px',
                sort: true,
                fixed: 'left',
                render(text, item, index) {
                    if (item.comm == '1') return '<span class="data-grey">通讯中断</span>';
                    else if (item.comm == '2') return `<span class="data-grey">${text || '初始化'}</span>`;
                    else if (item.comm == '0' && item.status == '1') return `<span class="data-red">${text}</span>`;
                    else if (item.comm == '0' && item.status == '2') return `<span class="data-yellow">${text}</span>`;
                    else return `<span>${text}</span>`;
                }
            },
            // {
            //     dataIndex: 'did',
            //     title: '编号',
            //     width: '50px',
            //     fixed: 'left',
            //     sort: true,
            // },
            {
                dataIndex: 'name',
                title: '名称',
                width: '120px',
                fixed: 'left',
                sort: true,
                render(text) {
                    return `<text style="color: #428bca;">${text}</text>`
                }
            },
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '100px',
                align: 'center',
                fixed: 'left',
                sort: true,
                render(text) {
                    return text ? `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>` : '';
                }
            },
            {
                dataIndex: 'w',
                title: '总电能(度)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'wp',
                title: '正向总电能(度)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            }, {
                dataIndex: 'wn',
                title: '反向总电能(度)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'ua',
                title: 'A相电压(V)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'ub',
                title: 'B相电压(V)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'uc',
                title: 'C相电压(V)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'ia',
                title: 'A相电流(A)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'ib',
                title: 'B相电流(A)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'ic',
                title: 'C相电流(A)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'pa',
                title: 'A相功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'pb',
                title: 'B相功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'pc',
                title: 'C相功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
            {
                dataIndex: 'p',
                title: '总有功功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,

                // render(text) {
                //     return `<span>${text.toFixed(2)}</span>`
                // }
            },
        ];
    };
    // 电站 今日 设备 列表视图 气象站 列表
    $scope.runRealDataWeather.subscribe(res => {
        $scope.column = [
            {
                dataIndex: 'statusDesc',
                title: '状态',
                width: '80px',
                sort: true,
                fixed: 'left',
                render(text, item, index) {
                    if (item.comm == '1') return '<span class="data-grey">通讯中断</span>';
                    else if (item.comm == '2') return `<span class="data-grey">${text || '初始化'}</span>`;
                    else if (item.comm == '0' && item.status == '1') return `<span class="data-red">${text}</span>`;
                    else if (item.comm == '0' && item.status == '2') return `<span class="data-yellow">${text}</span>`;
                    else return `<span>${text}</span>`;
                }
            },
            // {
            //     dataIndex: 'did',
            //     title: '编号',
            //     width: '50px',
            //     fixed: 'left',
            //     sort: true,
            // },
            {
                dataIndex: 'name',
                title: '名称',
                width: '120px',
                fixed: 'left',
                sort: true,
                render(text) {
                    return text && `<text style="color: #428bca;">${text}</text>`
                }
            },
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '130px',
                align: 'center',
                fixed: 'left',
                sort: true,
                render(text) {
                    return text ? `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>` : '';
                }
            },
            {
                dataIndex: 'lh',
                title: '水平面光照强度瞬时值(W/㎡)',
                width: '180px',
                align: 'right'
            }, {
                dataIndex: 'ls',
                title: '散射光照强度瞬时值(W/㎡)',
                width: '180px',
                align: 'right'
            }, {
                dataIndex: 'la',
                title: '斜面光照强度瞬时值(W/㎡)',
                width: '180px',
                align: 'right'
            }, {
                dataIndex: 'lhd',
                title: '水平面光照日累计(kWh)',
                width: '180px',
                align: 'right'
            }, {
                dataIndex: 'lsd',
                title: '散射光照日累计(kWh)',
                width: '180px',
                align: 'right'
            }, {
                dataIndex: 'lad',
                title: '斜面光照日累计(kWh)',
                width: '180px',
                align: 'right'
            }, {
                dataIndex: 'tm',
                title: '组件温度(℃)',
                width: '80px',
                align: 'right'
            }, {
                dataIndex: 'ta',
                title: '环境温度(℃)',
                width: '80px',
                align: 'right'
            }, {
                dataIndex: 'ws',
                title: '风速(m/s)',
                width: '80px',
                align: 'right'
            }, {
                dataIndex: 'wd',
                title: '风向(°)',
                width: '80px',
                align: 'right'
            }, {
                dataIndex: 'h2o',
                title: '湿度(%)',
                width: '80px',
                align: 'right',
            }, {
                dataIndex: 'p',
                title: '气压(kPa)',
                width: '80px',
                align: 'right'
            }
        ];
    });
    // 电站 今日 时间 列表 列表
    $scope.stationDayTodayTime.getDataCallback = (success, res) => {
        if (!success) return;
        const tempArr = res.body.chartList.slice(1);
        tempArr.isConcat = true;
        $scope.datasource = tempArr;
        $scope.column = [
            {
                title: '时间',
                dataIndex: 'xaTime',
                sort: true,
                width: '',
                align: 'center'
            },
            {
                title: '实发功率(kW)',
                dataIndex: 'p',
                sort: true,
                width: '',
                align: 'right',
            },
            {
                title: '理论功率(kW)',
                dataIndex: 'shd_p',
                sort: true,
                width: '',
                align: 'right',
            },
            {
                title: '光照强度(W/㎡)',
                dataIndex: 'sun',
                sort: true,
                width: '',
                align: 'right',
            }
        ];
    };
    // 电站 今日 时间 列表 图表
    const stationDayTodayTimeLineData = { xdata: [], line1: [], line2: [], line3: [] };
    $scope.stationDayTodayTime2.getDataCallback = (success, res) => {
        if (!success) return;
        const { xdata, line1, line2, line3 } = stationDayTodayTimeLineData;
        const length = xdata.length;
        $scope.xdata = stationDayTodayTimeLineData.xdata = xdata.slice(0, length - 1).concat(res.body.echarts_xaTime);
        $scope.ydatas = [[stationDayTodayTimeLineData.line1 = line1.slice(0, length - 1).concat(res.body.echarts_p),
        stationDayTodayTimeLineData.line2 = line2.slice(0, length - 1).concat(res.body.echarts_shd_p)],
        [stationDayTodayTimeLineData.line3 = line3.slice(0, length - 1).concat(res.body.echarts_sun)]];
    };


    // 电站 今日 发电能力
    $scope.query_station_day_dev_power_timelist_his.getDataCallback = (success, res) => {
        $scope.equipmentDetailLoading = false;
        if (!success) return;
        $scope.xdata = res.body.data.map(v => v.dtime);
        $scope.ydatas = [[res.body.data.map(v => v.clean_mark)], [res.body.data.map(v => v.pcpn)]];
    };


    // 设备弹出
    $scope.equipmentDetail = (item, index, event) => {
        if (!event.target.className.includes('clickable')) return;
        const { deviceSerialNnumber, deviceId, pstationid, deviceTypeCode: deviceTypeNow, hasJB, stid, eqid } = item;
        if (!deviceSerialNnumber) return;
        $scope.$broadcast("equipmentPopUp", {
            // deviceSerialNnumber,
            // deviceId,
            // pstationid,
            // deviceTypeNow,
            // hasJB,
            stid: stid || pstationid,
            eqid: eqid || deviceSerialNnumber
        });
    };

    //电站-故障列表
    $scope.getStationFaultAlarmRtData.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                title: '设备名称',
                width: '25%',
                dataIndex: 'name',
                sort: 'true',
                align: 'left',
                render(text) {
                    return `<span class="clickable">${text}</span>`
                }
            },
            {
                title: '故障类型',
                dataIndex: 'eventType',
                sort: 'true',
                align: 'center'
            },
            {
                title: '设备类型',
                dataIndex: 'deviceType',
                sort: 'true',
                align: 'center'
            },
            {
                title: '故障发生时间',
                dataIndex: 'sStartTime',
                sort: 'true',
                align: 'center'
            },
            {
                title: '故障描述',
                dataIndex: 'eventDesc',
                sort: 'true',
                align: 'center'
            },
            {
                title: '持续时间',
                dataIndex: 'hours',
                sort: 'true',
                align: 'center'
            },
            // {
            //     title: '处理详情',
            //     dataIndex: '',
            //     sort: 'true',
            //     align: 'right',
            //     render(text, item, index) {
            //         return `<span>待写</span>`
            //     }
            // }
        ];
    };

    $scope.queryDeviceWithType.typeChange = () => {
        $scope.deviceRunList.deviceId = '';
        if ($scope.showShape === 'chart') {
            $scope.deviceHisRiver.getData({ deviceType: $scope.deviceRunList.deviceType }); 
            if (!$scope.deviceRunList.deviceType) return
            $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType });
        } else {
            if (!$scope.deviceRunList.deviceType) return
            $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType });
        }
    };



    // 设备列表
    $scope.queryDeviceWithType.subscribe(res => {
        if ($scope.showShape === 'chart2') {
            $scope.deviceRunList.deviceId = res.body[0].serialNumber
            if (!$scope.deviceRunList.deviceType) $scope.deviceRunList.deviceType = $scope.getDeviceType.res.data[0].devid;
            $scope.deviceHisTrendChart.getData({
                date: $scope.dateTime.showDate,
                deviceType: $scope.deviceRunList.deviceType,
                deviceId: $scope.deviceRunList.deviceId
            });
        }
        if ($scope.showShape !== 'list') return;
        $scope.deviceRunList.deviceId = '';
        const { dateTime } = $scope;
        $scope.deviceRunList.getData({
            deviceId: '',
            deviceType: $scope.deviceRunList.deviceType,
            eventType: $scope.deviceRunList.eventType,
            pageIndex: 0,
            date: dateTime.showDate,
        });
    });
    // 设备日志
    $scope.deviceRunList.subscribe(res => {
        $scope.deviceRunList.column = [
            // {
            //     title: '序号',
            //     dataIndex: 'index',
            //     align: 'center',
            //     width: '50px',
            //     render(text, item, index) {
            //         return index + '';
            //     }
            // },
            {
                title: '发生时间',
                dataIndex: 'sStartTime',
                sort: true,
                align: 'center',
                width: '150px',
                render(text) {
                    return text && new Date(text).Format('yyyy-MM-dd hh:mm')
                }
            },
            {
                title: '消缺时间',
                dataIndex: 'sEndTime',
                sort: true,
                align: 'center',
                width: '150px',
                render(text) {
                    return text && new Date(text).Format('yyyy-MM-dd hh:mm')
                }
            },
            {
                title: '设备名称',
                dataIndex: 'deviceName',
                sort: true,
                align: 'left',
                render(text) {
                    return `<span class="clickable eq">${text}</span>`;
                }
            },
            {
                title: '事件类型',
                dataIndex: 'eventTypeStr',
                width: '100px',
                sort: true,
                render(text, item, index) {
                    return (text || '-') + '';
                }
            },
            {
                title: '事件描述',
                dataIndex: 'eventDesc',
                sort: true,
                align: 'left',
                width: '400px'
            },
            {
                title: '确认时间',
                dataIndex: 'sureTime',
                width: '135px',
                align: 'center',
                render: function (text, item, index) {
                    return text ? new Date(text).Format('yyyy-MM-dd hh:mm') : '';
                }
            },
            {
                title: '状态',
                dataIndex: 'handstatusStr',
                sort: true,
                width: '100px',
                align: 'center'
            },
            {
                title: '状态调整',
                dataIndex: 'operatorStatus',
                sort: true,
                width: '100px',
                align: 'center',
                render (text) {
                    return text ? '<span class="clickable look" style="color:#31d3c9;">查看</span>' : ''
                }
            },
        ];
    });

    $scope.switchDetailFullPage = () => {
        myChart && myChart.resize();
    };
    // 设备日志河流图
    let myChart;
    $scope.deviceHisRiver.subscribe(res => {
        // debugger
        if (myChart) {
            echarts.dispose(myChart);
            myChart = null;
        }
        myChart = echarts.init(document.getElementById('themeRiver'));
        const types = res.data.slice(0, 9).map(v => v[2]);
        const colorMap = res.legend.reduce((pre, curr, index) => (
            { ...pre, [curr]: ['#F75454', '#FFC939', '#58C471', '#34BFED', '#97B385', '#636363', '#000000', '#6E869E', '#E7E7E7'][index] }
        ), {});
        const color = types.map(v => colorMap[v]);
        color.push(color.shift());
        const option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    lineStyle: {
                        color: '#366090'
                    }
                },
            },
            animation: false,
            color,
            legend: {
                data: res.legend,
                inactiveColor: 'rgba(255,255,255,.2)',
                textStyle: {
                    fontSize: 12,
                    color: '#fffeff'
                },
            },
            singleAxis: {
                max: 'dataMax',
                top: 20,
                bottom: 20,
                type: 'time',
                axisPointer: {
                    animation: true,
                    label: {
                        show: true
                    }
                },
                splitLine: {
                    show: false
                },
                axisLine: {
                    lineStyle: {
                        color: '#366090' //坐标轴线线的颜色。
                    }
                },
                axisLabel: {
                    textStyle: {
                        color: '#fffeff'
                    }
                },
                axisTick: {
                    inside: true
                },
                nameTextStyle: {
                    color: '#fffeff'
                }
            },
            series: [
                {
                    type: 'themeRiver',
                    label: {
                        normal: {
                            show: false
                        }
                    },
                    data: res.data
                }
            ]
        };
        myChart.setOption(option, true);
        const fun = myChart.resize;
        myChart.resize = async () => {
            if ($scope.tabIndex !== 5) return;
            if ($scope.showShape !== 'chart2') return;
            await myAjaxData.timeout(16);
            fun();
        };
        window.addEventListener('resize', myChart.resize);
    });

    // 设备日志趋势图
    $scope.deviceHisTrendChart.subscribe(res => {
        $scope.deviceHisTrendChart.colorMap = {
            "停机": '#000000',
            "关机中": '#636363',
            "启动中": '#97B385',
            "待机": '#34BFED',
            "报警": '#FFC939',
            "故障": '#F75454',
            "未知": '#B4B4B4',
            "正常运行": '#58C471',
            "通讯中断": '#6E869E'
        };
        $scope.deviceHisTrendChart.mouseScroll = function (e) {
            if ($scope.tabIndex !== 5) return;
            if ($scope.showShape !== 'chart2') return;
            e = e || window.event;
            const $chart_scrollx = $('#chart_scrollx');
            const old_width = $chart_scrollx.width();

            if (e.wheelDelta) $chart_scrollx.width(old_width + (e.wheelDelta) / 120 * old_width / 10);
            else if (e.detail) $chart_scrollx.width(old_width + e.detail * -40 / 120 * old_width / 10);

            const width = $chart_scrollx.width();

            const old_scrollLeft = $chart_scrollx.parent()[0].scrollLeft;

            const scale_scrollLeft = width / (old_width / old_scrollLeft);

            const translateX = (e.x - 50) * (width / old_width) - (e.x - 50);

            if (!old_width) return;
            
            $chart_scrollx.parent()[0].scrollLeft = scale_scrollLeft + translateX;
        };
        document.addEventListener('DOMMouseScroll', $scope.deviceHisTrendChart.mouseScroll, false);
        window.onmousewheel = document.onmousewheel = $scope.deviceHisTrendChart.mouseScroll;
    });


    // 查看设备详情
    $scope.deviceRunList.trClick = (item, index, event) => {
        if (!event.target.className.includes('clickable')) return;
        if (event.target.className.includes('eq')) {
            $scope.$broadcast('equipmentPopUp', { stid: item.stId, eqid: item.deviceSerialNnumber })
        } else if (event.target.className.includes('look')) {
            $scope.deviceRunList.operatorStatus = true;
            $scope.stateAdjustById.getData({
                id: item.id
            })
        }
    };

    $scope.$on('$destroy', () => {
        myChart && echarts.dispose(myChart);
        myChart && window.removeEventListener('resize', myChart.resize);
        myChart = null;

        if ($scope.deviceHisTrendChart.mouseScroll) {
            document.removeEventListener('DOMMouseScroll', $scope.deviceHisTrendChart.mouseScroll);
            window.onmousewheel = document.onmousewheel = null;
        }
    });

    function setDataNull() {
        $scope.getDeviceLayout.res = null;
        $scope.rtmSingleStationComm.res = null;
        $scope.stationDayTodayTime.res = null;
        $scope.stationDayTodayTime2.res = null;
        $scope.getStationFaultAlarmRtData.res = null;
        $scope.query_station_day_dev_power_timelist_his.res = null;
        $scope.xdata = void 0;
        $scope.ydatas = void 0;
        $scope.column = [];
        stationDayTodayTimeLineData.xdata = [];
        stationDayTodayTimeLineData.line1 = [];
        stationDayTodayTimeLineData.line2 = [];
        stationDayTodayTimeLineData.line3 = [];
    }

    // 定时器  定时刷新接口
    const timer = $interval(() => diffGetData(), 10000);
    $scope.$on('$destroy', () => $interval.cancel(timer));

});