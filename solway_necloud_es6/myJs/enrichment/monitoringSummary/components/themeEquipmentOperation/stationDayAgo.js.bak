ajaxData(
    {
        //电站日功率时间列表（历史日
        stationDayAgoTimeList: {
            name: 'GETPowerStationDayAgoTimeList',
            data: {},
            later: true,
            onlyLatest: true,
        },
        //电站日功率时间曲线（历史日
        stationDayAgoTimeLine: {
            name: 'GETPowerStationDayAgoTimeLine',
            data: {},
            later: true,
            onlyLatest: true,
        },
        // 设备类型
        getDeviceType: {
            name: 'GETgetDeviceType',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备列表
        queryDeviceWithType: {
            name: 'GETqueryDeviceWithType',
            data: {},
            later: true
        },
        // 事件类型
        eventType: {
            name: 'GETBasedictionarySelectAll',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备日志 列表
        deviceRunList: {
            name: 'GETdeviceRunList',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备日志 河流图
        deviceHisRiver: {
            name: 'GETdeviceHisRiver',
            data: {},
            later: true,
            onlyLatest: true
        },
        // 设备日志 河流图
        deviceHisTrendChart: {
            name: 'GETdeviceHisTrendChart',
            data: {},
            later: true,
            onlyLatest: true
        },
    },
    {
        __serviceName__: 'themeEquipmentOperationStationDayAgoService'
    }
)('themeEquipmentOperationStationDayAgoCtrl', ['$scope', 'themeEquipmentOperationStationDayAgoService', 'actionRecord'], ($scope, myAjaxData, historicalRecord) => {
    // 初始化 scope
    $scope.initChildScope($scope, myAjaxData);


    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        let { showShape = 'chart', tabIndex = 0 } = historicalRecord.get().themeEquipmentOperationStationDayAgo || {};
        $scope.changeShowShape(showShape);
        const { dateType, dateTime } = historicalRecord.get();
        $scope.dateType = dateType;
        $scope.dateTime = dateTime;
        await $scope.dateUpdated();
        $scope.changeTab(tabIndex);
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await diffGetData();
        $scope.$apply();
    };

    // 切换电站 回调
    $scope.switchPowerCallback = () => {
        if ($scope.currentClass !== 'StationDayAgo') return;
        $scope.column = [];
        diffGetData();
    };

    // 日期改变
    $scope.dateUpdated = async () => {
        if ($scope.currentClass !== 'StationDayAgo') return;
        await myAjaxData.timeout(0);
        if ($scope.dateType !== 0) return;
        diffGetData();
    };

    // 切换显示形式  图表 or 列表
    $scope.changeShowShape = showShape => {
        if (showShape === $scope.showShape) return;
        $scope.showShape = showShape;
        historicalRecord.set({
            themeEquipmentOperationStationDayAgo: {
                ...historicalRecord.get().themeEquipmentOperationStationDayAgo || {},
                showShape
            }
        });
        diffGetData();
    };

    // tab 切换
    $scope.changeTab = tabIndex => {
        $scope.tabIndex = tabIndex;
        historicalRecord.set({
            themeEquipmentOperationStationDayAgo: {
                ...historicalRecord.get().themeEquipmentOperationStationDayAgo || {},
                tabIndex
            }
        });
        diffGetData();
    };

    // 判断 调用  对应 接口
    async function diffGetData() {
        if (!$scope.initComplete) return;
        await myAjaxData.timeout(0);
        $scope.xdata = void 0;
        $scope.ydatas = void 0;
        $scope.column = [];
        $scope.stationDayAgoTimeList.res = null;
        $scope.stationDayAgoTimeLine.res = null;
        const { currentClass, showShape, dateTime, tabIndex, dateType } = $scope;
        if (showShape === 'list' && tabIndex === 0) {
            $scope.stationDayAgoTimeList.getData({
                queryType: 3,
                dateType: 3,
                date: dateTime.showDate
            });
        } else if (showShape === 'chart' && tabIndex === 0) {
            $scope.stationDayAgoTimeLine.getData({
                queryType: 3,
                dateType: 3,
                date: dateTime.showDate
            });
        }
        else if (tabIndex === 1) {
            if (!$scope.eventType.res) {
                $scope.eventType.getData({ dictType: 'EVENT_TYPE' });
            }
            if (!$scope.getDeviceType.res) {
                const res = await $scope.getDeviceType.getData();
                $scope.deviceRunList.deviceType = ''; //res.data[0].devid;
                $scope.$apply();
            }
            if (!$scope.queryDeviceWithType.res) {
                if (showShape === 'list') {
                    $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType });
                } else if (showShape === 'chart2') {
                    $scope.deviceRunList.deviceType = $scope.getDeviceType.res.data[0].devid;
                    $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType || $scope.getDeviceType.res.data[0].devid });
                } else {
                    if (myChart) {
                        echarts.dispose(myChart);
                        myChart = null;
                    }
                    $scope.deviceHisRiver.getData({
                        date: dateTime.showDate,
                        deviceType: $scope.deviceRunList.deviceType
                    });
                }
            } else {
                if (showShape === 'list') {
                    $scope.deviceRunList.getData({ date: dateTime.showDate, pageIndex: 0 });
                } else if (showShape === 'chart') {
                    if (myChart) {
                        echarts.dispose(myChart);
                        myChart = null;
                    }
                    $scope.deviceHisRiver.getData({
                        date: dateTime.showDate,
                        deviceType: $scope.deviceRunList.deviceType
                    });
                } else if (showShape === 'chart2') {
                    if (!$scope.deviceRunList.deviceType) {
                        $scope.deviceRunList.deviceType = $scope.getDeviceType.res.data[0].devid;
                        await $scope.queryDeviceWithType.getData({ type: $scope.deviceRunList.deviceType || $scope.getDeviceType.res.data[0].devid });
                        $scope.$apply();
                    } else {
                        if (!$scope.deviceRunList.deviceId) {
                            $scope.deviceRunList.deviceId = $scope.queryDeviceWithType.res.body[0].serialNumber
                        }
                        $scope.deviceHisTrendChart.getData({
                            date: dateTime.showDate,
                            deviceType: $scope.deviceRunList.deviceType,
                            deviceId: $scope.deviceRunList.deviceId
                        });
                    }

                }
            }
        }
    };
    // 电站  历史日   时间   列表
    $scope.stationDayAgoTimeList.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                title: '时间',
                dataIndex: 'time',
                sort: true,
                width: '',
                align: 'center'
            },
            {
                title: '实发功率(kW)',
                dataIndex: 'real_curve',
                sort: true,
                width: '',
                align: 'right',
            },
            {
                title: '理论功率(kW)',
                dataIndex: 'shd_curve',
                sort: true,
                width: '',
                align: 'right',
            },
            {
                title: '光照强度(W/㎡)',
                dataIndex: 'sun_curve',
                sort: true,
                width: '',
                align: 'right',
            }
        ];
    };
    // 电站  历史日   时间   曲线
    $scope.stationDayAgoTimeLine.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.xdata = res.body.x;
        $scope.ydatas = [[res.body.real_curve, res.body.shd_curve], [res.body.sun_curve]]
    };

    // 设备列表
    $scope.queryDeviceWithType.subscribe(res => {
        if ($scope.showShape === 'chart2') {
            $scope.deviceRunList.deviceId = res.body[0].serialNumber
            $scope.deviceHisTrendChart.getData({
                date: $scope.dateTime.showDate,
                deviceType: $scope.deviceRunList.deviceType,
                deviceId: $scope.deviceRunList.deviceId
            });
        }
        if ($scope.showShape !== 'list') return;
        $scope.deviceRunList.deviceId = '';
        const { dateTime } = $scope;
        $scope.deviceRunList.getData({
            deviceId: '',
            deviceType: $scope.deviceRunList.deviceType,
            eventType: $scope.deviceRunList.eventType,
            pageIndex: 0,
            date: dateTime.showDate,
        });
    });
    // 设备日志
    $scope.deviceRunList.subscribe(res => {
        $scope.deviceRunList.column = [
            {
                title: '发生时间',
                dataIndex: 'sStartTime',
                sort: true,
                align: 'center',
                width: '150px',
                render(text) {
                    return text && new Date(text).Format('yyyy-MM-dd hh:mm')
                }
            },
            {
                title: '消缺时间',
                dataIndex: 'sEndTime',
                sort: true,
                align: 'center',
                width: '150px',
                render(text) {
                    return text && new Date(text).Format('yyyy-MM-dd hh:mm')
                }
            },
            {
                title: '设备名称',
                dataIndex: 'devicename',
                sort: true,
                align: 'left',
                render(text) {
                    return `<span class="clickable">${text}</span>`;
                }
            },
            {
                title: '事件类型',
                dataIndex: 'faultclassStr',
                width: '100px',
                sort: true,
                render(text, item, index) {
                    return (text || '-') + '';
                }
            },
            {
                title: '事件描述',
                dataIndex: 'eventDesc',
                sort: true,
                align: 'left',
                width: '400px'
            },
            {
                title: '确认时间',
                dataIndex: 'sureTime',
                width: '135px',
                align: 'center',
                render: function (text, item, index) {
                    return text ? new Date(text).Format('yyyy-MM-dd hh:mm') : '';
                }
            },
            {
                title: '状态',
                dataIndex: 'handstatusStr',
                sort: true,
                align: 'center'
            },
        ];
    });

    $scope.switchDetailFullPage = () => {
        myChart && myChart.resize();
    };
    // 设备日志河流图
    let myChart;
    $scope.deviceHisRiver.subscribe(res => {
        myChart = myChart || echarts.init(document.getElementById('themeRiver'));
        const types = res.data.slice(0, 9).map(v => v[2]);
        const colorMap = ["故障", "报警", "正常运行", "待机", "启动中", "关机中", "停机", "通讯中断", "未知"].reduce((pre, curr, index) => (
            { ...pre, [curr]: ['#F75454', '#FFC939', '#58C471', '#34BFED', '#97B385', '#636363', '#000000', '#6E869E', '#E7E7E7'][index] }
        ), {});
        const color = types.map(v => colorMap[v]);
        color.push(color.shift());
        // debugger
        const option = {
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    lineStyle: {
                        color: '#366090'
                    }
                },
            },
            color,
            legend: {
                data: res.legend,
                textStyle: {
                    fontSize: 12,
                    color: '#fffeff'
                },
            },
            singleAxis: {
                max: 'dataMax',
                top: 20,
                bottom: 20,
                type: 'time',
                axisPointer: {
                    animation: true,
                    label: {
                        show: true
                    }
                },
                splitLine: {
                    show: false
                },
                axisLine: {
                    lineStyle: {
                        color: '#366090' //坐标轴线线的颜色。
                    }
                },
                axisLabel: {
                    textStyle: {
                        color: '#fffeff'
                    }
                },
                axisTick: {
                    inside: true
                },
                nameTextStyle: {
                    color: '#fffeff'
                }
            },
            series: [
                {
                    type: 'themeRiver',
                    label: {
                        normal: {
                            show: false
                        }
                    },
                    data: res.data
                }
            ]
        };
        myChart.setOption(option, true);
        const fun = myChart.resize;
        myChart.resize = async () => {
            await myAjaxData.timeout(16);
            fun();
        };
        window.addEventListener('resize', myChart.resize);
    });

    // 设备日志趋势图
    $scope.deviceHisTrendChart.subscribe(res => {
        $scope.deviceHisTrendChart.colorMap = {
            "停机": '#000000',
            "关机中": '#636363',
            "启动中": '#97B385',
            "待机": '#34BFED',
            "报警": '#FFC939',
            "故障": '#F75454',
            "未知": '#B4B4B4',
            "正常运行": '#58C471',
            "通讯中断": '#6E869E'
        };
        $scope.deviceHisTrendChart.mouseScroll = function (e) {
            e = e || window.event;
            const $chart_scrollx = $('#chart_scrollx');
            const old_width = $chart_scrollx.width();

            if (e.wheelDelta) $chart_scrollx.width(old_width + (e.wheelDelta) / 120 * old_width / 10);
            else if (e.detail) $chart_scrollx.width(old_width + e.detail * -40 / 120 * old_width / 10);

            const width = $chart_scrollx.width();

            const old_scrollLeft = $chart_scrollx.parent()[0].scrollLeft;

            const scale_scrollLeft = width / (old_width / old_scrollLeft);

            const translateX = (e.x - 50) * (width / old_width) - (e.x - 50);

            if (!old_width) return;

            $chart_scrollx.parent()[0].scrollLeft = scale_scrollLeft + translateX;
        };
        document.addEventListener('DOMMouseScroll', $scope.deviceHisTrendChart.mouseScroll, false);
        window.onmousewheel = document.onmousewheel = $scope.deviceHisTrendChart.mouseScroll;
    });


    // 查看设备详情
    $scope.deviceRunList.trClick = (item, index, event) => {
        if (!event.target.className.includes('clickable')) return;
        $scope.$broadcast('equipmentPopUp', { stid: item.pstationid, eqid: item.deviceSerialNnumber })
    };

    $scope.$on('$destroy', () => {
        myChart && echarts.dispose(myChart);
        myChart && window.removeEventListener('resize', myChart.resize);
        myChart = null;

        if ($scope.deviceHisTrendChart.mouseScroll) {
            document.removeEventListener('DOMMouseScroll', $scope.deviceHisTrendChart.mouseScroll);
            window.onmousewheel = document.onmousewheel = null;
        }
    });

});