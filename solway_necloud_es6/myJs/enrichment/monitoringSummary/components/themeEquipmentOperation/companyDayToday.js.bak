ajaxData(
    {
        // 公司今日 时间 列表
        companyDayTodayTime: {
            name: 'GETPowerCompanyDayTodayTime',
            data: { },
            later: true,
            onlyLatest: true,
            // sameTimeOnce: true,
        },
        // 公司今日 时间 图表
        companyDayTodayTime2: {
            name: 'GETPowerCompanyDayTodayTime2',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        //集团-今日 电站
        companyToday: {
            name: 'GETequipmentDetailCompanyToday',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 列表视图  获取 设备 类型
        getDeviceType: {
            name: 'GETgetDeviceType',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        //集团-今日 设备
        runRealDataBInverter: {
            name: 'GETrunRealDataBInverter',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
        // 逆变器获取设备信息 用  serialnumber  获取 deviceId
        selectByConditionMap: {
            name: 'GETselectByConditionMap',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true,
        },
    }, 
    {
        __serviceName__: 'themeEquipmentOperationCompanyDayTodayService'
    }
)('themeEquipmentOperationCompanyDayTodayCtrl', ['$scope', 'themeEquipmentOperationCompanyDayTodayService', 'actionRecord', '$interval'], ($scope, myAjaxData, historicalRecord, $interval) => {
    // 初始化 scope
    $scope.initChildScope($scope, myAjaxData);

    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        let { showShape = 'chart', currentDeviceType = '2', tabIndex = 0, checkboxStatus = [true, true, true, true, true, true] } = historicalRecord.get().themeEquipmentOperationCompanyDayToday || {};
        const { dateType, dateTime } = historicalRecord.get();
        $scope.dateType = dateType;
        $scope.dateTime = dateTime;
        $scope.changeShowShape(showShape);
        $scope.currentDeviceType = currentDeviceType;
        // await $scope.dateUpdated();
        $scope.checkboxStatus = checkboxStatus;
        $scope.changeTab(tabIndex);
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await diffGetData();
        $scope.$apply();
    };

    // 切换电站 回调
    $scope.switchPowerCallback = () => {
        if ($scope.currentClass !== 'CompanyDayToday') return;
        setDataNull();
        return diffGetData();
    };

    // 点击电站名  跳转到电站页面
    $scope.trClick = (item, index, event) => {
        if (!event.target.className.includes('clickable')) return;
        $scope.reloadParentPage({
            stationData: {
                dataType: 0,
                id: item.stid,
                isGroup: "0",
                stClass: '01'
            }
        });
    };


    // 切换显示形式  图表 or 列表
    $scope.changeShowShape = showShape => {
        $scope.showShape = showShape;
        historicalRecord.set({
            themeEquipmentOperationCompanyDayToday: {
                ...historicalRecord.get().themeEquipmentOperationCompanyDayToday || {},
                showShape
            }
        });
        setDataNull();
        return diffGetData();
    };


    // tab 切换
    $scope.changeTab = tabIndex => {
        $scope.tabIndex = tabIndex;
        historicalRecord.set({
            themeEquipmentOperationCompanyDayToday: {
                ...historicalRecord.get().themeEquipmentOperationCompanyDayToday || {},
                tabIndex
            }
        });
        setDataNull();
        return diffGetData();
    };

    // 列表视图  切换 设备类型
    $scope.switchDeviceType = () => {
        historicalRecord.set({
            themeEquipmentOperationStationDayToday: {
                ...historicalRecord.get().themeEquipmentOperationStationDayToday || {},
                currentDeviceType: $scope.currentDeviceType
            }
        });
        $scope.diffDeviceTypeGetData();
    };

    // 复选框状态改变
    $scope.changeCheckboxStatus = index => {
        if (index === 0) $scope.checkboxStatus.fill($scope.checkboxStatus[0]);
        else if (!$scope.checkboxStatus[index]) $scope.checkboxStatus[0] = false;
        else if ($scope.checkboxStatus.slice(1).every(v => v)) $scope.checkboxStatus[0] = true;
        historicalRecord.set({
            themeEquipmentOperationStationDayToday: {
                ...historicalRecord.get().themeEquipmentOperationStationDayToday || {},
                checkboxStatus: $scope.checkboxStatus
            }
        });
        $scope.diffDeviceTypeGetData();
    };

    // 列表视图 接口请求
    $scope.diffDeviceTypeGetData = () => {
        switch ($scope.currentDeviceType) {
            case '1':
                // $scope.getRunRealDataBBoxChange.getData({
                //     search: $scope.searchKey,
                //     status: $scope.checkboxStatus.map((v, i) => v ? '0' + i : v).filter(v => v !== false).join()
                // });
                break;

            case '2':
                if ($scope.runRealDataBInverter.isLoding) return
                $scope.runRealDataBInverter.getData({
                    search: $scope.searchKey,
                    status: $scope.checkboxStatus[0] ? '00' : $scope.checkboxStatus.map((v, i) => v ? '0' + i : v).filter(v => v !== false).join()
                });
                break;

            case '3':
                // $scope.getRunRealDataBJunction.getData({
                //     search: $scope.searchKey,
                //     status: $scope.checkboxStatus.map((v, i) => v ? '0' + i : v).filter(v => v !== false).join()
                // });
                break;

            default:
                break;
        }
    }

    // 逆变器 列表视图 点击 行
    $scope.showInformation = function (item, index, event) {
        // if (event.target.className.includes('clickable')) {
        //     $scope.reloadParentPage({
        //         stationData: {
        //             dataType: 0,
        //             id: item.sid,
        //             isGroup: "0",
        //             stClass: '01'
        //         }
        //     });
        // }
        const { did: serialnumber, sid: pstationid } = item;
        $scope.selectByConditionMap.getData({
            stid: pstationid,
            sn: serialnumber
        }).then(function (result) {
            if (result) showHistoryData_byRTMDeviceLogId(pstationid, result.id, serialnumber, '2', result.hasJB);
        });
    };

    // 箱变 列表视图 点击 行
    // $scope.showBoxChangeData = (item, index) => {
    //     $scope.showHistoryData_byRTMDeviceLogId(pstationid, result.id, serialnumber, '3');
    // };

    // 汇流箱 列表视图 点击 行
    // $scope.toJunctionBoxMonitor = (item, index) => {
    //     $scope.showHistoryData_byRTMDeviceLogId(pstationid, result.id, serialnumber, '1');
    // };

    //设备  弹窗
    function showHistoryData_byRTMDeviceLogId(pstationid, deviceId, deviceSerialNnumber, deviceTypeNow, hasJB) {
        const res = { deviceSerialNnumber, deviceId, pstationid, deviceTypeNow, defaultShowPage: '2', hasJB };
        $scope.$broadcast("equipmentPopUp", res);
    };

    function diffGetData() {
        if ($scope.currentClass !== 'CompanyDayToday') return;
        const {tabIndex, showShape, dateTime} = $scope;
        if (tabIndex === 0) {
            if (showShape === 'list') {
                if ($scope.companyDayTodayTime.res) return;
                $scope.companyDayTodayTime.getData({
                    queryType: 1,
                    dateType: 3,
                    date: dateTime.showDate,
                    dataType: 1,
                    stime: 0,
                });
            } else if (showShape === 'chart') {
                $scope.companyDayTodayTime2.getData({
                    queryType: 1,
                    dateType: 3,
                    date: dateTime.showDate,
                    dataType: 2,
                    stime: $scope.companyDayTodayTime2.res
                        ? $scope.companyDayTodayTime2.res.body.echarts_xaTime[$scope.companyDayTodayTime2.res.body.echarts_xaTime.length - 1].split(':').join('')
                        : 0,
                });
            }
        } else if (tabIndex === 1) {
            $scope.companyToday.getData({
                queryType: 1,
                dateType: 3,
                date: dateTime.showDate
            });
        } else if (tabIndex === 2) {
            $scope.getDeviceType.getData({});
        }
    }

    // 公司 今日 时间 列表
    $scope.companyDayTodayTime.getDataCallback = (success, res) => {
        if (!success) return;
        const tempArr = res.body.chartList.slice(1);
        tempArr.isConcat = true;
        $scope.datasource = tempArr;
        $scope.column = [
            {
                title: '时间',
                dataIndex: 'xaTime',
                sort: true,
                width: '',
                align: 'center'
            },
            {
                title: '实发功率(kW)',
                dataIndex: 'p',
                sort: true,
                width: '',
                align: 'right',
            },
            {
                title: '应发功率(kW)',
                dataIndex: 'shd_p',
                sort: true,
                width: '',
                align: 'right',
            },
            {
                title: '光照强度(W/㎡)',
                dataIndex: 'sun',
                sort: true,
                width: '',
                align: 'right',
            }
        ];
    }
    // 公司 今日 时间 图表
    const companyDayTodayTimeLineData = { xdata: [], line1: [], line2: [], line3: [] };
    $scope.companyDayTodayTime2.getDataCallback = (success, res) => {
        if (!success) return;
        const { xdata, line1, line2, line3 } = companyDayTodayTimeLineData;
        const length = xdata.length;
        $scope.xdata = companyDayTodayTimeLineData.xdata = xdata.slice(0, length - 1).concat(res.body.echarts_xaTime);
        $scope.ydatas = [[companyDayTodayTimeLineData.line1 = line1.slice(0, length - 1).concat(res.body.echarts_p),
        companyDayTodayTimeLineData.line2 = line2.slice(0, length - 1).concat(res.body.echarts_shd_p)],
        [companyDayTodayTimeLineData.line3 = line3.slice(0, length - 1).concat(res.body.echarts_sun)]];
    };

    //集团当日
    $scope.companyToday.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                title: '电站名称',
                width: '25%',
                dataIndex: 'stName',
                align: 'left',
                style: 'position:relative;',
                render(text, item, index) {
                    if (item.st_comm == 1) return (`<span class="clickable">${text}</span>` || '') + '<i title="通讯中断" class="iconfont icon-icon-life-alarm-copy" style="color: #9d9d9d;cursor:pointer;font-size:32px;position:absolute;top:0;right: 1em;line-height: 50px;"></i>';
                    else if (item.st_comm == 2) return (`<span class="clickable">${text}</span>` || '') + '<i title="通讯初始化" class="iconfont icon-icon-life-alarm-copy" style="color: #9d9d9d;cursor:pointer;font-size:32px;position:absolute;top:0;right: 1em;line-height: 50px;"></i>';
                    else if (item.st_status == 99) return (`<span class="clickable">${text}</span>` || '') + '<i title="正常" class="iconfont icon-icon-life-alarm-copy" style="color: #52b876;cursor:pointer;font-size:32px;position:absolute;top:0;right: 1em;line-height: 50px;"></i>';
                    else if (item.st_status == 1) return (`<span class="clickable">${text}</span>` || '') + '<i title="故障" class="iconfont icon-icon-life-alarm-copy" style="color: #ff6161;cursor:pointer;font-size:32px;position:absolute;top:0;right: 1em;line-height: 50px;"></i>';
                    else if (item.st_status == 2) return (`<span class="clickable">${text}</span>` || '') + '<i title="报警" class="iconfont icon-icon-life-alarm-copy" style="color: #be9856;cursor:pointer;font-size:32px;position:absolute;top:0;right: 1em;line-height: 50px;"></i>';
                    return (`<span class="clickable">${text}</span>` || '') + `<i title="正常" class="iconfont icon-icon-life-alarm-copy" style="color: #52b876;cursor:pointer;font-size:32px;position:absolute;top:0;right: 1em;line-height: 50px;"></i>`;
                }
            },
            {
                title: '总台数',
                dataIndex: 'deviceCount',
                // sort: 'true',
                align: 'right',
                // render(text, item, index) {
                //     return `<span>${item.comm + item.fault + item.maintain + item.run + item.wait || ''}</span>`
                // }
            },
            {
                title: '运行台数',
                dataIndex: 'run',
                sort: 'true',
                align: 'right',
                render(text, item) {
                    return item.st_comm == 1 ? '-' : text + ''
                }
            },
            {
                title: '报警台数',
                dataIndex: 'alarm',
                sort: 'true',
                align: 'right',
                render(text, item) {
                    return item.st_comm == 1 ? '-' : text + ''
                }
            },
            {
                title: '待机',
                dataIndex: 'wait',
                sort: 'true',
                align: 'right',
                render(text, item) {
                    return item.st_comm == 1 ? '-' : text + ''
                }
            },
            {
                title: '故障',
                dataIndex: 'fault',
                sort: 'true',
                align: 'right',
                render(text, item) {
                    return item.st_comm == 1 ? '-' : text + ''
                }
            },
            {
                title: '维护',
                dataIndex: 'maintain',
                sort: 'true',
                align: 'right',
                render(text, item) {
                    return item.st_comm == 1 ? '-' : text + ''
                }
            },
            {
                title: '离线',
                dataIndex: 'comm',
                sort: 'true',
                align: 'right',
                render(text, item) {
                    return item.st_comm == 1 ? '-' : text + ''
                }
            }
        ];
    };

    // 电站 今日 设备 列表视图
    $scope.getDeviceType.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.getDeviceType.res.data = [{devid: 2, devtype: '逆变器'}]
        // const { currentDeviceType } = $scope;
        // const isChange = !res.data.some(v => v.devid === currentDeviceType);
        // if (isChange) $scope.currentDeviceType = res.data[0].devid;
        $scope.switchDeviceType();
    };

    // 电站 今日 设备 列表视图 逆变器 列表
    $scope.runRealDataBInverter.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.column = [
            {
                title: '电站',
                dataIndex: 'stationName',
                width: '150px',
                sort: true,
                fixed: 'left',
                render(text) {
                    return `<span class="clickable">${text}</span>`;
                }
            },
            {
                dataIndex: 'statusDesc',
                title: '状态',
                width: '80px',
                sort: true,
                fixed: 'left',
                render(text, item, index) {
                    if (item.comm == '1') return '<span class="data-grey">通讯中断</span>';
                    else if (item.comm == '2') return `<span class="data-grey">${text}</span>`;
                    else if (item.comm == '0' && item.status == '1') return `<span class="data-red">${text}</span>`;
                    else if (item.comm == '0' && item.status == '2') return `<span class="data-yellow">${text}</span>`;
                    else return `<span>${text}</span>`;
                }
            },
            {
                dataIndex: 'did',
                title: '编号',
                width: '60px',
                fixed: 'left',
                sort: true,
            },
            {
                dataIndex: 'name',
                title: '名称',
                width: '120px',
                fixed: 'left',
                sort: true,
                render(text,item) {
                    return `<text style="color: #428bca;${item.shadeFlag ? ' background:#ccc;' : ''}">${text}</text>`
                }
            },
            {
                dataIndex: 'dtime',
                title: '时间',
                width: '130px',
                align: 'center',
                sort: true,
                render(text) {
                    if (!text) return '';
                    return `<text>${new Date(text * 1000).Format('yyyy-MM-dd hh:mm:ss')}</text>`
                }
            }, {
                dataIndex: 'dcu',
                title: 'DC电压(V)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'dcc',
                title: 'DC电流(A)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'dcp',
                title: 'DC功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'acu',
                title: 'AC电压(V)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'acc',
                title: 'AC电流(A)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'acp',
                title: 'AC功率(kW)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 't',
                title: '温度(℃)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'ef',
                title: '效率(%)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${(text * 100).toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'f',
                title: '频率(Hz)',
                width: '80px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'pf',
                title: '功率因数',
                width: '90px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'dw',
                title: '日发电量(度)',
                width: '120px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            }, {
                dataIndex: 'tw',
                title: '总发电量(度)',
                width: '120px',
                align: 'right',
                sort: true,
                render(text) {
                    return `<span>${text.toFixed(2)}</span>`
                }
            },

        ]
        .concat(new Array(20).fill('c').map((v, i) => ({
            dataIndex: v + (i + 1),
            title: `<span>${i + 1}</span>`,
            width: '80px',
            align: 'right',
            render(text, item, index) {
                return item.hasJB === '0' ? '' : `
                        <div style="background: ${item.shadowFlags && item.shadowFlags[i] ? 'rgba(0, 0, 0,0.3)' : ''}">
                            <span class="${['handle3', 'data-red', 'data-yellow'][item.statuFlags && item.statuFlags[i]]}">${((item.statuFlags && item.statuFlags[i]) ? text.toFixed(2) : '-')}</span>
                        </div>
                        `
            }
        })));
    };
    function setDataNull() {
        $scope.column = [];
        $scope.xdata = void 0;
        $scope.ydatas = void 0;
        companyDayTodayTimeLineData.xdata = [];
        companyDayTodayTimeLineData.line1 = [];
        companyDayTodayTimeLineData.line2 = [];
        companyDayTodayTimeLineData.line3 = [];
        $scope.companyDayTodayTime.res = null;
        $scope.companyDayTodayTime2.res = null;
        $scope.companyToday.res = null;
        $scope.runRealDataBInverter.res = null;
    }

    // 定时器  定时刷新接口
    const timer = $interval(() => diffGetData(), 10000);
    $scope.$on('$destroy', () => {
        $interval.cancel(timer);
    });

});