ajaxData(
    {
        // 报表展示  tab
        tab: {
            name: 'GETreportShowTab',
            data: {},
            later: true
        },
        // 报表展示 view
        view: {
            name: 'GETreportShowView',
            data: {},
            later: true
        },
        // 报表展示  判断用户是否订阅
        checkSubscribe: {
            name: 'GETreportShowUserCheckSubscribe',
            data: {},
            later: true
        },
        // 报表展示  用户订阅操作
        subscribe: {
            name: 'reportShowUserDoSubscribe',
            data: {},
            later: true
        }
    }, {
        __serviceName__: 'themeGeneralService',
    }
)('themeGeneralCtrl', ['$scope', 'themeGeneralService', 'actionRecord', 'toaster'], ($scope, myAjaxData, historicalRecord, toaster) => {
    /// 初始化 scope
    $scope.initChildScope($scope, myAjaxData);

    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        let { timeRange } = historicalRecord.get().themeGeneral || {};
        const { dateType, dateTime } = historicalRecord.get();
        $scope.dateType = dateType;
        $scope.dateTime = dateTime;
        await $scope.dateUpdated();
        $scope.timeRange = timeRange;
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await myAjaxData.timeout(0);
        getTabData();
        // await $scope.diffGetData(true);
        $scope.$apply();
    };

    // 日期改变
    $scope.dateUpdated = async () => {
        await myAjaxData.timeout(0);
        let getDataType = 0;
        if (!Object.is($scope.dateType, historicalRecord.get().dateType)) getDataType = 1;
        if (getDataType) getTabData();
        else $scope.changeTab2($scope.tabIndex);
    };

    // 切换电站
    $scope.switchPowerCallback = () => getTabData();


    // 获取tab
    function getTabData() {
        if ($scope.beforeLoading) return;
        const { dataType, _dateType } = $scope;
        return $scope.tab.getData({
            useSt: dataType === 1 ? 1 : 0,
            reportType: [4, 2, 1, null, 3][_dateType]
        });
    }

    // 默认操作 选择第一个tab 第一个子tab
    $scope.tab.getDataCallback = (success, res) => {
        if (!success) return;
        if (!res.body) toaster.pop("error", "", res.msg);
        return res.body && res.body[0] && $scope.changeTab1(0);
    };

    // 切换 第一层 tab
    $scope.changeTab1 = index => {
        $scope.timeRange = index;
        historicalRecord.set({ timeRange: index });
        $scope.checkSubscribe.getData({ tabId: $scope.tab.res.body[index].id });
        return $scope.changeTab2($scope.tab.res.body[index].subTabs[(historicalRecord.get().tab2Index || 0)] ? (historicalRecord.get().tab2Index || 0) : 0);
    };

    // 切换 第二次 tab
    $scope.changeTab2 = index => {
        if (index === void 0) return;
        $scope.tabIndex = index;
        historicalRecord.set({ tab2Index: index });
        $scope.timeType = [null, 1, 2, 3, 4][$scope.tab.res.body[$scope.timeRange].reportType];
        const { timeType, _dateTime, dataType, _weekTimeStart, _weekTimeEnd } = $scope;
        const o = {
            dateType: timeType,
            subTabId: $scope.tab.res.body[$scope.timeRange].subTabs[index].id,
            style: 0,
            useSt: dataType === 1 ? 1 : 0,
            date: timeType === 3 ? _weekTimeStart.showDate + ',' + _weekTimeEnd.showDate : _dateTime.showDate
        };
        // $scope.iframSrc = window.interface.GETreportShowView + '?' + $.param(o);
        $scope.view.getData(o);
    };

    // view 处理
    $scope.view.getDataCallback = (success, res) => {
        if (!success) return;
        return document.getElementById('automaticReportView').innerHTML = res;
    };

    $scope.clickSubscribe = () => {
        const { tab, timeRange, checkSubscribe } = $scope;
        if (checkSubscribe.res.body.doSubscribe !== 1) return toaster.pop("error", "", "订阅失败：" + '该报表不可订阅');
        return $scope.subscribe.getData({ tabId: tab.res.body[timeRange].id, subscribeAble: checkSubscribe.res.body.hasSubscribe ? 0 : 1 });
    };

    // 订阅操作 后处理
    $scope.subscribe.getDataCallback = (success, res) => {
        if (!success) return;
        if (res.code !== 0) return toaster.pop("error", "", "error:" + res.msg);
        toaster.pop("success", "", res.msg);
        return $scope.checkSubscribe.getData({});
    };

});