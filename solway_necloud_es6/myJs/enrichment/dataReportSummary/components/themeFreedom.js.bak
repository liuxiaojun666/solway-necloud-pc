ajaxData(
    {
        freeRptPage: {
            name: 'GETfreeRptPage',
            data: {},
            later: true,
        },
        freeRptSubGetRptSubList: {
            name: 'GETfreeRptSubGetRptSubList',
            data: {},
            later: true,
        },
        freeRptSubscribe: {
            name: 'freeRptSubscribe',
            data: {},
            later: true,
        },
        freeRptUnSubscribe: {
            name: 'freeRptUnSubscribe',
            data: {},
            later: true,
        },
        rptTplList: {
            name: 'GETrptTplList',
            data: {},
            later: true,
        },
        freeRptTplSetEnable: {
            name: 'freeRptTplSetEnable',
            data: {},
            later: true,
        },
        freeRptTplDeleteBatch: {
            name: 'freeRptTplDeleteBatch',
            data: {},
            later: true,
        },
        updateRptTpl: {
            name: 'updateRptTpl',
            data: {},
            later: true,
        },
        insertRptTpl: {
            name: 'insertRptTpl',
            data: {},
            later: true,
        },
    }, {
        __serviceName__: 'themeFreedomService',
        getDateArr(reportType, startDate) {
            const func = str => str.split('-').join().split(' ').join().split(':').join().split(',').map(v => v.length === 1 ? '0' + v : v);
            if (reportType == '1') {
                if (startDate) return [null, ...func(startDate), null];
                else return [null, '01', '01', '00', '00', null];
            } else if (reportType == '2') {
                if (startDate) return [null, null, ...func(startDate), null];
                else return [null, null, '01', '00', '00', null];
            } else if (reportType == '4') {
                if (startDate) return [null, null, null, ...func(startDate), null];
                else return [null, null, null, '00', '00', null];
            } else if (reportType == '3') {
                if (startDate) return [null, null, null, ...func(startDate.substr(0, startDate.length - 2)), null];
                else return [null, null, null, '00', '00', null];
            }
        }
    }
)('themeFreedomCtrl', ['$scope', 'themeFreedomService', 'actionRecord', 'toaster'], ($scope, myAjaxData, historicalRecord, toaster) => {
    /// 初始化 scope
    $scope.initChildScope($scope, myAjaxData);

    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        let { timeRange } = historicalRecord.get().themeFreedom || {};
        const { dateType, dateTime } = historicalRecord.get();
        $scope.dateType = dateType;
        $scope.dateTime = dateTime;
        await $scope.dateUpdated();
        $scope.timeRange = timeRange;
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await myAjaxData.timeout(0);
        $scope.freeRptPage.beforGetData();
        $scope.$apply();
    };

    // 日期改变
    $scope.dateUpdated = async () => {
        await myAjaxData.timeout(0);
        $scope.$apply();
        $scope.freeRptPage.beforGetData();
    };

    // 切换电站
    $scope.switchPowerCallback = () => {
        getTabData();
        $scope.freeRptPage.beforGetData();
    }

    // 列表 接口请求
    $scope.freeRptPage.beforGetData = () => {
        if (!$scope.initComplete) return;
        $scope.column = [];
        const { _dateType, _dateTime, keywords } = $scope;
        $scope.freeRptPage.getData({
            pageIndex: 0,
            pageSize: 10,
            dateType: [3, 2, 1][_dateType],
            queryDate: _dateTime.showDate,
            keywords
        });
    };

    // 列表 接口 返回
    $scope.freeRptPage.subscribe(res => {

        $scope.column = [
            {
                title: '报表名称',
                dataIndex: 'name',
                sort: true,
                align: 'center',
            },
            {
                title: '报表日期',
                dataIndex: 'rdate',
                sort: true,
                align: 'center',
                render(text) {
                    return new Date(text).Format('yyyy-MM-dd');
                }
            },
            {
                title: '生成时间',
                dataIndex: 'ctime',
                sort: true,
                align: 'center',
                render(text) {
                    return new Date(text).Format('yyyy-MM-dd');
                }
            },
            {
                title: '操作',
                dataIndex: 'fid',
                sort: true,
                align: 'center',
                render(text) {
                    return `<a target="_blank" style="color: #428bca;" href="minio/download.htm?id=${text}">下载</a>`;
                }
            },
        ];
    });

    // 订阅报表列表 接口返回
    $scope.freeRptSubGetRptSubList.subscribe(res => {
        $scope.subscribeReportColumn = [
            {
                title: '报表名称',
                dataIndex: 'name',
                width: '80%',
                align: 'left'
            },
            {
                title: '操作',
                dataIndex: 'sub_id',
                width: '20%',
                align: 'center',
                render(text) {
                    return `<span class="clickable subscribe ${text && 'enable'}">
                        <i class="clickable iconfont icon-xuanzhong"></i>
                    </span><span class="clickable text">订阅</span>`
                }
            }
        ];
    });

    // 订阅 取消订阅 操作
    $scope.subscribeReportTrClick = (item, index, event) => {
        if (!event.target.className.includes('clickable')) return;
        if ($scope.freeRptSubscribe.isLoding || $scope.freeRptSubGetRptSubList.isLoding) return;
        $scope[item.sub_id ? 'freeRptUnSubscribe' : 'freeRptSubscribe'].getData(
            item.sub_id ? { id: item.sub_id } : { tplId: item.id }
        ).then(res => {
            if (res.code !== 0) return;
            $scope.freeRptSubGetRptSubList.getData();
        });
    };

    // 模板管理 列表 处理
    $scope.rptTplList.subscribe(async res => {
        $scope.rptTplList.rendered = false;
        await myAjaxData.timeout(0);
        $scope.rptTplList.res.body = res.body.map(v => ({
            ...v,
            dateArr: myAjaxData.config.getDateArr(v.reportType, v.startDate),
        }));
        $scope.$apply();
        await myAjaxData.timeout(100);
        $scope.rptTplList.rendered = true;
    });

    // 日期规则更新 函数
    $scope.datePickerUpdated = async (dateStr, dateArr, attrs) => {
        if (!$scope.rptTplList.rendered) return;
        await myAjaxData.timeout(0);
        $scope.rptTplList.res.body[attrs.index].startDate = dateStr;
        $scope.rptTplList.res.body[attrs.index].changed = true;
        $scope.$apply();
    };

    // 模板启用 和 作废 接口处理
    $scope.freeRptTplSetEnable.subscribe(res => {
        if (res.code !== 0 )return;
        $scope.rptTplList.getData();
    });

    // 模板删除 接口处理
    $scope.freeRptTplDeleteBatch.subscribe(res => {
        if (res.code !== 0 ) return;
        $scope.rptTplList.getData();
    });

    // 模板更新  完成
    $scope.updateRptTpl.subscribe(res => {
        if (res.code !== 0) return;
        $scope.rptTplList.getData();
    });

    // 文件上传
    $scope.uploadFile = e => {
        $scope.insertRptTpl.getData({
            name: e.files[0].name,
            excelFile: e.files[0],
            reportType: 4
        });
    };

});