ajaxData({
    manufacturerList: {
        name: 'GETmanufacturerList',
        data: {},
        later: true,
        onlyLatest: true
    },
    selectByManuList: {
        name: 'GETselectByManuList',
        data: {},
        later: true,
        onlyLatest: true
    },
    commProtocolList: {
        name: 'GETcommProtocolList',
        data: {},
        later: true,
        onlyLatest: true
    },
    statusTypeListSolor: {
        name: 'GETstatusTypeListSolor',
        data: {},
        later: true,
        onlyLatest: true
    },
    statusTypeListWind: {
        name: 'GETstatusTypeListWind',
        data: {},
        later: true,
        onlyLatest: true
    },
    updateProtocol: {
        name: 'POSTupdateProtocol',
        data: {},
        later: true,
        saveParam: false,
        sameTimeOnce:true
    },
    statusCodeListByProduct: {
        name: 'GETstatusCodeListByProduct',
        data: {},
        later: true,
        onlyLatest: true
    },
    faultCodeList: {
        name: 'GETfaultCodeList',
        data: {},
        later: true,
        onlyLatest: true
    },
    deleteBatchFaultCode: {
        name: 'POSTdeleteBatchFaultCode',
        data: {},
        later: true,
        sameTimeOnce:true
    },
    hasFaultCode: {
        name: 'GEThasFaultCode',
        data: {},
        later: true,
        onlyLatest: true
    },
    deleteHasFaultCode: {
        name: 'POSTdeleteHasFaultCode',
        data: {},
        later: true,
        sameTimeOnce:true
    },
    measurePointTemplates: {
        name: 'GETmeasurePointTemplates',
        data: {},
        later: true,
        onlyLatest: true
    },
    measurePointsGenerate: {
        name: 'POSTmeasurePointsGenerate',
        data: {},
        later: true,
        saveParam: false,
        sameTimeOnce:true
    },
    existMeasurePoints: {
        name: 'GETexistMeasurePoints',
        data: {},
        later: true,
        onlyLatest: true
    },
    
}, {
        __serviceName__: 'editProtocolTplService',
    })('editProtocolTplCtrl', ['$scope', 'editProtocolTplService', 'actionRecord', '$timeout', 'toaster', '$http'], ($scope, myAjaxData, historicalRecord, $timeout, toaster, $http) => {

        let reg = /^0[x,X][0-9a-fA-F]{0,}$/;
        let regWord = /[a-z,A-Z,\uFF00-\uFFEF,\u4E00-\u9FA5\uF900-\uFA2D]+/;
        let integerReg1 = /^-?[0-9]\d*$/; //整数

        $scope.setTitleFault = () =>{
            const setTitleMap = {'1':'故障代码','2':'故障索引'}
            $scope.faultTitle = setTitleMap[$scope.formData['faultdiagnosistype']]
            $scope.columnFaultCode.splice(1,1,{
                title: $scope.faultTitle,
                dataIndex: ($scope.formData['faultdiagnosistype'] == '1')?'faultCode':'faultCodeIndex',
                sort: !0,
                align: 'center'
            })
        }
        
        //状态分类列表
        const getStatusTypeList = type => {
            $scope.stationType = type;  //电站类型（光伏还是风电）
            if (type == 'wind') {
                $scope.statusTypeListWind.getData({ deviceType: $scope.deviceType }).then(res => {
                    $scope.statusTypeList = res;
                })
                $scope.columnFaultCode.splice(5,0,{
                    title: '故障级别',
                    dataIndex: 'faultClassName',
                    sort: !0,
                    align: 'center'
                })
            } else if (type == 'solar') {
                $scope.statusTypeListSolor.getData().then(res => {
                    $scope.statusTypeList = res;
                })
            }
        }

        //生产厂商、
        const initManufactureData = () => {
            $scope.manufacturerList.getData().then(res => {
                $scope.deviceManufacturerList = res;
                if (res && res.length) {
                    $scope.deviceManufacturerList.unshift({ id: null, manufname: '-请选择-' });
                }
            });
        }

        //产品型号
        $scope.changemanufacturer = () => {
            $scope.selectByManuList.getData({
                manufid: $scope.formData.manufid,
            }).then(res => {
                $scope.productList = res;
                if (res && res.length) {
                    $scope.productList.unshift({ id: null, productname: '-请选择-' });
                }
            });
        }


        //选择产品
        $scope.changeProduct = () => {
            $scope.statusTypeList = [];
            angular.forEach($scope.productList, (item) => {
                if (item.id == $scope.formData.productid) {
                    $scope.deviceType = item.devicetype;
                    $scope.formData.productidStr = item.productname;
                }
            });

            if ($scope.deviceType == '17' || $scope.deviceType == '18') {//风电状态列表
                $scope.changeJudgeType('1')
                getStatusTypeList('wind');
            } else {//光伏
                getStatusTypeList('solar');
            }
        }

        //通讯规约
        const initCommProtoList = () => {
            $scope.commProtocolList.getData().then(res => {
                $scope.protocolf = res;
            })
        }

        //编辑时，通过产品ID获取状态码配置的列表
        const getStatusCodeList = id => {
            $scope.statusdata = [];
            $scope.statusCodeListByProduct.getData({ protocolid: id }).then(res => {
                res.map((item,index) =>{
                    item.faultlevel = Number(item.faultlevel)
                    if(item.faultcode == 0 && item.faultcodeindex == 0){
                        $scope.statusdata.push({
                            serNum:index,
                            faultcodeindex:'-1',
                            faultcode:item.faultcode,
                            faultlevel:item.faultlevel,
                            faultdesc:item.faultdesc
                        });
                    }else{
                        $scope.statusdata.push({
                            serNum:index,
                            faultcodeindex:item.faultcodeindex,
                            faultcode:item.faultcode,
                            faultlevel:item.faultlevel,
                            faultdesc:item.faultdesc
                        });
                    }
                    
                })
                $scope.count = res.length;
            });
        }

        //下载故障码附件
		const download = (id, index,filename)=>{
            // window.open(window.baseUrl+"/PFaultCodeReal/downloadAttachment.htm?id=" + id + "&index=" + index);
            $solway.download({
                url:window.baseUrl+"/PFaultCodeReal/downloadAttachment.htm?id=" + id + "&index=" + index,
                filename,
            })
        }
        
        //初始化table列
        const initTableColumn = () =>{
            $scope.columnFaultCode = [
                {
                    title: '<label class="i-checks m-b-none"><input type="checkbox"><i style="background:transparent;"></i></label>',
                    dataIndex: '',
                    width: '60px',
                    align: 'center',
                    checkboxName: 'faultCodeCheckboxName',
                    render(text, record, index) {
                        return '<label class="i-checks m-b-none"><input data-id="' + record.id + '" name="faultCodeCheckboxName" type="checkbox" /><i style="background:transparent;"></i></label>';
                    }
                }, {
                    title: '故障索引',
                    dataIndex: 'faultCode',
                    sort: !0,
                    align: 'center'
                }, {
                    title: '故障中文描述',
                    dataIndex: 'faultDescCH',
                    align: 'center',
    
                }, {
                    title: '故障分类',
                    dataIndex: 'faultTypeName',
                    sort: !0,
                    align: 'center'
                }, {
                    title: '故障原因及处理流程',
                    dataIndex: 'faultHandle',
                    sort: !0,
                    align: 'center'
                }, {
                    title: '附件',
                    dataIndex: 'prostr',
                    sort: !0,
                    align: 'center',
                    render(text, item, index) {
                        let returnStr = '';
                        if (item.file1) {
                            returnStr += ` <i class="fa fa-paperclip attachment-active" id="1" ></i>`
                        } else {
                            returnStr += ` <i class="fa fa-paperclip" ></i>`
                        }
                        if (item.file2) {
                            returnStr += ` <i class="fa fa-paperclip attachment-active" id="2"></i>`
                        } else {
                            returnStr += ` <i class="fa fa-paperclip" ></i>`
                        }
                        if (item.file3) {
                            returnStr += ` <i class="fa fa-paperclip attachment-active" id="3"></i>`
                        } else {
                            returnStr += ` <i class="fa fa-paperclip" ></i>`
                        }
                        return returnStr;
                    }
                }, {
                    title: '操作',
                    dataIndex: '',
                    align: 'center',
                    sort: !0,
                    render(text, item, index) {
                        return `
                    <div class="clearfix">
                        <i class="iconfont edit icon-bianji-copy" style="font-size: 18px;color:#1ddabe;margin-right:15px;" ></i>
                        <i class="iconfont edit icon-shanchu1" style="font-size: 18px;color:#ff8080;"></i>
                    </div>
                    `
                    },
                }
            ]
        }

        $scope.$on("editProtocolBroad", async (e, data) => {
            let item = data.item;

            initTableColumn();
            initManufactureData();
            initCommProtoList();

            $scope.formData = {};
            await myAjaxData.timeout(0);
            $scope.$apply();

            $scope.editDisabled = false;
            $scope.tabActive = 'statusCode';//tab默认显示状态码
            if (item) {
                $scope.deviceType = item.deviceType;
                $scope.showFaultTab = true;//编辑时，可显示故障码tab等
                $scope.formData = {
                    id: item.id,
                    faultdiagnosistype: item.faultdiagnosistype,
                    manufid: item.manufid,
                    productid: item.productid,
                    commid: item.commid,
                    name: item.name,
                    isdefault: item.isdefault,
                    prostr: item.prostr,
                    statusdiagnosistype: item.statusdiagnosistype
                }

                if (data.copyId) {
                    $scope.formData['copyId'] = data.copyId;
                    $scope.formData['id'] = '';
                    $scope.formData['name'] = '';
                    $scope.showFaultTab = false;
                } else {
                    $scope.editDisabled = true;
                }
                
                getStatusCodeList(item.id);
                $scope.changemanufacturer();
                await myAjaxData.timeout(0);
                $scope.$apply();
                $scope.changeProduct();
            } else {
                $scope.showFaultTab = false;
                $scope.stationType = '';
                $scope.formData.isdefault = '1';
                $scope.formData.statusdiagnosistype = '2';
                $scope.formData.faultdiagnosistype = '2';//新增时，不操作故障码，默认传2
                
                $scope.statusdata = [];
                $scope.count = 0;
                $scope.statusdata.push({ 'serNum': $scope.count, "faultcodeindex": "", "faultcode": "", "faultlevel": "", "faultdesc": "" });
                $scope.count++;
            }

            $scope.setTitleFault();
        });

        //切换tab,状态码或者故障码
        $scope.changeCodeTypeTab = type => {
            $scope.tabActive = type;
            if (type == 'faultCode') {
                $scope.getFaultCodeList();
            }else if(type == 'measurePoint'){
                $scope.existMeasurePoints.res = null;
                getExistMeasurePoints();
                getMeasurePointTemplateList();
            }
        }

        //切换整型，或者按位------状态码
        $scope.changeJudgeType = type => {
            $scope.formData.statusdiagnosistype = type;
        }

        const deleteExistFaultData = () =>{
            $scope.deleteHasFaultCode.getData({protocolID:$scope.formData.id}).then(res=>{
                if(res.code == 0){
                    toaster.pop('success','',res.message);
                    $scope.getFaultCodeList();
                }else{
                    toaster.pop('error', '', '删除失败')
                }
            });
        }

        //切换整型，或者按位------故障码
        $scope.changeJudgeTypeFault = type => {
            $scope.hasFaultCode.getData({protocolID:$scope.formData.id}).then(res=>{
                if (!res) {
					if (confirm("切换故障码类型，将清空数据已填的故障码数据。\n确认清空吗？")) {
                        deleteExistFaultData();
                        $scope.formData.faultdiagnosistype = type;
					} else {
                        if($scope.formData.faultdiagnosistype == type) return;
                        $scope.formData.faultdiagnosistype = (type=='1'?'2':'1');
                        $("input[name='faultdiagnosistype']").eq($scope.formData.faultdiagnosistype-1).prop("checked",true);
					}
				} else {
                    $scope.formData.faultdiagnosistype = type
                }
                $scope.save(true);
                $scope.setTitleFault();
            });
        }

        //增加一行
        $scope.addLine = () => {
            $scope.statusdata.push({ 'serNum': $scope.count, "faultcodeindex": "", "faultcode": "", "faultlevel": "", "faultdesc": "" });
            $scope.count++;
        }

        //删除一行
        $scope.deleteLine = serNum => {
            for (let i = 0, list = $scope.statusdata; i < list.length; i++) {
                if (list[i].serNum == serNum) {
                    $scope.statusdata.splice(i, 1)
                }
            }
        }

        //十进制-》十六进制
        $scope.hexadecimal = num => {
            if (reg.test(num)) {
                return num;
            } if (regWord.test(num)) {
                return "请输入一个正确的数字";
            } else {
                return num ? '0x'+Number(num).toString(16) : '';
            }
        }

        //保存
        $scope.save = noCallback => {
            if($scope.saveLoading) return;

            if (!$solway.formValidation($scope.formData, '.editProtocolTple', toaster)) return;//校验非空

            if($scope.stationType == 'wind'){
                $scope.formData['faultdiagnosistype'] = 1;
                $scope.formData['statusdiagnosistype'] = 1;
            }

            let statusdata = angular.copy($scope.statusdata);
            
            for(let i=0;i<statusdata.length;i++){
                if($scope.formData['statusdiagnosistype'] == '1'){  //整型
                    if(!statusdata[i].faultcode || !statusdata[i].faultlevel) {
                        toaster.pop('error', '', '状态码和状态分类均不能为空')
                        return;
                    }
                    if(reg.test(statusdata[i].faultcode)){//16进制
                        statusdata[i].faultcode = parseInt(statusdata[i].faultcode,16)
                    }else if(regWord.test(statusdata[i].faultcode)){
                        toaster.pop('error','','状态码必须是一个数字');
                        return;
                    }
                    statusdata[i].faultcodeindex = '0';
                }else if($scope.formData['statusdiagnosistype'] == '2'){ //按位
                    if(!statusdata[i].faultlevel) {
                        toaster.pop('error', '', '状态分类均不能为空')
                        return;
                    }
                    if(!integerReg1.test(Number(statusdata[i].faultcodeindex))){
                        toaster.pop('error','','索引位置必须是一个整数');
                        return;
                    }
                    if(statusdata[i].faultcodeindex == '-1'){
                        statusdata[i].faultcodeindex = '0';
                        statusdata[i].faultcode = '0';
                    }else{
                        statusdata[i].faultcode = '1';
                    }
                    
                }
            }

            // 对故障码或者索引，若两边空格，要去掉，以免使用时报错
            statusdata.map(v => {
                v.faultcode = v.faultcode.trim()
                v.faultcodeindex = (v.faultcodeindex + '').trim()
            })

            $scope.formData['statusdata'] = JSON.stringify(statusdata);
            $scope.formData['isdefault'] = $('input[name="isdefault"]:checked').val();

            let noRepeatCodeArr = statusdata.map(item => item.faultcode+item.faultcodeindex)
            if(new Set(noRepeatCodeArr).size !== noRepeatCodeArr.length){
                toaster.pop('error','','状态码值不可以重复');
                return;
            }

            $scope.saveLoading = true;
            $scope.updateProtocol.getData($scope.formData).then(res => {
                $scope.saveLoading = false;
                if (res.id) {
                    if(noCallback) return;
                    toaster.pop('success', '', '保存成功');
                    $scope.$emit('editCallback');
                } else {
                    toaster.pop('error', '', '保存失败')
                }
            });
        }


        //故障码列表
        $scope.getFaultCodeList = () => {
            $scope.faultCodeList.getData({
                pageIndex: 0,
                protocolID: $scope.formData.id,
                keyWords: $scope.keyWordsFaultcode
            })
        }

        const deleteBatch = ids =>{
            $scope.deleteBatchFaultCode.getData({ids:ids.join(',')}).then(res=>{
                if (res.code == '0'){
                    toaster.pop('success','','删除成功');
                    $scope.getFaultCodeList();
                }else{
                    toaster.pop('error', '','删除失败')
                }
            });
        }

        $scope.deleteBatchFaultCodeData = () =>{
            let ids = [];
            $("input[name='faultCodeCheckboxName']:checked").each(function () {
                ids.push(this.dataset.id);
            });
            if (ids.length == 0){
                alert("请选择删除的数据");
                return;
            }
            $solway.confirm({ message: '确定删除所选的数据？' }, () => {
                deleteBatch(ids)
            });
        }

        $scope.trClickFaultCode = (item, index, event) => {
            if(event.target.className.includes('icon-bianji-copy')) {
                $scope.editFaultCodeTpl = true;
                $scope.$broadcast('editFaultCodeBroad',{'item':item});
            }else if(event.target.className.includes('icon-shanchu1')) {
                $solway.confirm({ message: '确定删除此条数据？' }, () => {
                    deleteBatch([item.id])
                });
            }else if(event.target.className.includes('attachment-active')){
                download(item.id,event.target.id,item.fileName1);
            }
        };

        //故障码新增
        $scope.newFaultCode = () =>{
            $scope.editFaultCodeTpl = true;
            $scope.$broadcast('editFaultCodeBroad',{'item':'','protocolID':$scope.formData.id});
        }

        //取消
        $scope.cancel = () => {
            $scope.$emit('cancel');
        }


        //编辑故障码成功回调
        $scope.$on('editFaultCodeCallback',function(){
            $scope.editFaultCodeTpl = false;
            $scope.getFaultCodeList();
        })

        //故障码取消回调
        $scope.$on("cancelFaultCode",function(){
            $scope.editFaultCodeTpl = false;
        })

        //配置好的测点列表
        const getExistMeasurePoints = () =>{
            $scope.existFlag = 0;
            $scope.existMeasurePoints.getData({protocalId:$scope.formData.id}).then(res=>{
                if(res.body && res.body.total) $scope.existFlag = 1;
            })
        }
        //测点模板列表
        const getMeasurePointTemplateList = ()=>{
            $scope.measurePointTemplates.getData({dictType:'PROTOCAL_TEMPLATE'}).then(res=>{
                $scope.measurePointTemplatesData = res;
                $scope.measureTempId = res[0].dictValue;
            });
        }

        //测点批量生成
        $scope.generateMeasurePoint = () =>{
            let tip = "";
            if($scope.existFlag){
                tip = '确定生成新的数据？确定后，原有数据将被删除！！！'
            }else{
                tip = '确定采用此模板生成数据？'
            }
            $solway.confirm({ message: tip}, () => {
                $scope.measurePointsGenerate.getData({
                    protocalId:$scope.formData.id,
                    templateId:$scope.measureTempId
                }).then(res=>{
                    if(res.code == 0){
                        getExistMeasurePoints();
                        toaster.pop('success','',res.msg);
                    }else{
                        toaster.pop('error','',res.msg);
                    }
                });
            });
        }
        const ptTypeMap = {1:'模拟量',2:'开关量',3:'状态量',4:'故障量'};
        $scope.columnMeasurePoint = [
            {
                title: '测点类型',
                dataIndex: 'ptType',
                sort: !0,
                align: 'center',
                render(text, item, index) {
                    return ptTypeMap[text];
                }
            },{
                title: '测点名称',
                dataIndex: 'name',
                sort: !0,
                align: 'center'
            },{
                title: '测点编码',
                dataIndex: 'code',
                sort: !0,
                align: 'center'
            }, {
                title: '所属子系统一级分类',
                dataIndex: 'sub1',
                width:'17%',
                align: 'center',

            }, {
                title: '所属子系统二级分类',
                dataIndex: 'sub2',
                width:'17%',
                sort: !0,
                align: 'center'
            }, {
                title: '最大值',
                dataIndex: 'max',
                sort: !0,
                align: 'center'
            }, {
                title: '最小值',
                dataIndex: 'min',
                sort: !0,
                align: 'center'
            }, {
                title: '系数',
                dataIndex: 'ratio',
                sort: !0,
                align: 'center'
            },
            //  {
            //     title: '是否启用',
            //     dataIndex: 'faultHandle',
            //     sort: !0,
            //     align: 'center'
            // }, 
            {
                title: '备注描述',
                dataIndex: 'desc',
                sort: !0,
                align: 'center'
            },{
                title: '操作',
                dataIndex: 'ptType',
                align: 'center',
                sort: !0,
                render(text, item, index) {
                    if(text == 1){
                        return `
                            <div class="clearfix">
                                <i class="iconfont edit icon-bianji-copy" style="font-size: 18px;color:#1ddabe;" ></i>
                            </div>
                        `
                    }
                },
            }
        ]

        $scope.trClickMeasurePoints = (item, index, event) => {
            if(event.target.className.includes('icon-bianji-copy')) {
                $scope.editMeasurePointTpl = true;
                $scope.$broadcast('editMeasurePointBroad',item);
            }else if(event.target.className.includes('icon-shanchu1')) {
                // $solway.confirm({ message: '确定删除此条数据？' }, () => {
                //     deleteBatch([item.id])
                // });
            }
        };

        
        //编辑测点成功回调
        $scope.$on('editMeasurePointCallback',function(){
            $scope.editMeasurePointTpl = false;
            getExistMeasurePoints();
            getMeasurePointTemplateList();
        })

        //测点取消回调
        $scope.$on("cancelMeasurePoint",function(){
            $scope.editMeasurePointTpl = false;
        })

    });