ajaxData(
    {
        // 出库 清单
        opWorkFittingsOutGoods: {
            name: 'GETopWorkFittingsOutGoods',
            data: {},
            later: true
        },
        // 库房列表  单个设备 库房中的数量
        opFittingsDictRoomSelectByFD: {
            name: 'GETopFittingsDictRoomSelectByFD',
            data: {},
            later: true,
            cache: true
        },
        // 出库 创建
        opWorkFittingsOutCreate: {
            name: 'opWorkFittingsOutCreate',
            data: {},
            later: true
        },
    }, {
        __serviceName__: 'themeOutStockService'
    }
)('themeOutStockCtrl', ['$scope', 'themeOutStockService', 'toaster', '$ocLazyLoad'], ($scope, myAjaxData, toaster, $ocLazyLoad) => {



    $scope.$on('popUp', (event, obj) => {
        const { tabIndex } = $scope;
        if (tabIndex !== 3) return;

        $scope.obj = obj;

        $scope.down = true;

        $scope.lookOver = obj.state === '00' ? true : false;

        $scope.workedObj = [];

        $scope.opWorkFittingsOutGoods.getData({ id: obj.id });
    });


    $scope.opWorkFittingsOutGoods.subscribe(res => {

        $scope.workedObj = res.body.goods.map(v => ({
            num: v.num,
            fdId: v.fd.id,
            code: v.fd.code,
            name: v.fd.name,
            ft: v.fd.ft,
            fgId: v.id,
            grs: v.fgrs
        }));
    });


    $scope.deleteRoom = (fdIndex, grsIndex) => {
        $scope.workedObj[fdIndex].grs.splice(grsIndex, 1);
    };


    $scope.numChange = (fdIndex, grsIndex) => {
        const { num, max } = $scope.workedObj[fdIndex].grs[grsIndex];
        if (num === null) return;
        if (num === void 0) return $scope.workedObj[fdIndex].grs[grsIndex].num = max;
    };


    $scope.computeMaxNum = (fdIndex, grsIndex) => {
        $scope.workedObj[fdIndex].grs[grsIndex].num = 0;
        $scope.workedObj[fdIndex].grs[grsIndex].max = $scope.workedObj[fdIndex].roomList.find(v => {
            return +v.id === +$scope.workedObj[fdIndex].grs[grsIndex].roomId;
        }).num;
    };


    $scope.opFittingsDictRoomSelectByFD.beforGetData = async (index, fdId) => {

        const { roomList, grs, num } = $scope.workedObj[index];
        if (roomList && (grs.length >= roomList.length)) return toaster.pop('error', '', '超过库房数量');

        $scope.workedObj[index].grs.push({ num: 0, max: 0 });

        if ($scope.workedObj[index].grs.length !== 1) return;

        const res = await $scope.opFittingsDictRoomSelectByFD.getData({ fdId });
        if (!res) return;
        $scope.workedObj[index].roomList = res.body;
        if (res.body.reduce((a, b) => a + b.num, 0) < num) $scope.workedObj[index].lack = true;
        $scope.$apply();
    };


    $scope.submit = async () => {

        const { obj: { sn, id, summary }, workedObj } = $scope;
        if (!summary) return toaster.pop('error', '', '请填写备注');
        let same = true, beyond = false;
        const goods = workedObj.map(v => {
            const { fdId, fgId, grs, num } = v;
            if (grs.reduce((a, b) => a + b.num, 0) !== num) same = false;
            return {
                fdId, 
                fgId,
                grs: grs.filter(v => v.roomId).map(xv => {
                    const {num, max, roomId} = xv;
                    if (num > max) beyond = true;
                    return {num, roomId};
                })
            };
        });

        if (beyond) return toaster.pop('error', '', '超出库房数量');
        if (!same) return toaster.pop('error', '', '数量不一致，请检查');

        const res = await $scope.opWorkFittingsOutCreate.getData({
            summary, sn, id, goods
        });
        if (res.code !== 0) return toaster.pop('error', '', '出库创建失败');
        toaster.pop('success', '', '出库创建成功');
        $scope.down = false;
        $scope.diffGetData({ pageIndex: 0 });
        $scope.$apply();
    };

});