ajaxData(
    {
        // 还库 清单
        opFittingsRebackGoods: {
            name: 'GETopFittingsRebackGoods',
            data: {},
            later: true
        },
        // 出库 分页
        opWorkFittingsOutPage: {
            name: 'GETopWorkFittingsOutPage',
            data: {},
            later: true
        },
        // 还库 创建
        opWorkFittingsOutCreate: {
            name: 'opWorkFittingsOutCreate',
            data: {},
            later: true
        },
    }, {
        __serviceName__: 'themeReturnLibraryService'
    }
)('themeReturnLibraryCtrl', ['$scope', 'themeReturnLibraryService', 'toaster', '$ocLazyLoad'], ($scope, myAjaxData, toaster, $ocLazyLoad) => {

    $scope.$on('popUp', (event, obj) => {
        const { tabIndex } = $scope;
        if (tabIndex !== 4) return;

        $scope.down = true;

        $scope.workedObj = [];

        $scope.obj = obj;

        if (obj) {

            $scope.lookOver = true;

            $scope.opFittingsRebackGoods.getData({ id: obj.id });

        } else {

            $scope.lookOver = false;

            $scope.opWorkFittingsOutPage.getData({ pageIndex: 0, pageSize: 999 });
        }

    });


    $scope.opWorkFittingsOutPage.subscribe(res => {
        $scope.rdatasource = res.body.data.filter(v => v.state === '00');
        $scope.rcolumn = [
            {
                title: '',
                dataIndex: 'createUname',
                align: 'center'
            },
            {
                title: '',
                dataIndex: 'sn',
                align: 'left'
            },
            {
                title: '',
                dataIndex: 'modifyTime',
                align: 'center',
                render(text, item) {
                    if (item.state !== '00') return '';
                    return new Date(text).Format('yyyy-MM-dd');
                }
            },
        ];
    });


    $scope.opFittingsRebackGoods.subscribe(res => {

        $scope.workedObj = res.body.goods.map(v => ({
            num: v.num,
            fdId: v.fd.id,
            code: v.fd.code,
            name: v.fd.name,
            ft: v.fd.ft,
            fgId: v.id,
            grs: v.fgrs
        }));
    });


    // $scope.deleteRoom = (fdIndex, grsIndex) => {
    //     $scope.workedObj[fdIndex].grs.splice(grsIndex, 1);
    // };


    // $scope.numChange = (fdIndex, grsIndex) => {
    //     const { num, max } = $scope.workedObj[fdIndex].grs[grsIndex];
    //     if (num === null) return;
    //     if (num === void 0) return $scope.workedObj[fdIndex].grs[grsIndex].num = max;
    // };


    // $scope.computeMaxNum = (fdIndex, grsIndex) => {
    //     $scope.workedObj[fdIndex].grs[grsIndex].num = 0;
    //     $scope.workedObj[fdIndex].grs[grsIndex].max = $scope.workedObj[fdIndex].roomList.find(v => {
    //         return +v.id === +$scope.workedObj[fdIndex].grs[grsIndex].roomId;
    //     }).num;
    // };


    $scope.submit = async () => {

        const { obj: { sn, id, summary }, workedObj } = $scope;
        if (!summary) return toaster.pop('error', '', '请填写备注');
        let same = true, beyond = false;
        const goods = workedObj.map(v => {
            const { fdId, fgId, grs, num } = v;
            if (grs.reduce((a, b) => a + b.num, 0) !== num) same = false;
            return {
                fdId,
                fgId,
                grs: grs.filter(v => v.roomId).map(xv => {
                    const { num, max, roomId } = xv;
                    if (num > max) beyond = true;
                    return { num, roomId };
                })
            };
        });

        if (beyond) return toaster.pop('error', '', '超还库房数量');
        if (!same) return toaster.pop('error', '', '数量不一致，请检查');

        const res = await $scope.opWorkFittingsOutCreate.getData({
            summary, sn, id, goods
        });
        if (res.code !== 0) return toaster.pop('error', '', '还库创建失败');
        toaster.pop('success', '', '还库创建成功');
        $scope.down = false;
        $scope.diffGetData({ pageIndex: 0 });
        $scope.$apply();
    };

});