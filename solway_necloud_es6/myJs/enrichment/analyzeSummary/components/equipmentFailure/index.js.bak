ajaxData(
    {
        analysis_sun_dev_falt_year_common_list1: {
            name: 'GETanalysis_sun_dev_falt_year_common_list1',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_year_common_list2: {
            name: 'GETanalysis_sun_dev_falt_year_common_list2',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_year_common_list3: {
            name: 'GETanalysis_sun_dev_falt_year_common_list3',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_year_common_list4: {
            name: 'GETanalysis_sun_dev_falt_year_common_list4',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_year_common_list5: {
            name: 'GETanalysis_sun_dev_falt_year_common_list5',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_year_common_list6: {
            name: 'GETanalysis_sun_dev_falt_year_common_list6',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_year_common_line: {
            name: 'GETanalysis_sun_dev_falt_year_common_line',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_list1: {
            name: 'GETanalysis_sun_dev_falt_accum_common_list1',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_list2: {
            name: 'GETanalysis_sun_dev_falt_accum_common_list2',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_list3: {
            name: 'GETanalysis_sun_dev_falt_accum_common_list3',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_list4: {
            name: 'GETanalysis_sun_dev_falt_accum_common_list4',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_list5: {
            name: 'GETanalysis_sun_dev_falt_accum_common_list5',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_list6: {
            name: 'GETanalysis_sun_dev_falt_accum_common_list6',
            data: {},
            later: true,
        },
        analysis_sun_dev_falt_accum_common_line: {
            name: 'GETanalysis_sun_dev_falt_accum_common_line',
            data: {},
            later: true,
        },
    },
    {
        __serviceName__: 'equipmentFailureService',
        listMap: [
            {
                dataIndex: 'province_name',
                dataId: 'provinceid',
                name: '区域'
            },
            {
                dataIndex: 'manuf_name',
                dataId: 'manufid',
                name: '品牌'
            },
            {
                dataIndex: 'ft_name',
                dataId: 'ftid',
                name: '类型'
            },
            {
                dataIndex: 'dtime',
                dataId: 'dtime',
                name: '时间'
            },
            {
                dataIndex: 'st_name',
                dataId: 'stid',
                name: '电站'
            },
            {
                dataIndex: 'product_name',
                dataId: 'productid',
                name: '型号'
            },
        ]
    }
)('equipmentFailureCtrl', ['$scope', 'equipmentFailureService', 'actionRecord', 'toaster'], ($scope, myAjaxData, historicalRecord, toaster) => {
    /// 初始化 scope
    $scope.initChildScope($scope, myAjaxData);

    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        const { tabIndex = 0, guidePage = true, notCombined = false, maximize = false, activeStatus = [false, false, false, false, false, false] } = historicalRecord.get().themeEquipmentFailure || {};
        $scope.tabIndex = tabIndex;
        $scope.guidePage = guidePage;
        $scope.maximize = maximize;
        $scope.notCombined = notCombined;
        $scope.activeStatus = guidePage ? [false, false, false, false, false, false] : activeStatus;
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await myAjaxData.timeout(0);
        getListData();
        $scope.$apply();
        await myAjaxData.timeout(400);
        $scope.pair = activeStatus.filter(v => v).length === 2;
        $scope.$apply();
    };

    // 日期改变
    $scope.dateUpdated = async () => {
        await myAjaxData.timeout(0);
        $scope.datasource1 = void 0;
        $scope.datasource2 = void 0;
        $scope.datasource3 = void 0;
        $scope.datasource4 = void 0;
        $scope.datasource5 = void 0;
        $scope.datasource6 = void 0;
        $scope.maximizeListData = void 0;
        getListData();
    };

    // 点击 改变选中状态
    $scope.changeActiveStatus = async (index, event) => {
        if ($scope.activeStatus.filter(v => v).length >= 2 && !$scope.activeStatus[index]) return;
        $scope.activeStatus[index] = !$scope.activeStatus[index];
        historicalRecord.set({
            themeEquipmentFailure: {
                ...historicalRecord.get().themeEquipmentFailure || {},
                activeStatus: $scope.activeStatus
            }
        });
        // 引导页
        if ($scope.guidePage) {
            if ($scope.activeStatus[index]) {
                event.currentTarget.style.opacity = '1';
            } else {
                event.currentTarget.style.opacity = '0.3';
            }
            if ($scope.activeStatus.filter(v => v).length === 0) {
                $scope.guidePageText = '选中任意一个列表';
            } else if ($scope.activeStatus.filter(v => v).length === 1) {
                $scope.guidePageText = '再次选中任意一个列表';
            } else if ($scope.activeStatus.filter(v => v).length === 2) {
                $scope.guidePageText = '进入多维矩阵分析>>';
            }
        }
        // end 引导页
        if ($scope.activeStatus.filter(v => v).length !== 2) {
            await myAjaxData.timeout(0);
            $scope.pair = false;
        }
        else {
            await myAjaxData.timeout(400);
            $scope.pair = true;
        }
        if (($scope.activeStatus[0] && $scope.activeStatus[4]) || ($scope.activeStatus[1] && $scope.activeStatus[5])) {
            $scope.notCombined = true;
        } else {
            $scope.notCombined = false;
        }
        historicalRecord.set({
            themeEquipmentFailure: {
                ...historicalRecord.get().themeEquipmentFailure || {},
                notCombined: $scope.notCombined
            }
        });
        $scope.$apply();
    };

    // 双击放大
    $scope.maximizeList = (index, event) => {
        event && event.stopPropagation();
        if ($scope.guidePage) return;
        $scope.maximize = index;
        historicalRecord.set({
            themeEquipmentFailure: {
                ...historicalRecord.get().themeEquipmentFailure || {},
                maximize: index
            }
        });
        $scope.maximizeListData = $scope['datasource' + index];
        $scope.maximizeListColumn = $scope['column' + index];
    };

    // 点击分析
    $scope.analyze = () => {
        if (!$scope.pair) return;
        if ($scope.notCombined) return toaster.pop('error', '', '所选模块不能结合分析，请重新选择。');;
        if ($scope.guidePage) {
            Array.from(document.querySelectorAll('.analyzeSummary .a-content>div.a-container .themeDetail .equipmentFailure .classify .item')).forEach(v => {
                v.style.opacity = '1';
            });
            $scope.guidePage = false;
            historicalRecord.set({
                themeEquipmentFailure: {
                    ...historicalRecord.get().themeEquipmentFailure || {},
                    guidePage: false
                }
            });
        }
        $scope.chartData = void 0;
        $scope.analyzeDetailShow = true;
        $scope.analysis_sun_dev_falt_year_common_line.res = null;
        $scope.analysis_sun_dev_falt_accum_common_line.res = null;
        const apiStr = `analysis_sun_dev_falt_${['', '', 'year', 'accum'][$scope._dateType]}_common_line`;
        $scope[apiStr].getData({
            queryCode: apiStr,
            queryType: 1,
            queryStType: 1,
            date: ($scope.dateTime || {showDate: null}).showDate,
            GROUPBY: $scope.activeStatus.map((v, i) => v && ['provinceid', 'manufid', 'ftid', 'dtime,' + ['', '', 'MONTH', 'YEAR'][$scope._dateType], 'stid', 'productid'][i]).filter(v => v).join(';')
        }).then(async res => {
            $scope.chartData = res;
            await myAjaxData.timeout(0);
            drawingChart();
            $scope.$apply();
        });
    };

    $scope.changeTab = index => {
        $scope.tabIndex = index;
        drawingChart();
    };

    const getListData = () => {
        if ($scope._dateType < 2) return;
        const apiStr = `analysis_sun_dev_falt_${['', '', 'year', 'accum'][$scope._dateType]}_common_list`;
        ['provinceid', 'manufid', 'ftid', 'dtime,' + ['', '', 'MONTH', 'YEAR'][$scope._dateType], 'stid', 'productid'].forEach((v, i, arr) => {
            $scope[apiStr + (i + 1)].getData({
                queryCode: apiStr,
                queryType: 1,
                queryStType: 1,
                date: ($scope.dateTime || {showDate: null}).showDate,
                GROUPBY: v
            }).then(res => {
                $scope['datasource' + (i + 1)] = res.body.data;
                $scope['column' + (i + 1)] = [
                    {
                        title: myAjaxData.config.listMap[i].name,
                        dataIndex: myAjaxData.config.listMap[i].dataIndex,
                        sort: true,
                        width: '130px',
                        align: i === 3 ? 'center' : 'left'
                    },
                    {
                        title: '故障率',
                        dataIndex: 'fail_r',
                        align: 'right',
                        sort: true,
                        width: '50px',
                    },
                    {
                        title: '故障时间',
                        dataIndex: 'fail_hours',
                        align: 'right',
                        sort: true,
                        width: '60px',
                    },
                    {
                        title: '故障数量',
                        dataIndex: 'fail_number',
                        align: 'right',
                        sort: true,
                        width: '60px',
                    },
                    {
                        title: '设备总量',
                        dataIndex: 'device_count',
                        align: 'right',
                        sort: true,
                        width: '60px',
                    },
                ];
                if ($scope.maximize === (i + 1)) {
                    $scope.maximizeListData = res.body.data;
                    $scope.maximizeListColumn = $scope['column' + (i + 1)];
                }
            });
        });
    };

    function drawingChart() {
        if (!$scope.myChart) {
            $scope.myChart = echarts.init(document.getElementById('equipmentFailureChart'));
        }
        const { myChart } = $scope;
        const { tabIndex } = $scope;
        const [xDataId, yDataId] = $scope.activeStatus.map((v, i) => v && myAjaxData.config.listMap[i].dataId).filter(v => v);
        const [xDataIndex, yDataIndex] = $scope.activeStatus.map((v, i) => v && myAjaxData.config.listMap[i].dataIndex).filter(v => v);
        const [xName, yName] = $scope.activeStatus.map((v, i) => v && ['区域', '设备品牌', '故障类型', '故障时间', '电站', '设备型号'][i]).filter(v => v);
        $scope.xName = xName; $scope.yName = yName;
        const option = {
            tooltip: {
                show: true,
                trigger: 'item',
                formatter(a, b, c) {
                    return a.value[0] + ' - ' + a.value[1] + '<br/>' + ['故障率: ' + a.value[2] + '' + '<br/>', '故障损失小时数: ' + a.value[2] + 'h' + '<br/>'][tabIndex]
                }
            },
            grid: {
                top: 50,
                bottom: 50,
                containLabel: true,
                left: 30,
                right: '110'
            },
            xAxis: {
                type: 'category',
                name: xName,
                nameTextStyle: {
                    color: '#fffeff',
                    fontSize: 18
                },
                splitLine: {
                    show: false,
                    lineStyle: {
                        color: '#366090',
                        type: 'dashed'
                    }
                },
                axisLine: {
                    lineStyle: {
                        color: '#366090'
                    }
                },
                axisLabel: {
                    textStyle: {
                        color: '#fffeff'
                    }
                },
                data: $scope.chartData.body.data[xDataIndex]
            },
            yAxis: {
                type: 'category',
                name: yName,
                // boundaryGap: true,
                nameTextStyle: {
                    color: '#fffeff',
                    fontSize: 18
                },
                axisLine: {
                    lineStyle: {
                        color: '#366090'
                    }
                },
                splitLine: {
                    show: true,
                    lineStyle: {
                        color: '#366090',
                        type: 'dashed'
                    }
                },
                axisLabel: {
                    textStyle: {
                        color: '#fffeff'
                    }
                },
                data: $scope.chartData.body.data[yDataIndex]
            },

            dataZoom: [
                {
                    xAxisIndex: 0,
                    filterMode: 'empty',
                    type: 'slider',
                }
            ],
            series: [
                {
                    name: ['故障率', '故障停机小时数'][tabIndex],
                    type: 'scatter',
                    itemStyle: {
                        normal: {
                            color: 'rgb(246, 107, 86)',
                            opacity: 0.8,
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowOffsetY: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    },
                    data: $scope.chartData.body.data[['fail_r', 'fail_hours'][tabIndex]].map(v => [
                        xDataId === 'dtime' ? v[0] : $scope.chartData.body.data[xDataIndex][$scope.chartData.body.data[xDataId].indexOf(v[0])],
                        yDataId === 'dtime' ? v[1] : $scope.chartData.body.data[yDataIndex][$scope.chartData.body.data[yDataId].indexOf(v[1])],
                        v[2]
                    ]),
                    symbolSize(val) {
                        return val[2] ? ((8 + val[2] / 100 * 40) > 80 ? 80 : (8 + val[2] / 100 * 40)) : 0;
                    }
                }
            ],
        };

        const resize = async () => {
            await myAjaxData.timeout(100);
            myChart.resize();
        };
        window.addEventListener('resize', resize);
        $scope.$on('$destroy', () => {
            window.removeEventListener('resize', resize);
            echarts.dispose(myChart);
        });

        myChart.setOption(option);
    }

    // 取消选中  
    function cancelActive() {
        $scope.activeStatus = [false, false, false, false, false, false];
        $scope.pair = false;
        historicalRecord.set({
            themeEquipmentFailure: {
                ...historicalRecord.get().themeEquipmentFailure || {},
                activeStatus: $scope.activeStatus,
                pair: $scope.pair,
            }
        });
        $scope.$apply();
    }

    document.addEventListener('dblclick', cancelActive);

    // 销毁 事件
    $scope.$on('$destroy', () => {
        document.removeEventListener('dblclick', cancelActive);
    });
});