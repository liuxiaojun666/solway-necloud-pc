ajaxData(
    {
        // 时间 列表
        analysis_station_str_shade_timelist_new: {
            name: 'GETanalysis_station_str_shade_timelist_new',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true
        },
        // 时间 曲线
        analysis_station_str_shade_timeline_new: {
            name: 'GETanalysis_station_str_shade_timeline_new',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true
        },
        // 设备 列表
        shadowDateGetDeviceList: {
            name: 'GETshadowDateGetDeviceList',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true
        },
        // 设备 曲线
        shadowDateGetDeviceLine: {
            name: 'GETshadowDateGetDeviceLine',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true
        },
        // 组串列表
        shadowDateGetStringList: {
            name: 'GETshadowDateGetStringList',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true
        },
        // 组串曲线
        shadowDateGetStringLine: {
            name: 'GETshadowDateGetStringLine',
            data: {},
            later: true,
            onlyLatest: true,
            sameTimeOnce: true
        }
    }, {
        __serviceName__: 'shadowChartStationService',
    }
)('shadowChartStationCtrl', ['$scope', 'shadowChartStationService', 'actionRecord'], ($scope, myAjaxData, historicalRecord) => {
    /// 初始化 scope
    $scope.initChildScope($scope, myAjaxData);

    // 主页面初始化完成 回调
    $scope.mainPageInitComplete = async () => {
        let { showShape, tabIndex = 0 } = historicalRecord.get().themeShadowChartStation || {};
        $scope.changeShowShape(showShape || 'list');
        $scope.changeTab(tabIndex); 
        $scope.startDate = '05';
        $scope.endDate = '18';
        $('.ng-clock').removeClass('ng-clock');
        $scope.initComplete = true;
        await myAjaxData.timeout(0);
        await $scope.diffGetData(true);
        $scope.$apply();
    };


    // 切换电站 回调
    $scope.switchPowerCallback = () => $scope.diffGetData(true);

    // 日期改变
    $scope.dateUpdated = async () => {
        await myAjaxData.timeout(0);
        $scope.diffGetData(true);
    };
    
    // tab 切换
    $scope.changeTab = tabIndex => {
        $scope.tabIndex = tabIndex;
        historicalRecord.set({
            themeShadowChartStation: {
                ...historicalRecord.get().themeShadowChartStation || {},
                tabIndex
            }
        });
        $scope.diffGetData();
    };

    // 切换显示形式  图表 or 列表
    $scope.changeShowShape = showShape => {
        $scope.showShape = showShape;
        historicalRecord.set({
            themeShadowChartStation: {
                ...historicalRecord.get().themeShadowChartStation || {},
                showShape
            }
        });
        $scope.diffGetData();
    };

    $scope.chartClick = (event) => {
        const {tabIndex} = $scope;
        if (tabIndex === 1) {
            if (event.seriesName !== "阴影组串数") return;
            $scope.equipmentDetailShow = true;
            $scope.$broadcast('equipmentShadowDetails', {
                deviceId: $scope.shadowDateGetDeviceLine.res.st_eqid[event.dataIndex].split('-')[1],
                deviceName: $scope.shadowDateGetDeviceLine.res.eqName[event.dataIndex],
                stId: $scope.shadowDateGetDeviceLine.res.st_eqid[event.dataIndex].split('-')[0]
            });
        } else if (tabIndex === 2) {
            if (event.seriesName !== "阴影") return;
            $scope.equipmentDetailShow = true;
            const eq_stringid = $scope.shadowDateGetStringLine.res.eq_stringid[event.dataIndex].split('-');
            const stringId = eq_stringid.pop();
            const st_eqid = $scope.shadowDateGetStringLine.res.st_eqid[event.dataIndex]
            $scope.$broadcast('equipmentShadowDetails', {
                deviceId: st_eqid.split('-')[1],
                deviceName: eq_stringid.join('-'),
                stId: st_eqid.split('-')[0],
                stringId
            });
        }
    };

    $scope.equipmentListTrClick = (item, index, event) => {
        if (event.target.className.includes('clickable')) {
            const { stid, stId, eqid, deviceId } = item;
            return $scope.$broadcast("equipmentPopUp", {
                stid: stid || stId || myAjaxDataParent.currentStationData.currentSTID,
                eqid: eqid || deviceId
            });
        }
        $scope.equipmentDetailShow = true;
        $scope.$broadcast('equipmentShadowDetails', item);
    };

    // 接口请求
    $scope.diffGetData = async (getInfo) => {
        if (!$scope.initComplete) return;
        await myAjaxData.timeout(0);
        setDataNull(getInfo);
        const { showShape, tabIndex, dataType, dateTime, startDate, endDate } = $scope;
        if (dataType !== 0) return;

        if (tabIndex === 0 && showShape === 'list') {
            $scope.analysis_station_str_shade_timelist_new.getData({
                queryCode: 'analysis_station_str_shade_timelist_new',
                queryType: 3,
                startDate: dateTime.showDate + ' ' + startDate,
                endDate: dateTime.showDate + ' ' + endDate
                // date: new Date(Date.now() - 1000 * 60 * 60 * 24).Format('yyyy-MM-dd')
            });
        } else if (tabIndex === 0 && showShape === 'chart') {
            $scope.analysis_station_str_shade_timeline_new.getData({
                queryCode: 'analysis_station_str_shade_timeline_new',
                queryType: 3,
                startDate: dateTime.showDate + ' ' + startDate,
                endDate: dateTime.showDate + ' ' + endDate
                // date: new Date(Date.now() - 1000 * 60 * 60 * 24).Format('yyyy-MM-dd')
            });
        } else if (tabIndex === 1 && showShape === 'list') {
            $scope.shadowDateGetDeviceList.getData({
                isLine: 0,
                queryType: 3,
                date: dateTime.showDate
            });
        } else if (tabIndex === 1 && showShape === 'chart') {
            $scope.shadowDateGetDeviceLine.getData({
                isLine: 1,
                queryType: 3,
                date: dateTime.showDate
            });
        } else if (tabIndex === 2 && showShape === 'list') {
            $scope.shadowDateGetStringList.getData({
                startDate: dateTime.showDate + ' ' + startDate,
                endDate: dateTime.showDate + ' ' + endDate,
                isLine: 0,
            });
        } else if (tabIndex === 2 && showShape === 'chart') {
            $scope.shadowDateGetStringLine.getData({
                startDate: dateTime.showDate + ' ' + startDate,
                endDate: dateTime.showDate + ' ' + endDate,
                isLine: 1,
            });
        }
        $scope.$apply();
    };

    // 时间 列表
    $scope.analysis_station_str_shade_timelist_new.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.datasource = res.body.data;
        $scope.column = [
            {
                title: '日期',
                dataIndex: 'dtime',
                align: 'center',
                style: 'position:relative;',
                sort: true,
                render(text, item, index) {
                    return text.split(' ')[1] + ':00' + (item.clean_status
                        ? `<span title="清洗" style="cursor:pointer;position: absolute;right: 0.1em;top:0;line-height:50px;color:#57a2ff;font-size: 30px;" class="iconfont icon-qingxi1"></span>`
                        : '');
                }
            },
            {
                title: '阴影设备数',
                dataIndex: 'shade_eqcount',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影设备比例' + '(' + res.body.units.shade_eq_r + ')',
                dataIndex: 'shade_eq_r',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影组串数',
                dataIndex: 'shade_count',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影组串比例' + '(' + res.body.units.shade_str_r + ')',
                dataIndex: 'shade_str_r',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影损失电量' + '(' + res.body.units.shade_we + ')',
                dataIndex: 'shade_we',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影损失比例' + '(' + res.body.units.shade_we_r + ')',
                dataIndex: 'shade_we_r',
                align: 'right',
                sort: true,
            },
        ];
    };

    // 时间 曲线
    $scope.analysis_station_str_shade_timeline_new.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.xdata = res.body.data.dtime.map(v => v.split(' ')[1] + ':00');
        $scope.ydatas = [[res.body.data.shade_eqcount], [res.body.data.shade_we_r]];
    };

    // 设备 列表
    $scope.shadowDateGetDeviceList.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.datasource = res.data;
        $scope.column = [
            {
                title: '设备',
                dataIndex: 'deviceName',
                align: 'left',
                width: '25%',
                sort: true,
                render(text) {
                    return `<span class="clickable">${text}</span>`
                }
            },
            {
                title: '阴影组串数',
                dataIndex: 'shadowCount',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影损失电量' + '(' + res.units.shadeWe + ')',
                dataIndex: 'shadeWe',
                align: 'right',
                sort: true,
            },
            {
                title: '阴影损失比例' + '(' + res.units.shadeWeR + ')',
                dataIndex: 'shadeWeR',
                align: 'right',
                sort: true,
            },
        ];
    };

    // 设备 曲线
    $scope.shadowDateGetDeviceLine.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.xdata = res.eqName;
        $scope.ydatas = [[res.shadowCount], [res.shadeWeR]];
    };
    
    // 组串列表
    $scope.shadowDateGetStringList.subscribe(res => {
        $scope.datasource = res.data;
        $scope.column = [
            {
                title: '设备',
                dataIndex: 'deviceName',
                align: 'left',
                width: '25%',
                sort: true,
                render(text) {
                    return `<span class="clickable eq">${text}</span>`
                }
            },
            {
                title: '组串编号',
                dataIndex: 'stringId',
                align: 'right',
                sort: true,
            },
            {
                title: '时段',
                dataIndex: 'shadowTime',
                align: 'right',
                sort: true,
                render(text) {
                    return text.split(',').join('　')
                }
            },
            {
                title: '电流偏差率(%)',
                dataIndex: 'stReduce',
                align: 'right',
                sort: true,
            },
        ];
    });

    // 组串图表
    $scope.shadowDateGetStringLine.subscribe(res => {
        if (!res.eq_stringid[0]) {
            $scope.xdata = [];
            $scope.ydatas = [[[]], [[]]]
            return
        }
        $scope.xdata = res.eq_stringid.map(v => v + '号组串');
        $scope.ydatas = [new Array(Math.max(...res.shadowTime.map(v => v.length)) / 2).fill('').map((v, i) => [
            res.eq_stringid.map((v, xi) => ((res.shadowTime[xi][i * 2] - (res.shadowTime[xi][i * 2 - 1] || 0)) || 0)),
            res.eq_stringid.map((v, xi) => ((res.shadowTime[xi][i * 2 + 1] - res.shadowTime[xi][i * 2]) || '-')),
        ]).flatMap(v => v), [res.stReduce]];
    });
    // 组串图表 tooltipFormatter
    $scope.shadowDateGetStringLine.tooltipFormatter = (a, b) => {
        let l = 0, s = '';
        a.forEach((v, i) => {
            if (!v.value) return;
            if (v.value === '-') return;
            if (i % 2 === 0) return l += v.value;
            return s += l + ':00' + '-' + (l += v.value) + ':00' + '　';
        });
        return a[0].name + '<br/>' + '阴影：' + s + '<br/>' + '电流偏差率（%）:' + a[a.length - 1].value;
    };

    // 数据置空
    function setDataNull(getInfo) {
        $scope.column = [];
        $scope.xdata = void 0;
        $scope.ydatas = void 0;
        $scope.analysis_station_str_shade_timelist_new.res = null;
        $scope.analysis_station_str_shade_timeline_new.res = null;
        $scope.shadowDateGetDeviceList.res = null;
        $scope.shadowDateGetDeviceLine.res = null;
        $scope.shadowDateGetStringList.res = null;
        $scope.shadowDateGetStringLine.res = null;

    }

    // 销毁 事件
    $scope.$on('$destroy', () => {
        setDataNull();
    });
});