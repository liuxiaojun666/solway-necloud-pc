
ajaxData({
    protocolApplyList: {
        name: 'GETprotocolApplyList',
        data: {},
        later: true,
        onlyLatest: true
    },
    updateDeviceProtocol: {
        name: 'POSTupdateDeviceProtocol',
        data: {},
        later: true,
        saveParam: false,
        onlyLatest: true
    },
}, {
    __serviceName__: 'deviceProtocolService',
})('deviceProtocolModelCtrl', ['$scope', 'deviceProtocolService', 'actionRecord', '$timeout', 'toaster', '$http'], ($scope, myAjaxData, historicalRecord, $timeout, toaster, $http) => {

    const getApplyData = () =>{
        $scope.protocolApplyList.getData({
            deviceType: $scope.deviceType,
            productId: $scope.productId,
            protocolId: $scope.protocolId,
            pstationid: $scope.pstationid
        }).then(res=>{
            $scope.checkboxList = res.data;
            $scope.checkAll = true;

            if($scope.checkboxList.length){
                $scope.checkboxList.map(item=>{
                    if(!item.protocolID) $scope.checkAll = false;
                })
            }

            $timeout(()=>{
                let $checkAll =  $(".deviceProtocolTpl").find('input[name="deviceCheckAll"]');
                let $checkEveryDevice =  $(".deviceProtocolTpl").find('input[name="device"]');
        
                $(".deviceProtocolTpl").on('click','input[name="deviceCheckAll"]', (e)=>{
                    Array.from($checkEveryDevice).forEach(item=>item.checked = e.target.checked)
                });
                $(".deviceProtocolTpl").on('click','input[name="device"]', (e)=>{
                    $checkAll.prop('checked', Array.from($checkEveryDevice).every(item => item.checked== true));
                });
            },0);
        });
    }
    $scope.$on("deviceConfigureBroad", async (e, v) => {
        let data = v.item;
        $scope.protocolName = data.pname+'-'+data.name;
        $scope.productId = data.productId;
        $scope.protocolId = data.protocolid;
        $scope.pstationid = v.pstationid;
        $scope.deviceType = v.deviceType;
        getApplyData();
    })

    //保存
    $scope.save = () => {
        let checkedArr = [],notCheckedArr = [];
        $("input[name='device']:checked").map((index,v)=>{
            checkedArr.push(v.dataset.ids)
        })

        $("input[name='device']:not(:checked)").map((index,v)=>{
            notCheckedArr.push(v.dataset.ids)
        })
     
        let idsselect = checkedArr.length?checkedArr.join(','):'';
        let idsnoselect = notCheckedArr.length?notCheckedArr.join(','):'';
        $scope.updateDeviceProtocol.getData({
            pstationid:$scope.pstationid,
            protocolId:$scope.protocolId,
            deviceType:$scope.deviceType,
            idsselect,
            idsnoselect
        }).then(res => {
            if (res.key == 1) {
                toaster.pop('success', '', '保存成功');
                $scope.$parent.$parent.deviceProtocolTpl = false;
            } else {
                toaster.pop('error', '', '保存失败')
            }
        });
    }
});