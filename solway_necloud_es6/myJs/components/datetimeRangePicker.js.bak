app.directive('datetimeRange', ['$ocLazyLoad', '$timeout', '$q', ($ocLazyLoad, $timeout, $q) => ({
    restrict: 'E',
    transclude: !0,
    replace: !0,
    scope: {
        dateRange: '=',
        endDate: '=',
        startDate: '=',
        showArrow: '=',
        beforeCreate: '=',
        created: '=',
        beforeMount: '=',
        mounted: '=',
        beforeUpdate: '=',
        updated: '=',
        beforeDestroy: '=',
        destroyed: '=',
        clearable: '=',
        inputStyle: '=',
    },
    template: `
    <div class="datetimeRange" style="position:relative;display:inline-block;">
        <span ng-show="showArrow" ng-click="changeDateTime(-1)" class="dateArrow" style="cursor:pointer;"><i class="fa fa-angle-left"></i></span>
        <calendar 
            style="display:inline-block;"
            calendar-type="yyyy-MM-dd" 
            end-date="endDate"
            show-arrow="false"
            updated="myUpdated"
            input-style="inputStyle"
            date-time="startDate"></calendar>
        <span>è‡³</span>
        <calendar 
            style="display:inline-block;"
            calendar-type="yyyy-MM-dd" 
            start-date="startDate"
            show-arrow="false"
            updated="myUpdated"
            input-style="inputStyle"
            date-time="endDate"></calendar>
        <span ng-show="showArrow" ng-click="changeDateTime(1)" class="dateArrow" style="cursor:pointer;"><i class="fa fa-angle-right"></i></span>
    </div>`,
    link($scope, $element) {
        $scope.beforeMount && $scope.beforeMount($scope, $element)
        
        $timeout(() => {
            $scope.mounted && $scope.mounted($scope, $element)
        },0)
    },
    controller($scope, $element) {
        $scope.beforeCreate && $scope.beforeCreate($scope, $element)
        $scope.timeout = t => {
            const d = $q.defer()
            $timeout(() => d.resolve(), t)
            return d.promise
        }
        
        $scope.myUpdated = () => {
            $scope.beforeUpdate && $scope.beforeUpdate($scope, $element)
            
            
            $scope.updated && $scope.updated($scope, $element)
        };
        
        $scope.changeDateTime = async num => {
            
        }
        $element.on('$destroy', async () => {
            $scope.beforeDestroy && $scope.beforeDestroy($scope, $element)
            await $scope.timeout(0)
            $scope.destroyed && $scope.destroyed($scope, $element)
        })
        $scope.created && $scope.created($scope, $element)
    }
})])