app.directive('contentLeftWttw', ['myAjaxData', myAjaxData => {
    return {
        restrict: 'E',
        template: $('#content-left').html(),
        replace: true,
        scope: {
            pageList: '=',
            detail: '=',
            deviceType: '='
        },

        link($scope, $element, $attrs) {
            $scope.setTableHeight()
            window.addEventListener('resize', () => {
                $scope.setTableHeight()
                $scope.$apply()
            })
        },

        controller($scope, $element) {
            /**
             * 设置列表可滚动高度
             * @return {[type]} [description]
             */
            $scope.setTableHeight = () => {
                let windowHeight = window.innerHeight
                $(".content-body").height(do {
                    if ((windowHeight - 100) < 545) 545
                    else windowHeight - 100
                })
                $scope.tableScrollY = do {
                    if ((windowHeight - 393) < 245) 245
                    else windowHeight - 393
                }
            }

            /**
             * 设置起始时间、结束时间
             * @type {Date}
             */
            $scope.dateTime1 = new Date((new Date).setDate((new Date).getDate() - 7))
            $scope.dateTime2 = new Date

            /**
             * 根据设备类型获取  设备名
             * @param  {[type]} i [description]
             * @return {[type]}   [description]
             */
            $scope.getDeviceName = async (i) => {
                $scope.deviceName = ''
                if (i < 0) {
                    return $scope.deviceNames = []
                }

                $scope.deviceNames = await myAjaxData.getData({
                    name: myAjaxData.config.url[i],
                    data: {}
                })
                $scope.$apply()
            }

            /**
             * 根据条件搜索列表
             * @return {[type]} [description]
             */
            $scope.search = () => {
                $scope.pageList.getData({
                    deviceId: $scope.deviceName,
                    deviceType: $scope.deviceTypeVal,
                    pageIndex: 0,
                    startDate: $scope.dateTime1.Format('yyyy-MM-dd'),
                    endDate: $scope.dateTime2.Format('yyyy-MM-dd')
                })
            }

            let activeIndex = 0

            /**
             * [loadDetail 加载详情]
             */
            $scope.loadDetail = async (data: Object, index = 0) => {
                activeIndex = index
                if (!data) {
                    $scope.detail.res = null
                    return $scope.detail.isLoding = !1
                }
                await $scope.detail.getData({
                    stId: myAjaxData.currentStationData.currentSTID,
                    deviceId: data.deviceId,
                    dtime: new Date(data.beginTime).Format("yyyy-MM-dd")
                })
                $($element).find('tbody tr').removeClass('active').eq(index).addClass('active')
            }

            /**
             * [监听数据改变之后   处理当前选中  and  选中状态样式]
             */
            $scope.$watch('pageList', (newValue, oldValue) => {
                if (void 0 === newValue.res) return
                if (void 0 === newValue.res.data.data[0]) return $scope.loadDetail()
                const _newValue = newValue.res.data.data
                $($element).find('tbody tr').removeClass('active')
                if (oldValue.res) {
                    const _oldValue = oldValue.res.data.data
                    for (let i = 0, len = _newValue.length; i < len; i++) {
                        if (_oldValue[activeIndex] && _newValue[i].deviceId == _oldValue[activeIndex].deviceId) {
                            $($element).find('tbody tr').eq(i).addClass('active')
                            return activeIndex = i
                        }
                    }
                }
                activeIndex = 0
                $scope.loadDetail(_newValue[0])
            }, !0)

            /**
             * [column table列]
             * @type {Array}
             */
            $scope.column = [
                {
                    title: '风机',
                    dataIndex: 'deviceName',
                    width: '17%',
                    align: 'center',
                    sort: true
                }, {
                    title: '对风偏差',
                    dataIndex: 'beginTime',
                    width: '22%',
                    align: 'center',
                    sort: true,
                    render(text, record, index) {
                        return text && new Date(text).Format('yyyy-MM-dd')
                    }
                }, {
                    title: '等级',
                    dataIndex: 'eqreduce',
                    width: '17%',
                    align: 'center',
                    sort: true,
                    render(text, record) {
                        return text + '%'
                    }
                }, {
                    title: '损失电量',
                    dataIndex: 'eqreduce',
                    width: '22%',
                    align: 'right',
                    sort: true,
                    render(text, record) {
                        return text + '%'
                    }
                }, {
                    title: '统计时间',
                    dataIndex: 'eqreduce',
                    width: '22%',
                    align: 'right',
                    sort: true,
                    render(text, record) {
                        return text + '%'
                    }
                }
            ]

            /**
             * 监听电站切换  或  其他  引起的设备类型改变，重新初始化设备类型跟设备
             * @param  {[type]} 'deviceType' [description]
             * @param  {[type]} (async       (newValue,    oldValue [description]
             * @return {[type]}              [description]
             */
            $scope.$watch('deviceType', (async (newValue, oldValue) => {
                await myAjaxData.timeout(0)
                $scope.deviceTypeVal = ''
                $scope.deviceName = ''
                $scope.deviceNames = []
                $scope.$apply()
            }), !0)

                /**
                 * [默认显示第一条详情]
                 * @param  {[type]} ) 
                 */
                ; (async () => {
                    await $scope.pageList.promise
                    await myAjaxData.timeout(0)
                    $scope.loadDetail($scope.pageList.res.data.data[0])
                })()
        }
    }
}])

app.directive('wttwScatterPlot', ['myAjaxData', '$timeout', (myAjaxData, $timeout) => ({
    replace: !0,
    restrict: 'E',
    scope: {
        title: '@'
    },
    link($scope, $element, $attrs) {
        const dataAll = [[10.0, 8.04], [-10.0, 8.04], [-8.0, 6.95], [13.0, 7.58], [-9.0, 8.81], [11.0, 8.33], [14.0, 9.96], [-6.0, 7.24], [4.0, 4.26], [-12.0, 10.84], [7.0, 4.82], [5.0, 5.68]]

        $timeout(() => {

            let myChart = echarts.init($element[0])
            myChart.setOption({
                title: {
                    text: $scope.title,
                    textStyle: {
                        fontWeight: 'normal',
                        fontSize: 14
                    },
                    x: 'center',
                    y: 0
                },
                grid: [{ x: 'center', y: 'center', left: '40', right: '80', top: '60', bottom: 30 }],
                tooltip: {
                    formatter: '{a}: ({c})'
                },
                xAxis: [{
                    name: '对风角(deg)',
                    axisTick: {
                        show: !1
                    }
                }],
                yAxis: [{
                    name: '功率(kw)',
                    axisTick: {
                        show: !1
                    }
                }],
                series: [{
                    name: 'I',
                    type: 'scatter',
                    xAxisIndex: 0,
                    yAxisIndex: 0,
                    data: dataAll
                }]
            })
            window.addEventListener('resize', () => {

                return myChart.resize()
            })
        }, 0)
    }

})])

app.directive('wttw3d', ['myAjaxData', '$timeout', (myAjaxData, $timeout) => ({
    replace: !0,
    restrict: 'E',
    scope: {
        title: '@'
    },
    link($scope, $element, $attrs) {
        // const dataAll = [[10.0, 8.04], [-10.0, 8.04], [-8.0, 6.95], [13.0, 7.58], [-9.0, 8.81], [11.0, 8.33], [14.0, 9.96], [-6.0, 7.24], [4.0, 4.26], [-12.0, 10.84], [7.0, 4.82], [5.0, 5.68]]

        $timeout(() => {

            let myChart = echarts.init($element[0])

            var hours = ['12a', '1a', '2a', '3a', '4a', '5a', '6a',
                '7a', '8a', '9a', '10a', '11a',
                '12p', '1p', '2p', '3p', '4p', '5p',
                '6p', '7p', '8p', '9p', '10p', '11p'];
            var days = ['Saturday', 'Friday', 'Thursday',
                'Wednesday', 'Tuesday', 'Monday', 'Sunday'];

            var data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]];
            const option = {
                backgroundColor: '#fff',
                tooltip: {
                    formatter: (a, b, c) => a.value.map((v, i) => ['风速', '对角风', '功率'][i] + '：' + v + '<br/>').join('')
                },
                visualMap: {
                    max: 20,
                    inRange: {
                        color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
                    }
                },
                xAxis3D: {
                    name: '风速',
                    type: 'category',
                    data: /* hours */[]
                },
                yAxis3D: {
                    name: '对角风',
                    type: 'category',
                    data: /* days */[]
                },
                zAxis3D: {
                    name: '功率',
                    type: 'value'
                },
                grid3D: {
                    boxWidth: 300,
                    boxDepth: 80,
                    light: {
                        main: {
                            intensity: 1.2
                        },
                        ambient: {
                            intensity: 0.3
                        }
                    }
                },
                series: [{
                    type: 'bar3D',
                    data: data.map(function (item) {
                        return {
                            value: [item[1], item[0], item[2]]
                        }
                    }),
                    shading: 'color',

                    label: {
                        show: false,
                        textStyle: {
                            fontSize: 16,
                            borderWidth: 1
                        }
                    },

                    itemStyle: {
                        opacity: 0.4
                    },

                    emphasis: {
                        label: {
                            textStyle: {
                                fontSize: 20,
                                color: '#900'
                            }
                        },
                        itemStyle: {
                            color: '#900'
                        }
                    }
                }]
            };
            myChart.setOption(option);
            window.addEventListener('resize', myChart.resize)
        }, 0);

    }

})])


ajaxData({
    pageList: {
        name: 'GETanalysisPage',
        data: {
            pageIndex: 0,
            pageSize: 10,
            startDate: new Date((new Date).setDate((new Date).getDate() - 7)).Format('yyyy-MM-dd'),
            endDate: (new Date).Format('yyyy-MM-dd')
        }
    },
    detail: {
        name: 'GETselectEqPaintingData',
        later: true
    },
    deviceType: {
        name: 'GETgetDeviceType',
        data: {}
    }
}, {
        //设备查询地址
        url: ["GETgetJunctionBox", "GETgetInverter", "GETgetBoxchange", "GETgetAmmeter", "GETgetAerograph"]
    })('windTurbineToWindCtrl', ['$scope', 'myAjaxData'], ($scope, myAjaxData) => {

    })
