app.directive('contentLeftWindstability', ['myAjaxData', myAjaxData => {
    return {
        restrict: 'E',
        template: $('#content-left-windstability').html(),
        replace: true,
        scope: {
            pageList: '=',
            detail: '=',
            deviceType: '='
        },

        link ($scope, $element, $attrs) {
            $scope.setTableHeight()
            window.addEventListener('resize', () => {
                $scope.setTableHeight()

                $scope.$apply()
            })
        },

        controller ($scope, $element) {
            /**
             * 设置列表可滚动高度
             * @return {[type]} [description]
             */
            $scope.setTableHeight = () => {
                let windowHeight = window.innerHeight
                $(".content-body").height(do {
                    if ( (windowHeight - 100) < 545 ) 545
                    else windowHeight - 100
                })
                $scope.tableScrollY = do {
                    if ( (windowHeight - 393) < 245 ) 245
                    else windowHeight - 393
                }

            }

            /**
             * 设置起始时间、结束时间
             * @type {Date}
             */
            $scope.dateTime1 = new Date((new Date).setDate((new Date).getDate() - 7))
            $scope.dateTime2 = new Date

            /**
             * 根据设备类型获取  设备名
             * @param  {[type]} i [description]
             * @return {[type]}   [description]
             */
            $scope.getDeviceName = async (i) => {
                $scope.deviceName = ''
                if (i < 0) return $scope.deviceNames = []
                    
                $scope.deviceNames = await myAjaxData.getData({
                    name: myAjaxData.config.url[i],
                    data: {}
                })
                $scope.$apply()
            }

             /**
             * 根据条件搜索列表
             * @return {[type]} [description]
             */
            $scope.search = () => {
                $scope.pageList.getData({
                    deviceId: $scope.deviceName, 
                    deviceType: $scope.deviceTypeVal, 
                    pageIndex: 0,
                    startDate: $scope.dateTime1.Format('yyyy-MM-dd'),
                    endDate: $scope.dateTime2.Format('yyyy-MM-dd')
                })
            }
            
            /**
             * [监听数据改变之后   处理当前选中  and  选中状态样式]
             */
            $scope.$watch('pageList', (newValue, oldValue) => {
                //console.log(oldValue);
                //console.log(newValue);
                if (void 0 === newValue.res) return
                if (void 0 === newValue.res.data.data[0]) return $scope.loadDetail()
                const _newValue = newValue.res.data.data
                $($element).find('tbody tr').removeClass('active')
                if (oldValue.res) {
                    const _oldValue = oldValue.res.data.data
                    for (let i = 0, len = _newValue.length; i < len; i++) {
                        if (_oldValue[activeIndex] && _newValue[i].deviceId == _oldValue[activeIndex].deviceId) {
                            $($element).find('tbody tr').eq(i).addClass('active')
                            return activeIndex = i
                        }
                    }
                }                
                activeIndex = 0
                $scope.loadDetail(_newValue[0])
            }, !0)

            /**
             * [column table列]
             * @type {Array}
             */
            $scope.column = [
                {
                    title: '风机',
                    dataIndex: 'deviceName',
                    width: '35%',
                    align: 'center',
                    sort: true
                }, {
                    title: '发电稳定度',
                    dataIndex: 'eqreduce',
                    width: '30%',
                    align: 'center',
                    sort: true,
                    render (text, record) {
                        return text + '%'
                    }
                }, {
                    title: '统计时间',
                    dataIndex: 'beginTime',
                    width: '35%',
                    align: 'right',
                    sort: true,
                    render(text, record, index) {
                        return text && new Date(text).Format('yyyy-MM-dd')                       
                    }
                }
            ]


            let activeIndex = 0

            /**
             * [loadDetail 加载详情]
             */
            $scope.loadDetail = async (data: Object, index = 0) => {
                activeIndex = index
                if (!data) {
                    $scope.detail.res = null
                    return $scope.detail.isLoding = !1
                }
                await $scope.detail.getData({
                    stId: myAjaxData.currentStationData.currentSTID,
                    deviceId: data.deviceId,
                    dtime : new Date(data.beginTime).Format("yyyy-MM-dd")
                })
                $($element).find('tbody tr').removeClass('active').eq(index).addClass('active')
            }

            /**
             * [默认显示第一条详情]
             * @param  {[type]} ) 
             */
            ;(async () => {
                await $scope.pageList.promise
                await myAjaxData.timeout(0)
                $scope.loadDetail($scope.pageList.res.data.data[0])
            })()
        }
    }
}])

app.directive('pgsChart', ['myAjaxData', myAjaxData => ({
    restrict: 'E',
    scope: {
        detail: '='
    },
    replace: true,
    link($scope, $element, $attrs) {　　　
        
        $scope.$watch("detail", function (newValue, oldValue) {
            newValue.res && renderChart();
        });

        const myChart = echarts.init($element[0])
        const renderChart = () => {
            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function () {
                        function formatter(params, ticket, callback) {
                            return params.seriesName + ': ' + params.percent + '%';
                        }

                        return formatter;
                    }()
                },
                series: [{
                    name: 'PBA',
                    center: ['50%', '50%'],
                    radius: ['80%', '55%'],
                    type: 'pie',

                    label: {
                        normal: {
                            position: 'center'
                        }
                    },
                    labelLine: {
                        normal: {
                            show: !1
                        }
                    },
                    data: [{
                        value: 80,
                        label: {
                            normal: {
                                formatter: 'PBA',
                                textStyle: {
                                    color: '#3f3f3f',
                                    fontSize: 30
                                }
                            }
                        },
                        tooltip: {
                            show: !1
                        },
                        itemStyle: {
                            normal: {
                                color: '#a186be'
                            },
                            emphasis: {
                                color: '#a186be'
                            }
                        },
                        hoverAnimation: !1
                    }, {
                        value: 20,
                        label: {
                            normal: {
                                formatter: '\n{d} %',
                                textStyle: {
                                    color: '#605f5f',
                                    fontSize: 20
                                }
                            }
                        },
                        itemStyle: {
                            normal: {
                                color: '#7accc8'
                            },
                            emphasis: {
                                color: '#7accc8'
                            }
                        }
                    }]
                }]
                
            }
            myChart.setOption(option)
        }

        renderChart();
        window.addEventListener('resize', () => {
            myChart.resize()
        })
    }
})])

app.directive('pgsChart2', ['myAjaxData', myAjaxData => ({
    restrict: 'E',
    scope: {
        detail: '='
    },
    replace: true,
    link($scope, $element, $attrs) {　
　　　　 const setWidthHeight = () => {
            $($element).width(window.innerWidth - 490 < 800 ? 800 : window.innerWidth - 490 + 'px').height(window.innerHeight - 370 < 275 ? 275 : window.innerHeight - 370 + 'px');
        }

        setWidthHeight()

        $scope.$watch("detail", function (newValue, oldValue) {
            
            newValue.res && renderChart();
        });

        const myChart = echarts.init($element[0])
        const renderChart = () => {
            const option = {
                backgroundColor: '#fff',
                tooltip: {
                    trigger: 'axis',
                    backgroundColor: 'rgba(255,255,255,0.8)',
                    extraCssText: 'box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);',
                    textStyle: {
                        color: '#6a717b'
                    }

                },
                legend: {
                    right: '9%',
                    y: '10',
                    align: 'left',
                    data: ['平均稳定度', '稳定度']

                },
                grid: {
                    top: '40',
                    left: '20',
                    right: '80',
                    bottom: '10',
                    containLabel: !0
                },
                xAxis: [{
                    name: '风速',
                    type: 'category',
                    data: ['0', '2', '4', '6', '8', '10', '12', '14', '16', '18', '20'],
                    axisLine: {
                        lineStyle: {
                            color: '#666'
                        }
                    },
                    axisLabel: {
                        margin: 10,
                        textStyle: {
                            fontSize: 12,
                            color: '#666'
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: '#fff'
                        }
                    }
                }],
                yAxis: [{
                    name: '发电稳定性系数',
                    type: 'value',
                    axisLine: {
                        lineStyle: {
                            color: '#666'
                        }
                    },
                    axisLabel: {
                        margin: 10,
                        textStyle: {
                            fontSize: 12,
                            color: '#666'
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: '#fff'
                        }
                    }
                }],
                series: [{
                    name: '平均稳定度',
                    type: 'line',

                    symbol: 'circle',
                    symbolSize: 10,
                    showSymbol: !0,
                    itemStyle: {
                        normal: {
                            color: 'rgb(99,208,251)'
                        }
                    },
                    areaStyle: {
                        normal: {
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                offset: 0,
                                color: 'rgba(99,208,251, 0.3)'
                            }, {
                                offset: 0.8,
                                color: 'rgba(99,208,251, 0.2)'
                            }, {
                                offset: 1,
                                color: 'rgba(99,208,251, 0.2)'
                            }], !1),
                            shadowColor: 'rgba(0, 0, 0, 0.1)',
                            shadowBlur: 10
                        }
                    },

                    data: [220, 182, 191, 134, 150, 120, 110, 125, 145, 122, 165, 122]
                }, {
                    name: '稳定度',
                    type: 'line',

                    symbol: 'circle',
                    symbolSize: 10,
                    showSymbol: !0,
                    lineStyle: {
                        normal: {
                            width: 2
                        }
                    },
                    areaStyle: {
                        normal: {
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                offset: 0,
                                color: 'rgba(250,146,146, 0.3)'
                            }, {
                                offset: 0.8,
                                color: 'rgba(250,146,146, 0.2)'
                            }, {
                                offset: 1,
                                color: 'rgba(250,146,146, 0.2)'
                            }], !1),
                            shadowColor: 'rgba(0, 0, 0, 0.1)',
                            shadowBlur: 10
                        }
                    },
                    itemStyle: {
                        normal: {
                            color: 'rgb(250,146,146)'

                        }
                    },
                    data: [120, 110, 125, 145, 122, 165, 122, 220, 182, 191, 134, 150]
                }]
            }
            
            myChart.setOption(option)
        }

        renderChart();
        window.addEventListener('resize', () => {
            setWidthHeight()
            myChart.resize()
        })
    }
})])

ajaxData({
    pageList: {
        name: 'GETanalysisPage',
        data: {
            pageIndex:0,
            pageSize:10,
            startDate: new Date((new Date).setDate((new Date).getDate() - 7)).Format('yyyy-MM-dd'),
            endDate: (new Date).Format('yyyy-MM-dd')
        }
    },
    detail: {
        name: 'GETselectEqPaintingData',
        later: true
    },
    deviceType: {
        name: 'GETgetDeviceType',
        data: {}
    }
},{
    //设备查询地址
    url: [ "GETgetJunctionBox", "GETgetInverter", "GETgetBoxchange", "GETgetAmmeter", "GETgetAerograph" ]
})('powerGenerationStabilityWindCtrl', ['$scope', 'myAjaxData'], ($scope, myAjaxData) => {

})