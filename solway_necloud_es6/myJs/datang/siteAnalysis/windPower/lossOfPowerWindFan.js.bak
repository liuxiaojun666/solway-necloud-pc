app.directive('contentLeftWindfanloss', ['myAjaxData', myAjaxData => {
    return {
        restrict: 'E',
        template: $('#content-left-windfanloss').html(),
        replace: true,
        scope: {
            pageList: '=',
            detail: '=',
            deviceType: '='
        },

        link ($scope, $element, $attrs) {
            $scope.setTableHeight()
            window.addEventListener('resize', () => {
                $scope.setTableHeight()

                $scope.$apply()
            })
        },

        controller ($scope, $element) {
            /**
             * 设置列表可滚动高度
             * @return {[type]} [description]
             */
            $scope.setTableHeight = () => {
                let windowHeight = window.innerHeight
                $(".content-body").height(do {
                    if ( (windowHeight - 100) < 545 ) 545
                    else windowHeight - 100
                })
                $scope.tableScrollY = do {
                    if ( (windowHeight - 393) < 245 ) 245
                    else windowHeight - 393
                }

            }

            /**
             * 设置起始时间、结束时间
             * @type {Date}
             */
            $scope.dateTime1 = new Date((new Date).setDate((new Date).getDate() - 7))
            $scope.dateTime2 = new Date

            /**
             * 根据设备类型获取  设备名
             * @param  {[type]} i [description]
             * @return {[type]}   [description]
             */
            $scope.getDeviceName = async (i) => {
                $scope.deviceName = ''
                if (i < 0) return $scope.deviceNames = []
                    
                $scope.deviceNames = await myAjaxData.getData({
                    name: myAjaxData.config.url[i],
                    data: {}
                })
                $scope.$apply()
            }

             /**
             * 根据条件搜索列表
             * @return {[type]} [description]
             */
            $scope.search = () => {
                $scope.pageList.getData({
                    deviceId: $scope.deviceName, 
                    deviceType: $scope.deviceTypeVal, 
                    pageIndex: 0,
                    startDate: $scope.dateTime1.Format('yyyy-MM-dd'),
                    endDate: $scope.dateTime2.Format('yyyy-MM-dd')
                })
            }
            
            /**
             * [监听数据改变之后   处理当前选中  and  选中状态样式]
             */
            $scope.$watch('pageList', (newValue, oldValue) => {
                //console.log(oldValue);
                //console.log(newValue);
                if (void 0 === newValue.res) return
                if (void 0 === newValue.res.data.data[0]) return $scope.loadDetail()
                const _newValue = newValue.res.data.data
                $($element).find('tbody tr').removeClass('active')
                if (oldValue.res) {
                    const _oldValue = oldValue.res.data.data
                    for (let i = 0, len = _newValue.length; i < len; i++) {
                        if (_oldValue[activeIndex] && _newValue[i].deviceId == _oldValue[activeIndex].deviceId) {
                            $($element).find('tbody tr').eq(i).addClass('active')
                            return activeIndex = i
                        }
                    }
                }                
                activeIndex = 0
                $scope.loadDetail(_newValue[0])
            }, !0)

            /**
             * [column table列]
             * @type {Array}
             */
            $scope.column = [
                {
                    title: '风机',
                    dataIndex: 'deviceName',
                    width: '20%',
                    align: 'center',
                    sort: true
                },{
                    title: '损失电量',
                    dataIndex: 'deviceName',
                    width: '30%',
                    align: 'center',
                    sort: true
                }, {
                    title: '等级',
                    dataIndex: 'beginTime',
                    width: '20%',
                    align: 'center',
                    sort: true,
                    render(text, record, index) {
                        return text && new Date(text).Format('yyyy-MM-dd')                       
                    }
                }, {
                    title: '统计时间',
                    dataIndex: 'eqreduce',
                    width: '30%',
                    align: 'right',
                    sort: true,
                    render (text, record) {
                        return text + '%'
                    }
                }
            ]


            let activeIndex = 0

            /**
             * [loadDetail 加载详情]
             */
            $scope.loadDetail = async (data: Object, index = 0) => {
                activeIndex = index
                if (!data) {
                    $scope.detail.res = null
                    return $scope.detail.isLoding = !1
                }
                await $scope.detail.getData({
                    stId: myAjaxData.currentStationData.currentSTID,
                    deviceId: data.deviceId,
                    dtime : new Date(data.beginTime).Format("yyyy-MM-dd")
                })
                $($element).find('tbody tr').removeClass('active').eq(index).addClass('active')
            }

            /**
             * [默认显示第一条详情]
             * @param  {[type]} ) 
             */
            ;(async () => {
                await $scope.pageList.promise
                await myAjaxData.timeout(0)
                $scope.loadDetail($scope.pageList.res.data.data[0])
            })()
        }
    }
}])

app.directive('lopChartBar', ['myAjaxData', myAjaxData => ({
    restrict: 'E',
    scope: {
        detail: '='
    },

    link ($scope, $element, $attrs) {
        const setWidthHeight = () => {
            $($element).height( ((window.innerHeight - 370) < 270) ? 270 : window.innerHeight - 370)
        }
        setWidthHeight()
        const myChart = echarts.init($element[0])
        window.addEventListener('resize', () => {
            setWidthHeight()
            myChart.resize()
        })

        const renderChart = resData => {
            const legend = ['故障', '亚健康', '限电', '计划检修','其他']
            const option = {
                color: ['#2cc6ff'],
                tooltip: {
                    trigger: 'axis',
                },
                legend: {
                    data: [{name: '故障'}, {name: '亚健康'},{name: '限电'}, {name: '计划检修'}, {name: '其他'}],
                    itemWidth: 25,
                    itemGap: 40,
                    height: 15,
                    right: 60,
                    top: 10
                },
                grid: {
                    top: '60',
                    left: '20',
                    right: '60',
                    bottom: '20',
                    containLabel: true
                },
                xAxis: [
                    {
                        name: '时间',
                        type : 'category',
                        axisLine : {
                            lineStyle : {
                                color : '#a4a4a4',
                                width : 1
                            }
                        },
                        data : Array.apply(null, { length: 30 }).map((v, i) => i + 1 + '')
                    }
                ],
                yAxis : [{
                    name: '电量(kWh)',
                    type : 'value',
                    axisLine : {
                        lineStyle : {
                            color : '#a4a4a4',
                            width : 1
                        }
                    },
                    axisTick:{
                        show:false
                    },
                    splitLine: {
                        show: false
                    }
                }],
                series : [
                    ...legend.map((v, i) => ({
                        name: v,
                        type:'bar',
                        barWidth: '20',
                        yAxisIndex: 0,
                        stack: '电量',
                        itemStyle: {
                            normal: {
                                color: ['rgb(244,151,193)','rgb(100,201,226)','rgb(122,203,161)','rgb(250,171,128)', 'rgb(102,102,102)'][i]
                            }
                        },
                        data: Array.apply(null, { length: 30 }).map((v, i) => Math.random() * 20)
                    })),
                ]
            }
            myChart.setOption(option)
        }
        renderChart()
    }
})])

app.directive('chartScatter', ['myAjaxData', myAjaxData => ({
    restrict: 'E',
    scope: {
        detail: '='
    },

    link ($scope, $element, $attrs) {
        const myChart = echarts.init($element[0])
        window.addEventListener('resize', () => {
            myChart.resize()
        })

        const data =  [[-161.2, 51.6], [-167.5, 59.0], [-159.5, 49.2], [157.0, -63.0], [155.8, -53.6],
                [170.0,- 59.0], [159.1, -147.6], [-166.0, -169.8], [-176.2, -66.8], [-160.2, -75.2],
                [172.5, 55.2], [170.9, 54.2], [172.9, -62.5], [-153.4, 42.0], [160.0, 50.0]]
        const renderChart = resData => {
            const option = {
                tooltip:{
                    show:true
                },
                grid : {
                    borderWidth : '0px',
                    top: '40',
                    left: '70',
                    right: '40',
                    bottom: '50',
                },
                calculable : false,
                xAxis : [ {
                    name:'限电损失',
                    type : 'value',
                    scale : true,
                    axisTick : {
                        show : false
                    },
                    axisLine : {
                        lineStyle : {
                            color : 'rgba(187,187,187,0.9)',
                            width : 1
                        }
                    },
                    axisLabel : {
                        textStyle : {
                            align : 'center',
                            color : 'rgba(187,187,187,0.9)',
                            fontSize : 13
                        }
                    },
                    splitLine : {
                        show : false,
                    }
                } ],
                yAxis : [{
                    name:'故障损失',
                    type : 'value',
                    scale : true,
                    position:'center',
                    axisLabel : {
                        margin:20,
                        textStyle : {
                            color : 'rgba(187,187,187,0.9)',
                            fontSize : 12
                        }
                    },
                    
                    font : {
                        color : '#666'
                    },
                    axisLine : {
                        lineStyle : {
                            color : 'rgba(187,187,187,0.9)',
                            width : 1
                        }
                    },
                    splitLine : {
                        show : false,
                    } 
                    
                }],
                series : [
                    {
                            type : 'scatter',
                            symbol: 'image://theme/images/wp/dataAnalysis/wpFault/fan.png',
                            symbolSize:15,
                            data : data
                    }
                ]
            }
            myChart.setOption(option)
        }
        renderChart()
    }
})])
ajaxData({
    pageList: {
        name: 'GETanalysisPage',
        data: {
            pageIndex:0,
            pageSize:10,
            startDate: new Date((new Date).setDate((new Date).getDate() - 7)).Format('yyyy-MM-dd'),
            endDate: (new Date).Format('yyyy-MM-dd')
        }
    },
    detail: {
        name: 'GETselectEqPaintingData',
        later: true
    },
    deviceType: {
        name: 'GETgetDeviceType',
        data: {}
    }
},{
})('lossOfPowerWindFanCtrl', ['$scope', 'myAjaxData'], ($scope, myAjaxData) => {
    $scope.dateTime1 = new Date((new Date).setDate((new Date).getDate() - 7))
    $scope.dateTime2 = new Date
})