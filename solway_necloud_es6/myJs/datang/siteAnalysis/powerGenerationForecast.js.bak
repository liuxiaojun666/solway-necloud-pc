app.directive('pgfBlock', ['myAjaxData', myAjaxData => {
    return {
        restrict: 'E',
        template: $('#pgf-block').html(),
        replace: true,
        scope: {
            title: "@",
            content: '@'
        },
    }
}])


app.directive('pgfChart', ['myAjaxData', (myAjaxData) => {
    return{
        restrict: 'E',
        scope: {
            detail: '='
        },

        link ($scope, $element, $attrs) {
            const setWidthHeight = () => {
                $($element).width(do {
                            if ((window.innerWidth - 220) < 800) 800
                            else window.innerWidth - 220
                        } + 'px')
                        .height( do {
                            if((window.innerHeight - 250) < 300) 300
                            else window.innerHeight - 250
                        } + 'px')
            }
            setWidthHeight()
            const myChart = echarts.init($element[0])
            window.addEventListener('resize', () => {
                setWidthHeight()
                myChart.resize()
            })

            renderChart()
            function renderChart (resData) {
                const items = ['月发电量', '预测月发电量', '去年同期月发电量　　　　　'],
                        colors = ['#32bca7', '#ffad1e', '#86a5a0']
                const option = {
                    backgroundColor: '#fff',
                    legend: {
                        data: items,
                        x: 'right',
                        y: '30'
                    },
                    grid: {
                        top: '80',
                        left: '20',
                        right: '80',
                        bottom: '20',
                        containLabel: true
                    },
                    xAxis: {
                        name: '时间',
                        data: Array.apply(null, { length: 12 }).map((v, i) => i + 1 + '月')
                    },
                    yAxis: {
                        name: '电量',
                        splitLine: {
                            show: false
                        },
                    },
                    series: items.map((v, i) => ({
                        name: v,
                        type: 'bar',
                        itemStyle: {
                            normal: {
                                color: colors[i],
                                label: {
                                    show: true,
                                    position: 'top',
                                    textStyle: {
                                        fontSize: 12
                                    }
                                }
                            }
                        },
                        data: Array.apply(null, { length: 12 }).map((v, i) => Math.ceil(Math.random() * 10000))
                    })),
                }
                myChart.setOption(option)
            }
        }
    }
}])


ajaxData({
        pageList: {
            name: 'GETanalysisPage',
            data: {
                pageIndex:0,
                pageSize:10,
                startDate: new Date((new Date).setDate((new Date).getDate() - 7)).Format('yyyy-MM-dd'),
                endDate: (new Date).Format('yyyy-MM-dd')
            }
        },
        detail: {
            name: 'GETselectEqPaintingData',
            later: true
        },
},{
})('powerGenerationForecastCtrl', ['$scope', 'myAjaxData'], ($scope, myAjaxData) => {
    $scope.dateTime1 = new Date
})