app.directive('contentLeftPgs', ['myAjaxData', myAjaxData => {
    return {
        restrict: 'E',
        template: $('#content-left').html(),
        replace: true,
        scope: {
            pageList: '=',
            detail: '=',
            pba:'=',
            pr:'=',
            deviceType: '='
        },

        link ($scope, $element, $attrs) {
            $scope.setTableHeight()
            window.addEventListener('resize', () => {
                $scope.setTableHeight()
                $scope.$apply()
            })
        },

        controller ($scope, $element) {
            /**
             * 设置列表可滚动高度
             * @return {[type]} [description]
             */
            $scope.setTableHeight = () => {
                let windowHeight = window.innerHeight
                $(".content-body").height(do {
                    if ( (windowHeight - 100) < 545 ) 545
                    else windowHeight - 100
                })
                $scope.tableScrollY = do {
                    if ( (windowHeight - 393) < 245 ) 245
                    else windowHeight - 393
                }
            }

            /**
             * 设置起始时间、结束时间
             * @type {Date}
             */
            $scope.dateTime1 = new Date((new Date).setDate((new Date).getDate() - 7))
            $scope.dateTime2 = new Date

            /**
             * 根据设备类型获取  设备名
             * @param  {[type]} i [description]
             * @return {[type]}   [description]
             */
            $scope.getDeviceName = async (i) => {
                $scope.deviceName = ''
                if (i < 0) return $scope.deviceNames = []
                    
                $scope.deviceNames = await myAjaxData.getData({
                    name: myAjaxData.config.url[i],
                    data: {}
                })
                $scope.$apply()
            }

            /**
             * 根据条件搜索列表
             * @return {[type]} [description]
             */
            $scope.search = () => {
                $scope.pageList.getData({
                    deviceId: $scope.deviceName, 
                    deviceType: $scope.deviceTypeVal, 
                    pageIndex: 0,
                    beginDate: $scope.dateTime1.Format('yyyy-MM-dd'),
                    endDate: $scope.dateTime2.Format('yyyy-MM-dd')
                })
            }

            let activeIndex = 0

            /**
             * [loadDetail 加载详情]
             */
            $scope.loadDetail = async (data: Object, index = 0) => {
                activeIndex = index
                if (!data) {
                    $scope.detail.res = null
                    return $scope.detail.isLoding = !1
                }
                $scope.pba = (data.pba).toFixed(2)*100;
                $scope.pr = (data.pr).toFixed(2)*100;
                await $scope.detail.getData({
                    id: data._id,
                    deviceId :data.eqid,                    
                    currDate : data.dtime
                })
                $($element).find('tbody tr').removeClass('active').eq(index).addClass('active')
            }

            /**
             * [监听数据改变之后   处理当前选中  and  选中状态样式]
             */
            $scope.$watch('pageList', (newValue, oldValue) => {
                if (void 0 === newValue.res) return 
                if(!newValue.res.body.data) return
                if (void 0 === newValue.res.body.data[0]) return $scope.loadDetail()
                const _newValue = newValue.res.body.data
                $($element).find('tbody tr').removeClass('active')
                if (oldValue.res) {
                    const _oldValue = oldValue.res.body.data
                    for (let i = 0, len = _newValue.length; i < len; i++) {
                        if(!_oldValue) continue
                        if (_oldValue[activeIndex] && _newValue[i].deviceId == _oldValue[activeIndex].deviceId) {
                            $($element).find('tbody tr').eq(i).addClass('active')
                            return activeIndex = i
                        }
                    }
                }                
                activeIndex = 0
                $scope.loadDetail(_newValue[0])
            }, !0)

            /**
             * [column table列]
             * @type {Array}
             */
            $scope.column = [
                {
                    title: '设备名称',
                    dataIndex: 'eq_name',
                    width: '35%',
                    align: 'center',
                    sort: true
                }, {
                    title: '时间',
                    dataIndex: 'dtime',
                    width: '35%',
                    align: 'center',
                    sort: true
                }, {
                    title: '损失比例',
                    dataIndex: 'ipg_st_avg',
                    width: '30%',
                    align: 'right',
                    sort: true,
                    render(text){
                        return text+""
                    }
                }
            ]

            /**
             * 监听电站切换  或  其他  引起的设备类型改变，重新初始化设备类型跟设备
             * @param  {[type]} 'deviceType' [description]
             * @param  {[type]} (async       (newValue,    oldValue [description]
             * @return {[type]}              [description]
             */
            $scope.$watch('deviceType', (async (newValue, oldValue) => {
                await myAjaxData.timeout(0)
                $scope.deviceTypeVal = '2'
                $scope.deviceName = ''
                $scope.getDeviceName(1)
                $scope.$apply()
            }), !0)

            /**
             * [默认显示第一条详情]
             * @param  {[type]} ) 
             */
            ;(async () => {
                await $scope.pageList.promise
                await myAjaxData.timeout(0)
                if(!$scope.pageList.res.body.data) return $scope.loadDetail(false)
                $scope.loadDetail($scope.pageList.res.body.data[0])
            })()
        }
    }
}])

app.directive('pgsChart', ['myAjaxData', myAjaxData => ({
    restrict: 'E',
    scope: {
        pba: '=',
        pr:'='
    },
    link($scope, $element, $attrs) {

        $scope.$watch("pba", (newValue, oldValue) => {
　　　　　　 newValue && renderChart()
　　　　 }, !0)

        const setWidthHeight = () => $($element).width(((window.innerWidth - 490) < 800) ? 800 : window.innerWidth - 490 + 'px')

        setWidthHeight()
        const myChart = echarts.init($element[0])
        const renderChart = () => {
            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function(params, ticket, callback) {
                        return params.seriesName + ': ' + params.percent + '%'
                    }
                },
                series: [{
                    name: 'PBA',
                    center: [ '25.0%', '50%' ],
                    radius: [ '80%', '55%' ],
                    type: 'pie',
                    
                    label: {
                        normal: {
                            position: 'center'
                        }
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: [{
                        value:(100-$scope.pba),
                        label: {
                            normal: {
                                formatter: 'PBA',
                                textStyle: {
                                    color: '#3f3f3f',
                                    fontSize: 30
                                }
                            }
                        },
                        tooltip: {
                            show: false
                        },
                        itemStyle: {
                            normal: {
                                color: '#a186be'
                            },
                            emphasis: {
                                color: '#a186be'
                            }
                        },
                        hoverAnimation: false
                    },{
                        value: $scope.pba ,
                        label: {
                            normal: {
                                formatter: '\n{d} %',
                                textStyle: {
                                    color: '#605f5f',
                                    fontSize: 20
                                }
                            }
                        },
                        itemStyle: {
                            normal: {
                                color: '#7accc8'
                            },
                            emphasis: {
                                color: '#7accc8'
                            }
                        },
                    }, ]
                },{
                    name: 'PR',
                    center: [ '75.0%', '50%' ],
                    radius: [ '80%', '55%' ],
                    type: 'pie',
                    
                    label: {
                        normal: {
                            position: 'center'
                        }
                    },
                    labelLine: {
                        normal: {
                            show: false
                        }
                    },
                    data: [{
                        value: (100-$scope.pr) ,
                        label: {
                            normal: {
                                formatter: 'PR',
                                textStyle: {
                                    color: '#3f3f3f',
                                    fontSize: 30
                                }
                            }
                        },
                        tooltip: {
                            show: false
                        },
                        itemStyle: {
                            normal: {
                                color: '#f9ad81'
                            },
                            emphasis: {
                                color: '#f9ad81'
                            }
                        },
                        hoverAnimation: false
                    },{
                        value:$scope.pr,
                        label: {
                            normal: {
                                formatter: '\n{d} %',
                                textStyle: {
                                    color: '#605f5f',
                                    fontSize: 20
                                }
                            }
                        },
                        itemStyle: {
                            normal: {
                                color: '#7accc8'
                            },
                            emphasis: {
                                color: '#7accc8'
                            }
                        },
                    }, ]
                }]
            }
            myChart.setOption(option)
        }
        
        window.addEventListener('resize', () => {
            setWidthHeight()
            myChart.resize()
        })
    }
})])

app.directive('pgsChart2', ['myAjaxData', (myAjaxData) => {
    return{
        restrict: 'E',
        scope: {
            detail: '='
        },

        link ($scope, $element, $attrs) {
            $scope.$watch("detail", (newValue, oldValue) => {
　　　　　　　　if(newValue.res) renderChart(newValue.res.body)
　　　　　　}, true)
            const setWidthHeight = () => {
                $($element).width(((window.innerWidth - 490) < 800) ? 800 : window.innerWidth - 490+ 'px')
                        .height(((window.innerHeight - 370) < 275) ? 275 : window.innerHeight - 370 + 'px')
            }
            setWidthHeight()
            const myChart = echarts.init($element[0])

            function renderChart (resData) {

                const option = {
                    backgroundColor: '#fff',
                     tooltip: {
                        trigger: 'axis',
                        backgroundColor:'rgba(255,255,255,0.8)',
                        extraCssText: 'box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);',
                        textStyle:{
                            color:'#6a717b',
                        },
                         
                    }, 
                    legend: {
                        x: 'right',
                        y: '10',
                        align: 'left',
                        data:['平均稳定度','稳定度'],
                           
                    },
                     grid: {
                        top: '40',
                        left: '20',
                        right: '80',
                        bottom: '10',
                        containLabel: true
                    },
                    xAxis : [{
                        name:'辐照度',
                        type : 'category',
                        data : resData.x,
                            
                        axisLine: {
                            lineStyle: {
                                color: '#666'
                            }
                        },
                        axisLabel: {
                            margin: 10,
                            textStyle: {
                                fontSize: 12,
                                color:'#666'
                                }
                        },
                        splitLine: {
                            lineStyle: {
                                color: '#fff'
                            }
                        },
                    }],
                     yAxis: [{
                        name: '发电稳定性系数',
                        type: 'value',
                        axisLine: {
                            lineStyle: {
                                color: '#666'
                            }
                        },
                        axisLabel: {
                            margin: 10,
                            textStyle: {
                                fontSize: 12,
                                color:'#666',
                            }
                        },
                        splitLine: {
                            lineStyle: {
                                color: '#fff'
                            }
                        }
                    }],
                    series: [{
                        name: '平均稳定度',
                        type: 'line',
                        // smooth: true,
                        symbol: 'circle',
                        symbolSize:10,
                        showSymbol: true,
                        itemStyle: {
                            normal: {
                                color: 'rgb(99,208,251)',
                            },
                        },
                        areaStyle: {
                            normal: {
                                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                    offset: 0,
                                    color: 'rgba(99,208,251, 0.3)'
                                }, {
                                    offset: 0.8,
                                    color: 'rgba(99,208,251, 0.2)'
                                }, {
                                    offset: 1,
                                    color: 'rgba(99,208,251, 0.2)'
                                }], false),
                                shadowColor: 'rgba(0, 0, 0, 0.1)',
                                shadowBlur: 10
                            }
                        },
                        
                        
                        
                       data: resData.y_ipg_avg
                    },
                      {
                        name: '稳定度',
                        type: 'line',
                        // smooth: true,
                        symbol: 'circle',
                        symbolSize: 10,
                        showSymbol: true,
                        lineStyle: {
                            normal: {
                                width: 2,
                            }
                        },
                        areaStyle: {
                            normal: {
                                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{
                                    offset: 0,
                                    color: 'rgba(250,146,146, 0.3)'
                                }, {
                                    offset: 0.8,
                                    color: 'rgba(250,146,146, 0.2)'
                                }, {
                                    offset: 1,
                                    color: 'rgba(250,146,146, 0.2)'
                                }], false),
                                shadowColor: 'rgba(0, 0, 0, 0.1)',
                                shadowBlur: 10
                            }
                        },
                        itemStyle: {
                            normal: {
                                color: 'rgb(250,146,146)'
                
                            }
                        },
                        data:resData.y_ipg
                    }]
                }
                myChart.setOption(option)
            }


            window.addEventListener('resize', () => {
                setWidthHeight()
                myChart.resize()
            })
        }
    }
}])

ajaxData({
        pageList: {
            name: 'GETStabilityPage',
            data: {
                pageIndex:0,
                pageSize:10,
                beginDate: new Date((new Date).setDate((new Date).getDate() - 7)).Format('yyyy-MM-dd'),
                endDate: (new Date).Format('yyyy-MM-dd')
            }
        },
        detail: {
            name: 'GETStabilityLine',
            later: true
        },
        deviceType: {
            name: 'GETgetDeviceType',
            data: {}
        }
},{
    //设备查询地址
    url: [ "GETgetJunctionBox", "GETgetInverter", "GETgetBoxchange", "GETgetAmmeter", "GETgetAerograph" ]
})('powerGenerationStabilityCtrl', ['$scope', 'myAjaxData'], ($scope, myAjaxData) => {
    
})
