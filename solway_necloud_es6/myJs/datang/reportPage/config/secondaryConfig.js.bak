ajaxData({
    pageList2: {
        name: 'GETopReportLayRelPage',
        data: {},
        later: true
    },
    detail2: {
        name: 'GETopReportLayRelSelectById',
        data: {},
        later: true
    },
    saveOrUpdate2: {
        name: 'opReportLayRelUpdate',
        data: {},
        later: true
    },
    recordDelete2: {
        name: 'opReportLayRelDelete',
        data: {},
        later: true
    },
    recordDeleteBatch2: {
        name: 'opReportLayRelDeleteBatch',
        data: {},
        later: true
    },
    selectByCondition: {
        name: 'GETselectByCondition',
        data: {},
        later: true
    },
}, {
    __serviceName__: 'secondaryConfig'
})('secondaryConfigCtrl', ['$scope', 'secondaryConfig'], ($scope, myAjaxData) => {
    // 获取列表  存储 id
    $scope.$parent.$parent.detail.getDataCallback = (success, res) => getList(res.body.id);
    $scope.$parent.$parent.saveOrUpdate.getDataCallback = (success, res) => getList(res.body.id);
    function getList(id) {
        $scope.layId = id;
        $scope.pageList2.getData({ layId: id });
    }

    // 监听是否编辑状态  非编辑状态 影藏
    $scope.$watch('$parent.$parent.isEdit', (newValue, oldValue) => $scope.secondaryConfig = newValue);

    // 父配置  页 面 新增记录回调    清空layId
    const oldFunc = $scope.$parent.$parent.newRecordBefore;
    $scope.$parent.$parent.newRecordBefore = (...arg) => {
        oldFunc && oldFunc(...arg);
        $scope.layId = void 0;
    };

    // 保存或提交执行函数
    $scope.saveOrSubmit = () => {
        if (!app.lxj_validation($scope.formData, '.edit-form2')) return;
        $scope.saveOrUpdate2.getData({ ...$scope.formData, layId: $scope.layId }).then(res => {
            if (res.code !== 0) return promptObj("error", "", "error:" + res.msg);
            promptObj("success", "", res.msg);
            $scope.edit = false;
            $scope.pageList2.getData({});
        });
    };

    //编辑当前记录
    $scope.editFunc = (id, index) => {
        $scope.edit = true;
        $scope.formData = {};
        $scope.detail2.getData({ id, layId: $scope.layId }).then(res => $scope.formData = res.body);
        $scope.$apply();
    };

    //删除当前记录
    $scope.delFunc = (id) => $scope.recordDelete2.getData({ id, layId: $scope.layId }).then(res => $scope.pageList2.getData());

    // 批量删除执行函数
    $scope.batchDel = () => $scope.recordDeleteBatch2.getData({ layId: $scope.layId, ids: document.getElementsByName('secondaryConfigPage'):: [].filter(ele => ele.checked):: [].map(ele => ele.value):: [].join(',') }).then(res => $scope.pageList2.getData());

    // 列表配置项
    const column = [
        {
            title: '名称',
            dataIndex: 'name',
            width: '',
            align: 'left'
        }, {
            title: '顺序序号',
            dataIndex: 'weight',
            width: '',
            align: 'left',
            render(text) {
                return `<span>${text ? text : ''}</span>`;
            }
        }, {
            title: '页面展示名称',
            dataIndex: 'layName',
            width: '',
            align: 'left'
        }
    ];




    $scope.column = [
        {
            title: `<label class="i-checks m-b-none"><input type="checkbox"><i></i>全选</label>`,
            dataIndex: '',
            width: '80px',
            align: 'left',
            checkboxName: 'secondaryConfigPage',
            render(text, record, index) {
                return `<label class="i-checks m-b-none"><input data-identifies="${record.id}" name="secondaryConfigPage" value="${record.id}" type="checkbox" /><i></i></label>`;
            }
        },
        ...column,
        {
            title: '操作',
            dataIndex: 'id',
            width: '74px',
            align: 'center',
            render(text, record, index) {
                return `
                <i style="cursor: pointer;" class="icon-note  font16" lxj-click="editFunc(${text},${index})"></i>
                <i style="cursor: pointer;" class="icon-trash font16" lxj-click="delFunc(${text})"></i>`;
            }
        },
    ];
    // 需要将table表格内  自定义事件（lxj-click）绑定函数挂载到table组件上
    // lxj-click 绑定的函数只接收 字符串参数
    $scope.tableListBeforeCreated = (scope, element) => {
        scope.editFunc = $scope.editFunc;
        scope.delFunc = $scope.delFunc;
    };
});