ajaxData({
    //列表 必须叫 pageList
    pageList: {
        name: 'GETopReportLaySelectByCondition',
        data: {},
    },
    detail: {
        name: 'GETopReportLaySelectById',
        data: {},
        later: true
    },
    saveOrUpdate: {
        name: 'opReportLayUpdate',
        data: {},
        later: true
    },
    recordDelete: {
        name: 'opReportLayDelete',
        data: {},
        later: true
    },
    recordDeleteBatch: {
        name: 'opReportLayDeleteBatch',
        data: {},
        later: true
    },
    companyList: {
        name: 'POSTCompanyListData',
        data: {}
    }
}, {})('ureportConfig2Ctrl', ['$scope', 'myAjaxData'], ($scope, myAjaxData) => {
    // edit-form 模板 显示配置
    $scope.visibilityConfig = {
        hasSwitchPower: false,
        listName: '集团电站报表配置列表',
        goPage: {
            url: 'app.ureportConfig1',
            name: '报表模板配置'
        }
    };

    // 列表数据 
    $scope.pageList.getDataCallback = (success, res) => {
        if (!success) return;
        $scope.datasource = res.body;
    };

    // 填写要求
    $scope.editRequired = [
        '一、此记录由管理员填写。',
    ];

    // 表格  列配置
    const column = [
        {
            title: '公司',
            dataIndex: 'companyId',
            width: '',
            align: 'left',
            render(text) {
                if (!text) return '<span></span>';
                let companyName = '';
                $scope.companyList.res && $scope.companyList.res.forEach(v => {
                    if (v.comId === text) companyName = v.comName;
                });
                return `<span>${companyName}</span>`;
            }
        },{
            title: '适用范围',
            dataIndex: 'useSt',
            width: '',
            align: 'left',
            render(text) {
                return ['公司', '电站'][text];
            }
        },{
            title: '一级报表名称',
            dataIndex: 'layName',
            width: '',
            align: 'left'
        }, {
            title: '报表类型',
            dataIndex: 'reportType',
            width: '',
            align: 'left',
            render(text) {
                const type = text || 0;
                return `<span>${['', '年报', '月报', '周报', '日报'][type]}</span>`
            }
        }, {
            title: '最早发邮件时间',
            dataIndex: 'startDate',
            width: '',
            align: 'center',
            render(text, item) {
                let str = text || '';
                if (item.reportType == '3' && text) {
                    const tempArr = text.split(',');
                    str = '周' + ['', '一', '二', '三', '四', '五', '六', '日'][tempArr[1]] + ' ' + tempArr[0];
                }
                return `<span>${str}</span>`;
            }
        }, {
            title: '顺序序号',
            dataIndex: 'weight',
            width: '',
            align: 'right',
            render(text) {
                return `<span>${text ? text : ''}</span>`;
            }
        }
    ];

    // 新记录 初始化 之前
    $scope.newRecordBefore = () => $scope.formData = { 
        id: null, 
        reportType: '1', 
        weight: 10, 
        week: 1, 
        week2: 1,
        single: 1, 
        enable: 0, 
        mailAble: 0,
        dateArr: getDateArr(1, void 0),
        dateArr2: getDateArr(1, void 0),
    };

    //编辑当前记录
    function editFunc(id, index) {
        $scope.secondaryConfig = true;
        $scope.formData = {};
        $scope.detail.getData({ id }).then(res => {
            const { reportType, startDate, sendDate} = res.body;
            $scope.formData = {
                ...res.body,
                week: reportType === 3 ? startDate.substr(-1) : '1',
                week2: reportType === 3 ? sendDate.substr(-1) : '1',
                dateArr: getDateArr(reportType, startDate),
                dateArr2: getDateArr(reportType, sendDate),
                isEdit: true
            };
        });
    }
    //删除当前记录
    $scope.delFunc = (id) => $scope.recordDelete.getData({ id }).then(res => $scope.pageList.getData());

    // 批量删除执行函数
    $scope.batchDel = () => $scope.recordDeleteBatch.getData({ ids: document.getElementsByName('test'):: [].filter(ele => ele.checked):: [].map(ele => ele.value):: [].join(',') }).then(res => $scope.pageList.getData());

    // 保存或提交执行函数
    $scope.saveOrSubmit = () => {
        if ($scope.formData.reportType == '3') $scope.formData.startDate = $scope.formData.startDate.split(',')[0] + ',' + $scope.formData.week;
        if (!app.lxj_validation($scope.formData, '.edit-form1')) return;
        $scope.saveOrUpdate.getData({ 
            ...$scope.formData, 
            mailAble: 0, 
            dateArr: null, 
            week: null,
            dateArr2: null, 
            week2: null,
            name: $scope.formData.layName
        }).then(res => {
            if (res.code !== 0) return promptObj("error", "", "error:" + res.msg);
            promptObj("success", "", res.msg);
            $scope.secondaryConfig = true;
            $scope.formData.id = res.body.id;
            $scope.formData.isEdit = true;
            $scope.pageList.getData({});
        });
    };



    // 日期组件 更新回调
    $scope.dateUpdated = (dateStr) => $scope.formData.startDate = dateStr;
    // 日期组件 更新回调
    $scope.dateUpdated2 = (dateStr) => $scope.formData.sendDate = dateStr;

    // 日期组件 传入格式处理
    function getDateArr(reportType, startDate) {
        const func = str => str.split('-').join().split(' ').join().split(':').join().split(',');
        if (reportType == '1') {
            if (startDate) return [null, ...func(startDate), null];
            else return [null, '01', '01', '00', '00', null];
        } else if (reportType == '2') {
            if (startDate) return [null, null, ...func(startDate), null];
            else return [null, null, '01', '00', '00', null];
        } else if (reportType == '4') {
            if (startDate) return [null, null, null, ...func(startDate), null];
            else return [null, null, null, '00', '00', null];
        } else if (reportType == '3') {
            if (startDate) return [null, null, null, ...func(startDate.substr(0, startDate.length - 2)), null];
            else return [null, null, null, '00', '00', null];
        }
    }











    /* ****************************************************************** 下面的不用改 ****************************************************************** */




    // 需要将table表格内  自定义事件（lxj-click）绑定函数挂载到table组件上
    // lxj-click 绑定的函数只接收 字符串参数
    $scope.tableListBeforeCreated = (scope, element) => {
        scope.editFunc = $scope.editFunc
        scope.delFunc = $scope.delFunc
    };
    //编辑当前记录不变代码  不要改
    $scope.editFunc = (id, index) => {
        $scope.isEdit = true;
        $scope.toEdit = true;
        $scope.newRecord = false;
        editFunc(id, index);
        $scope.$apply();
    };
    $scope.column = [
        {
            title: `<label class="i-checks m-b-none"><input type="checkbox"><i></i></label>`,
            dataIndex: '',
            width: '80px',
            align: 'left',
            checkboxName: 'test',
            render(text, record, index) {
                return `<label class="i-checks m-b-none"><input data-identifies="${record.id}" name="test" value="${record.id}" type="checkbox" /><i></i></label>`
            }
        },
        ...column,
        {
            title: '操作',
            dataIndex: 'id',
            width: '74px',
            align: 'center',
            render(text, record, index) {
                return `
                <i style="cursor: pointer;" class="icon-note  font16" lxj-click="editFunc(${text},${index})"></i>
                <i style="cursor: pointer;color:red;" class="icon-trash font16" lxj-click="delFunc(${text})"></i>`
            }
        },
    ];
})