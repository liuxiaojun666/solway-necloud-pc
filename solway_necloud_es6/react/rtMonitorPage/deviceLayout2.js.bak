ajaxData({
    getDeviceLayout: {
        name: 'GETdeviceLayoutV2',
        data: {},
        onlyLatest: true
    },
    rtmSingleStationComm: {
        name: 'GETRtmSingleStationComm',
        data: {
            dateString: new Date().Format("yyyy-MM-dd")
        },
        onlyLatest: true
    }

}, {})('DeviceLayout2Ctrl', ['$scope', 'myAjaxData', '$interval'], ($scope, myAjaxData, $interval) => {
    // 所有状态  默认全选
    $scope.status = {
        status1: true,
        status2: true,
        status3: true,
        status4: true,
        status5: true,
        statusAll: true,
    };



    //双击事件
    $scope.dblclick = function (pstationid, deviceId, deviceSerialNnumber, deviceTypeNow, hasJB) {
        const res = { deviceSerialNnumber, deviceId, pstationid, deviceTypeNow };
        $scope.deviceTypeNow = deviceTypeNow;
        $scope.inverterType = hasJB;//点击逆变器，不同类型跳转不同样式页面（1->inverterDetailNew.jsp,2->inverterDetailNewType1.jsp）

        if (deviceTypeNow == '3') {
            $('#taskList_historyData3').modal({ backdrop: 'static', keyboard: false });
            $scope.$broadcast("showDeviceDetail3broad", res);
        } else if (deviceTypeNow == '2') {
            $('#taskList_historyData2').modal({ backdrop: 'static', keyboard: false });
            $scope.$broadcast("showDeviceDetail2broad", res);
        } else if (deviceTypeNow == '1') {
            $('#taskList_historyData1').modal({ backdrop: 'static', keyboard: false });
            $scope.$broadcast("showDeviceDetail1broad", res);
        }
        return false;
    }

    class Root extends React.Component {
        constructor(props) {
            super(props);
            this.getData = this.getData.bind(this);
            this.bindData = this.bindData.bind(this);
            this.bindEvents = this.bindEvents.bind(this);
            this.dataFilter = this.dataFilter.bind(this);
            this.toggleHover = this.toggleHover.bind(this);
            this.setData = this.setData.bind(this);
            this.state = {
                data: $scope.getDeviceLayout.res || [],
                status: $scope.status,
                hover: {},
                loop: true
            };
            this.bindData();
        }

        getChildContext() {
            return {
                status: this.state.status,
                dblClick: $scope.dblclick
            };
        }

        componentDidMount() {
            this.bindEvents();
            $scope.$on('$destroy', () => this.setState({ data: null, loop: false }));
        }

        switchPowerCallback() {
            $scope.switchPowerCallback = () => {
                this.setState({ data: [], loop: false });
                this.getData(true);
            };
        }

        bindEvents() {
            $scope.changeStatus = statu => {
                $scope.status[statu] = !$scope.status[statu];
                if (statu === 'statusAll') {
                    Object.keys($scope.status).forEach(v => $scope.status[v] = $scope.status[statu]);
                } else {
                    const { statusAll, ...other } = $scope.status;
                    $scope.status.statusAll = Object.values(other).every(e => e);
                }
                this.dataFilter();
            };
        }

        dataFilter() {
            const { status } = $scope;
            this.setState({ status });
        }

        async bindData() {
            const data = await $scope.getDeviceLayout.promise;
            this.switchPowerCallback();
            this.getData();
            this.setState({ data });
        }

        async getData(loop) {
            $scope.rtmSingleStationComm.getData({});
            const data = await $scope.getDeviceLayout.getData({});
            this.setData(data, loop);
        }

        async setData(data, loop) {
            if (loop) {
                this.setState({ data, loop });
            } else if (!this.state.loop) {
                return;
            } else {
                this.setState({ data });
            }
            await myAjaxData.timeout(10000);
            this.getData();
        }

        toggleHover(e, ref, isHover) {
            this.setState({
                hover: { [ref]: isHover }
            });
        }

        render() {
            const { Xb, Nbq, Loading } = window.reactComponent;
            return this.state.data ? (
                this.state.data[0]
                    ? this.state.data.map(v => (
                        <div
                            key={v.id}
                            className={v.deviceType === '3' ? "col-xs-4" : 'col-xs-3'}
                            onMouseEnter={e => this.toggleHover(e, v.deviceType + '' + v.id, true)}
                            onMouseLeave={e => this.toggleHover(e, v.deviceType + '' + v.id, false)}
                            style={{
                                margin: ((this.state.status.status5 &&
                                    !this.state.status.status1 &&
                                    !this.state.status.status2 &&
                                    !this.state.status.status3 &&
                                    !this.state.status.status4) ?
                                    '0' : '10px 0')
                            }}>

                            {v.deviceType === '3' ? <Xb
                                hover={this.state.hover[v.deviceType + '' + v.id]}
                                data={v} /> : null}

                            {v.deviceType === '2' ? <Nbq
                                hover={this.state.hover[v.deviceType + '' + v.id]}
                                data={v} /> : null}
                        </div>
                    )) : <Loading />
            ) : null;
        }
    };
    Root.childContextTypes = {
        status: PropTypes.object,
        dblClick: PropTypes.func
    };
    ReactDOM.render(
        <Root />,
        document.getElementById('deviceLayout')
    );
});