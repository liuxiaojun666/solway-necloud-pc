ajaxData({
    getDeviceLayout: {
        name: 'GETdeviceLayoutV2',
        data: {}
    },
    rtmSingleStationComm: {
        name: 'GETRtmSingleStationComm',
        data: {
            dateString: new Date().Format("yyyy-MM-dd")
        }
    }

}, {})('DeviceLayout2Ctrl', ['$scope', 'myAjaxData', '$interval'], ($scope, myAjaxData, $interval) => {
    // 所有状态  默认全选
    $scope.status = {
        status1: true,
        status2: true,
        status3: true,
        status4: true,
        status5: true,
        statusAll: true,
    };

    const timeInterval = 10 * 1000; // 10秒刷新一次数据

    $scope.$on('$destroy', () => $interval.cancel($scope.timer));


    //双击按钮事件
    $scope.dblclick = function (pstationid, deviceid, deviceSerialNnumber, deviceType, hasJB) {
        const res = {};
        res.deviceSerialNnumber = deviceSerialNnumber;
        res.deviceId = deviceid;
        res.pstationid = pstationid;
        res.deviceTypeNow = deviceType;
        $scope.deviceTypeNow = deviceType;

        $scope.inverterType = hasJB;//点击逆变器，不同类型跳转不同样式页面（1->inverterDetailNew.jsp,2->inverterDetailNewType1.jsp）

        if (deviceType == '3') {
            $('#taskList_historyData3').modal({ backdrop: 'static', keyboard: false });
            //$scope.$emit("showDeviceDetail3", res);
            $scope.$broadcast("showDeviceDetail3broad", res);
        } else if (deviceType == '2') {
            $('#taskList_historyData2').modal({ backdrop: 'static', keyboard: false });
            $scope.$broadcast("showDeviceDetail2broad", res);
            //$scope.$emit("showDeviceDetail2", res);
        } else if (deviceType == '1') {
            $('#taskList_historyData1').modal({ backdrop: 'static', keyboard: false });
            $scope.$broadcast("showDeviceDetail1broad", res);
            //$scope.$emit("showDeviceDetail1", res);
        }
        return false;
        //$scope.showHistoryData_byRTMDeviceLogId(pstationid,deviceid,deviceSerialNnumber,deviceType);
    }

    class Root extends React.Component {
        constructor(props) {
            super(props);
            this.getData = this.getData.bind(this);
            this.bindData = this.bindData.bind(this);
            this.bindEvents = this.bindEvents.bind(this);
            this.dataFilter = this.dataFilter.bind(this);
            this.toggleHover = this.toggleHover.bind(this);
            this.state = {
                data: $scope.getDeviceLayout.res || [],
                status: $scope.status,
                hover: {}
            };
            this.bindData();
        }

        getChildContext() {
            return {
                status: this.state.status,
                dblClick: $scope.dblclick
            };
        }

        componentDidMount() {
            this.bindEvents();
        }

        bindEvents() {
            // 状态过滤 事件执行函数
            $scope.changeStatus = statu => {
                $scope.status[statu] = !$scope.status[statu];
                if (statu === 'statusAll') {
                    Object.keys($scope.status).forEach(v => $scope.status[v] = $scope.status[statu]);
                } else {
                    const { statusAll, ...other } = $scope.status;
                    $scope.status.statusAll = Object.values(other).every(e => e);
                }
                this.dataFilter();
            };
        }

        dataFilter() {
            // 根据选择状态 过滤数据
            const { status } = $scope;
            this.setState({ status });
        }

        async bindData() {
            // 首次绑定数据
            const data = await $scope.getDeviceLayout.promise;
            $scope.timer = $interval(this.getData, timeInterval);
            this.setState({ data });
        }

        async getData() {
            // 获取数据 刷新接口
            $scope.rtmSingleStationComm.getData({});
            const data = await $scope.getDeviceLayout.getData({});
            this.setState({ data });
        }

        toggleHover(e, ref, isHover) {
            // hover事件 处理函数
            const obj = { ...this.state.hover };
            Object.keys(obj).forEach(v => obj[v] = false);
            this.setState({
                hover: {
                    ...obj,
                    [ref]: isHover
                }
            });
        }

        render() {
            const { Xb, Nbq } = window.reactComponent;
            return this.state.data.map(v => (
                <div
                    key={v.id}
                    className="col-xs-4"
                    onMouseEnter={e => this.toggleHover(e, v.deviceType + '' + v.id, true)}
                    onMouseLeave={e => this.toggleHover(e, v.deviceType + '' + v.id, false)}
                    style={{ margin: '10px 0' }}>

                    {v.deviceType === '1' ? <Xb
                        hover={this.state.hover[v.deviceType + '' + v.id]}
                        data={v} /> : null}

                    {v.deviceType === '2' ? <Nbq
                        hover={this.state.hover[v.deviceType + '' + v.id]}
                        data={v} /> : null}
                </div>
            ));
        }
    };
    Root.childContextTypes = {
        status: PropTypes.object,
        dblClick: PropTypes.func
    };
    ReactDOM.render(
        <Root />,
        document.getElementById('deviceLayout')
    );
});